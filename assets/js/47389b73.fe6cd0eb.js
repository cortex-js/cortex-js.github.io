"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[3430],{1510:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"compute-engine/guide-types","title":"Types","description":"In the Compute Engine, the type of an expression is the set of the","source":"@site/docs/compute-engine/08-guide-types.md","sourceDirName":"compute-engine","slug":"/compute-engine/guides/types/","permalink":"/compute-engine/guides/types/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1751589942000,"sidebarPosition":8,"frontMatter":{"title":"Types","slug":"/compute-engine/guides/types/"},"sidebar":"docSidebar","previous":{"title":"LaTeX Syntax","permalink":"/compute-engine/guides/latex-syntax/"},"next":{"title":"Simplify","permalink":"/compute-engine/guides/simplify/"}}');var i=t(4848),r=t(8453);const l={title:"Types",slug:"/compute-engine/guides/types/"},c=void 0,d={},a=[{value:"Type Hierarchy",id:"type-hierarchy",level:2},{value:"Primitive Types",id:"primitive-types",level:2},{value:"Numeric Types",id:"numeric-types",level:3},{value:"Collection Types",id:"collection-types",level:2},{value:"Set",id:"set",level:3},{value:"Tuple",id:"tuple",level:3},{value:"List, Vector, Matrix and Tensor",id:"list-vector-matrix-and-tensor",level:3},{value:"Dictionary and Record",id:"dictionary-and-record",level:3},{value:"Collection",id:"collection",level:3},{value:"Function Signature",id:"function-signature",level:2},{value:"Return Types",id:"return-types",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Named Arguments",id:"named-arguments",level:3},{value:"Optional Arguments",id:"optional-arguments",level:3},{value:"Variadic Arguments",id:"variadic-arguments",level:3},{value:"Function Type",id:"function-type",level:3},{value:"Value Type",id:"value-type",level:2},{value:"Other Constructed Types",id:"other-constructed-types",level:2},{value:"Union",id:"union",level:3},{value:"Intersection",id:"intersection",level:3},{value:"Negation",id:"negation",level:3},{value:"Matching Types",id:"matching-types",level:2},{value:"Compatibility of Complex Types",id:"compatibility-of-complex-types",level:3},{value:"Records",id:"records",level:4},{value:"Dictionaries",id:"dictionaries",level:4},{value:"Tuples",id:"tuples",level:4},{value:"Lists",id:"lists",level:4},{value:"Function Literals",id:"function-literals",level:4},{value:"Checking the Type of a Numeric Value",id:"checking-the-type-of-a-numeric-value",level:3},{value:"Type Inference",id:"type-inference",level:2},{value:"Defining New Types",id:"defining-new-types",level:2},{value:"Nominal vs Structural Types",id:"nominal-vs-structural-types",level:3},{value:"Recursive Types",id:"recursive-types",level:3}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Icon:t,Intro:s,ReadMore:l}=n;return t||x("Icon",!0),s||x("Intro",!0),l||x("ReadMore",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s,{children:(0,i.jsxs)(n.p,{children:["In the Compute Engine, the ",(0,i.jsx)(n.strong,{children:"type"})," of an expression is the set of the\npossible values of that expression."]})}),"\n",(0,i.jsx)(n.p,{children:"The Compute Engine uses a type system to ensure that operations are\nperformed on the correct types of values."}),"\n",(0,i.jsxs)(n.p,{children:["A type is represented by a ",(0,i.jsx)(n.strong,{children:"type expression"}),", which is a string with\na specific syntax."]}),"\n",(0,i.jsxs)(n.p,{children:["A type expression is either a ",(0,i.jsx)(n.strong,{children:"primitive type"})," represented by an identifier\nsuch as ",(0,i.jsx)(n.code,{children:'"integer"'})," or ",(0,i.jsx)(n.code,{children:'"boolean"'})," or a ",(0,i.jsx)(n.strong,{children:"constructed type"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"integer"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"boolean"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"matrix<3x3>"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"integer & !0"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"(integer, integer) -> number"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"(distance: integer+) -> tuple<x: integer, y: integer>"'})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To check the type of an expression"}),", use the ",(0,i.jsx)(n.code,{children:"expr.type"})," property."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"live",live:!0,children:'console.log(ce.parse("3.14").type);\n'})}),"\n",(0,i.jsx)(n.p,{children:"The type of a symbol can be declared explicitly, or it can be inferred from\nthe context in which it is used, such as the value that is assigned to it\nor the operation that is performed on it."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To explicitly declare the type of a symbol"}),", use the ",(0,i.jsx)(n.code,{children:"ce.declare()"})," function."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declare("n", "integer");\nce.parse("n").type;\n// \u2794 "integer"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, to declare the type of a symbol you can evaluate a\n",(0,i.jsx)(n.code,{children:'["Declare"]'})," expression"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.box(["Declare", "n", "\'integer\'"]).evaluate();\nce.parse("n").type;\n// \u2794 "integer"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"type-hierarchy",children:"Type Hierarchy"}),"\n",(0,i.jsxs)(n.p,{children:["The type system is based on the concept of ",(0,i.jsx)(n.strong,{children:"subtyping"}),", which allows for\na hierarchy of types, where a type can be a subtype of another type. This\nallows for more flexible and expressive type definitions, as well as\nbetter error checking and type inference."]}),"\n",(0,i.jsxs)(n.p,{children:["Type A is a ",(0,i.jsx)(n.strong,{children:"subtype"})," of type B if all values of type A are also values of type B.\nIt is also said that type A ",(0,i.jsx)(n.strong,{children:"matches"})," type B."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"any\n\u251c\u2500\u2500 error\n\u251c\u2500\u2500 nothing\n\u251c\u2500\u2500 never\n\u251c\u2500\u2500 unknown\n\u2514\u2500\u2500 expression\n    \u251c\u2500\u2500 symbol\n    \u251c\u2500\u2500 function\n    \u2514\u2500\u2500 value\n        \u251c\u2500\u2500 scalar\n        \u2502   \u251c\u2500\u2500 boolean\n        \u2502   \u251c\u2500\u2500 string\n        \u2502   \u2514\u2500\u2500 number\n        \u2502     \u2514\u2500\u2500 complex\n        \u2502         \u251c\u2500\u2500 imaginary\n        \u2502         \u2514\u2500\u2500 real\n        \u2502             \u2514\u2500\u2500 rational\n        \u2502                 \u2514\u2500 integer\n        \u2514\u2500\u2500 collection\n            \u251c\u2500\u2500 set\n            \u251c\u2500\u2500 dictionary\n            |   \u2514\u2500 record\n            \u2514\u2500\u2500 indexed_collection\n                \u251c\u2500\u2500 tuple\n                \u2514\u2500\u2500 list\n                    \u251c\u2500 vector\n                    \u251c\u2500 matrix\n                    \u2514\u2500 tensor\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," this diagram is simplified and does not accurately reflect the finite vs\nnon-finite distinction for the numeric types."]}),"\n",(0,i.jsx)(n.p,{children:"This hierarchy allows the Compute Engine to reason about compatibility and subtyping relationships between expressions."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"unknown"})," type is a placeholder for an expression whose type has not yet\nbeen determined, typically during type inference or partial evaluation. It is\ncompatible with all types, and all types are compatible with it. It serves as\na wildcard in type matching and can be replaced or refined as more information\nbecomes available."]}),"\n",(0,i.jsx)("div",{style:{visibility:"hidden"},children:(0,i.jsx)("a",{href:"#naming-constraints-for-elements-and-arguments",id:"naming-constraints-for-elements-and-arguments"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{children:(0,i.jsx)(n.strong,{children:"Naming Constraints for Elements and Arguments"})}),(0,i.jsx)(n.p,{children:"Element names (used in tuples, records, dictionaries) and function argument names must:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"start with a letter or underscore"}),"\n",(0,i.jsx)(n.li,{children:"contain only letters, digits, or underscores"}),"\n"]}),(0,i.jsx)(n.p,{children:"If a name does not follow these rules, it must be enclosed in backticks."}),(0,i.jsx)(n.p,{children:"For example:"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"tuple<`1st`: integer, `2nd`: integer, `3rd`: integer>"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"record<`dur\xe9e`: number, vitesse: number>"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"(`\u76f4\u5f84`: number) -> number"})}),(0,i.jsx)(n.p,{children:"The backticks are not part of the name, they are used to escape the name."}),(0,i.jsx)(n.p,{children:"In the unlikely event that the name contains a backtick or backslash, it must be escaped with a backslash:"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"record<`name\\`with\\`backticks\\\\and\\\\backslash`: integer>"})}),(0,i.jsx)(n.p,{children:"The backtick syntax is used instead of quotes to clearly distinguish identifiers from string values, following conventions from languages such as Swift and Kotlin"}),(0,i.jsx)(n.p,{children:"Element and argument names are stored and compared using Unicode Normalization Form C (NFC)."})]}),"\n",(0,i.jsx)(n.h2,{id:"primitive-types",children:"Primitive Types"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"primitive type"})," is a type that is not defined in terms of other types."]}),"\n",(0,i.jsx)(n.p,{children:"The Compute Engine supports the following primitive types:"}),"\n",(0,i.jsx)("div",{className:"symbols-table first-column-header",style:{"--first-col-width":"12ch"},children:(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"any"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The universal type, it contains all possible values. It has the following sub-types: ",(0,i.jsx)(n.code,{children:"error"}),", ",(0,i.jsx)(n.code,{children:"nothing"}),",   ",(0,i.jsx)(n.code,{children:"never"}),",  ",(0,i.jsx)(n.code,{children:"unknown"})," and ",(0,i.jsx)(n.code,{children:"expression"}),". No other type matches ",(0,i.jsx)(n.code,{children:"any"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"error"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of an ",(0,i.jsx)(n.strong,{children:"invalid expression"}),", such as ",(0,i.jsx)(n.code,{children:'["Error"]'})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"nothing"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type whose only member is the symbol ",(0,i.jsx)(n.code,{children:"Nothing"}),"; the unit type"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"never"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type that has no values; the empty type or ",(0,i.jsx)(n.strong,{children:"bottom type"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"unknown"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of an expression whose type is not known. An expression whose type is ",(0,i.jsx)(n.code,{children:"unknown"})," can have its type modified (narrowed or broadened) at any time. Every other type matches ",(0,i.jsx)(n.code,{children:"unknown"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"expression"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of a symbolic expression that represents a mathematical object, such as ",(0,i.jsx)(n.code,{children:'["Add", 1, "x"]'}),", a ",(0,i.jsx)(n.code,{children:"symbol"}),", a ",(0,i.jsx)(n.code,{children:"function"})," or a ",(0,i.jsx)(n.code,{children:"value"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"symbol"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of a named object, for example a constant or variable in an expression such as ",(0,i.jsx)(n.code,{children:"x"})," or ",(0,i.jsx)(n.code,{children:"alpha"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"function"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of a function literal: an expression that applies some arguments to a body to produce a result, such as ",(0,i.jsx)(n.code,{children:'["Function", ["Add", "x", 1], "x"]'})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"value"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of a constant value, such as ",(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"True"}),", ",(0,i.jsx)(n.code,{children:'"hello"'})," or ",(0,i.jsx)(n.code,{children:"Pi"}),": a ",(0,i.jsx)(n.code,{children:"scalar"})," or a ",(0,i.jsx)(n.code,{children:"collection"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"collection"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of a collection of values: a ",(0,i.jsx)(n.code,{children:"list"}),", a ",(0,i.jsx)(n.code,{children:"set"}),", a ",(0,i.jsx)(n.code,{children:"tuple"}),", a ",(0,i.jsx)(n.code,{children:"dictionary"})," or a ",(0,i.jsx)(n.code,{children:"record"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"indexed_collection"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of a collection of values that can be accessed by an index: a ",(0,i.jsx)(n.code,{children:"list"}),", a ",(0,i.jsx)(n.code,{children:"vector"}),", a ",(0,i.jsx)(n.code,{children:"matrix"})," or a ",(0,i.jsx)(n.code,{children:"tensor"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"scalar"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of a single value: a ",(0,i.jsx)(n.code,{children:"boolean"}),", a ",(0,i.jsx)(n.code,{children:"string"}),", or a ",(0,i.jsx)(n.code,{children:"number"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of the symbol ",(0,i.jsx)(n.code,{children:"True"})," or ",(0,i.jsx)(n.code,{children:"False"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"The type of a string of Unicode characters"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"The type of a numeric value"})]})]})]})}),"\n",(0,i.jsx)(n.h3,{id:"numeric-types",children:"Numeric Types"}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"number"})," represents all numeric values, including ",(0,i.jsx)(n.code,{children:"NaN"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["More specific types of numeric values are represented by subtypes of ",(0,i.jsx)(n.code,{children:"number"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Some numeric types have a variant that excludes non-finite values, such as\n",(0,i.jsx)(n.code,{children:"PositiveInfinity"}),", ",(0,i.jsx)(n.code,{children:"NegativeInfinity"})," and ",(0,i.jsx)(n.code,{children:"ComplexInfinity"}),"."]}),"\n",(0,i.jsx)("div",{className:"symbols-table first-column-header",style:{"--first-col-width":"17ch"},children:(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["All numeric values: a real or complex number or ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\mathrm{NaN}"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"non_finite_number"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The values ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"+\\infty"})," and ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-\\infty"})," (",(0,i.jsx)(n.code,{children:"PositiveInfinity"})," and ",(0,i.jsx)(n.code,{children:"NegativeInfinity"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"complex"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A number with non-zero real and imaginary parts, such as ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"2 + 3i"}),", including ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\tilde\\infty"})," (",(0,i.jsx)(n.code,{children:"ComplexInfinity"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"imaginary"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A pure imaginary number, such as ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"3i"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"real"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A real number, such as ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-2.5"}),", including ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"rational"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A number that can be expressed as the quotient of two integers such as ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-\\nicefrac{3}{4}"}),", including ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"integer"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A whole number, such as ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"42"}),", including ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_number"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A real or complex number, except ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})," and ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\tilde\\infty"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_complex"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A complex number, except ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})," and ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\tilde\\infty"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_real"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A real number, except ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_rational"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A rational number, except ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_integer"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["An integer, except ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})]})]})]})]})}),"\n",(0,i.jsx)(n.p,{children:"Numeric types can be constrained to a specific range within a lower and upper\nbound"}),"\n",(0,i.jsxs)(n.p,{children:["For example ",(0,i.jsx)(n.code,{children:"real< -1.0..1.0 >"})," is the type of real numbers between ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-1.0"})," and ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"1.0"}),", inclusive."]}),"\n",(0,i.jsxs)(n.p,{children:["An non-finite endpoint can be represented by the symbol ",(0,i.jsx)(n.code,{children:"-oo"})," or ",(0,i.jsx)(n.code,{children:"+oo"})," or\nby omitting the endpoint."]}),"\n",(0,i.jsxs)(n.p,{children:["For example: ",(0,i.jsx)(n.code,{children:"real<..1.0>"})," is the type of real numbers less than ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"1.0"}),",\nand is equivalent to ",(0,i.jsx)(n.code,{children:"real< -oo..1.0 >"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To represent an open interval, use a negation value type to exclude the endpoints.\nFor example ",(0,i.jsx)(n.code,{children:"real<0..> & !0"})," is the type of real numbers greater than ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"0"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["When using integers, you can adjust the endpoint instead, so for example\n",(0,i.jsx)(n.code,{children:"integer<1..>"})," is the type of integers greater than or equal to ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"1"}),", which\nis equivalent to ",(0,i.jsx)(n.code,{children:"integer<0..> & !0"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that ",(0,i.jsx)(n.code,{children:"complex"})," and ",(0,i.jsx)(n.code,{children:"imaginary"})," types do not support ranges, as they are not ordered types."]}),"\n",(0,i.jsx)(n.p,{children:"Here is the type of various numeric values:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"Value"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"42"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_integer"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-3.14"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_real"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\nicefrac{1}{2}"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_rational"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"3i"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"imaginary"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"2 + 3i"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_complex"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-\\infty"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"non_finite_number"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\mathrm{NaN}"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"The Compute Engine Standard Library includes definitions for sets that\ncorrespond to some numeric types."}),"\n",(0,i.jsx)(l,{path:"/compute-engine/reference/sets/",children:(0,i.jsxs)(n.p,{children:["Read more about the ",(0,i.jsx)(n.strong,{children:"sets"})," included in the Standard Library ",(0,i.jsx)(t,{name:"chevron-right-bold"})]})}),"\n",(0,i.jsx)(n.h2,{id:"collection-types",children:"Collection Types"}),"\n",(0,i.jsx)(n.p,{children:"A collection type represents an expression that contains multiple values, such as a list, a set, or a dictionary."}),"\n",(0,i.jsxs)(n.p,{children:["The Compute Engine supports the following collection types: ",(0,i.jsx)(n.code,{children:"set"}),", ",(0,i.jsx)(n.code,{children:"tuple"}),",\n",(0,i.jsx)(n.code,{children:"list"})," (including ",(0,i.jsx)(n.code,{children:"vector"}),", ",(0,i.jsx)(n.code,{children:"matrix"})," and ",(0,i.jsx)(n.code,{children:"tensor"}),"), ",(0,i.jsx)(n.code,{children:"record"})," and ",(0,i.jsx)(n.code,{children:"dictionary"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"set",children:"Set"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"set"})," is a non-indexed collection of unique values."]}),"\n",(0,i.jsxs)(n.p,{children:["The type of a set is represented by the type expression ",(0,i.jsx)(n.code,{children:"set<T>"}),", where ",(0,i.jsx)(n.code,{children:"T"}),"\nis the type of the elements of the set."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\{5, 7, 9\\\\}").type\n// \u2794 "set<finite_integer>"\n'})}),"\n",(0,i.jsx)(n.p,{children:"A set can have an infinite number of elements."}),"\n",(0,i.jsx)(n.h3,{id:"tuple",children:"Tuple"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"tuple"})," is an indexed collection of values, representing a fixed\nnumber of elements."]}),"\n",(0,i.jsxs)(n.p,{children:["The type of a tuple is represented by the type expression ",(0,i.jsx)(n.code,{children:"tuple<T1, T2, ...>"}),",\nwhere ",(0,i.jsx)(n.code,{children:"T1"}),", ",(0,i.jsx)(n.code,{children:"T2"}),", ... are the types of the elements of the tuple."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("(7, 5, 7)").type\n// \u2794 "tuple<finite_integer, finite_integer, finite_integer>"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The elements of a tuple can be named: ",(0,i.jsx)(n.code,{children:"tuple<x: integer, y: integer>"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"If an element is named, all elements must be named and the names must be unique\nwhen compared in Unicode Normalization Form C (NFC)."}),"\n",(0,i.jsxs)(n.p,{children:["(See ",(0,i.jsx)(n.a,{href:"#naming-constraints-for-elements-and-arguments",children:"Naming Constraints for Elements and Arguments"})," for rules on element names.)"]}),"\n",(0,i.jsx)(n.p,{children:"The elements of a tuple can be accessed with a one-based index or by name."}),"\n",(0,i.jsx)(n.p,{children:"For two tuples to be compatible, each element must have the same type and the names must match."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("(x: 1, y: 2)")\n  .type.matches("tuple<x: integer, y: integer>");\n// \u2794 true\nce.parse("(x: 1, y: 2)")\n  .type.matches("tuple<a: integer, b: integer>");\n// \u2794 false\n'})}),"\n",(0,i.jsx)(n.h3,{id:"list-vector-matrix-and-tensor",children:"List, Vector, Matrix and Tensor"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"list"})," is an indexed collection of values, used to represent vectors,\nmatrices, and sequences."]}),"\n",(0,i.jsx)(n.p,{children:"The first element of a list is at index 1, the second element is at index 2, and so on."}),"\n",(0,i.jsxs)(n.p,{children:["The type of a list is represented by the type expression ",(0,i.jsx)(n.code,{children:"list<T>"}),", where ",(0,i.jsx)(n.code,{children:"T"})," is the type of the elements of the list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\[1, 2, 3\\\\]").type.toString();\n// \u2794 "list<number>"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The shorthand ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"list"})})," is equivalent to ",(0,i.jsx)(n.code,{children:"list<any>"}),", a list of values of any type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\[1, 2, 3\\\\]").matches("list");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The shorthand ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"vector"})})," is a list of numbers, equivalent to ",(0,i.jsx)(n.code,{children:"list<number>"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\[1, 2, 3\\\\]").matches("vector");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"vector<n>"})})," is a list of ",(0,i.jsx)(n.code,{children:"n"})," numbers."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\[1, 2, 3\\\\]").type.matches("vector<3>");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"vector<T^n>"})})," is a list of ",(0,i.jsx)(n.code,{children:"n"})," elements of type ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\[1, 2, 3\\\\]").type.matches("vector<integer^3>");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Similarly, a ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"matrix"})})," is a list of lists."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The shorthand ",(0,i.jsx)(n.code,{children:"matrix"})," is ",(0,i.jsx)(n.code,{children:"matrix<number^?x?>"}),", a matrix of elements of\ntype ",(0,i.jsx)(n.code,{children:"T"}),", a list of lists of numbers, of rank 2 but of any dimensions. The ",(0,i.jsx)(n.code,{children:"?"}),"\nsymbol is a wildcard that matches any number of elements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"matrix<T>"}),": A matrix of elements of type ",(0,i.jsx)(n.code,{children:"T"}),", of any dimensions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"matrix<nxm>"}),": A matrix of ",(0,i.jsx)(n.code,{children:"n"})," rows and ",(0,i.jsx)(n.code,{children:"m"})," columns (e.g. ",(0,i.jsx)(n.code,{children:"matrix<3x3>"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"matrix<T^nxm>"}),": A matrix of ",(0,i.jsx)(n.code,{children:"n"})," rows and ",(0,i.jsx)(n.code,{children:"m"})," columns of elements of type ",(0,i.jsx)(n.code,{children:"T"}),"\n(e.g. ",(0,i.jsx)(n.code,{children:"matrix<boolean^3x3>"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["And finally, a ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"tensor"})})," is a multi-dimensional array of any values, of any rank,\nand ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"tensor<T>"})})," is a tensor of elements of type ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"dictionary-and-record",children:"Dictionary and Record"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"dictionary"})," and ",(0,i.jsx)(n.strong,{children:"record"})," types represent a collection of key-value pairs,\nwhere each key is a string and each value can be any type."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"record"})," is a special case of a dictionary where the keys are fixed,\nwhile a ",(0,i.jsx)(n.strong,{children:"dictionary"})," can have keys that are not defined in advance."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"record"})," is used to represent objects and structured data with a fixed set of properties.\nA ",(0,i.jsx)(n.strong,{children:"dictionary"})," is well suited to represent hash tables or caches."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Keys"})," must be unique when compared in NFC form within a dictionary or record. Keys are not ordered."]}),"\n",(0,i.jsxs)(n.p,{children:["(See ",(0,i.jsx)(n.a,{href:"#naming-constraints-for-elements-and-arguments",children:"Naming Constraints for Elements and Arguments"})," for rules on key names.)"]}),"\n",(0,i.jsxs)(n.p,{children:["The type of a ",(0,i.jsx)(n.strong,{children:"dictionary"})," is represented by the type expression ",(0,i.jsx)(n.code,{children:"dictionary<T>"}),"\nwhere ",(0,i.jsx)(n.code,{children:"T"})," is the type of the values."]}),"\n",(0,i.jsxs)(n.p,{children:["The type of a ",(0,i.jsx)(n.strong,{children:"record"})," is represented by the type expression ",(0,i.jsx)(n.code,{children:"record<K1: T1, K2: T2, ...>"}),",\nwhere ",(0,i.jsx)(n.code,{children:"K1"}),", ",(0,i.jsx)(n.code,{children:"K2"}),", ... are the keys and ",(0,i.jsx)(n.code,{children:"T1"}),", ",(0,i.jsx)(n.code,{children:"T2"}),", ... are the types of the values."]}),"\n",(0,i.jsxs)(n.p,{children:["For example: ",(0,i.jsx)(n.code,{children:"record<red: integer, green: integer, blue: integer>"})," is a record that\ncontains three elements with keys ",(0,i.jsx)(n.code,{children:"red"}),", ",(0,i.jsx)(n.code,{children:"green"})," and ",(0,i.jsx)(n.code,{children:"blue"}),", and values of type ",(0,i.jsx)(n.code,{children:"integer"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compatibility:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A record of type ",(0,i.jsx)(n.code,{children:"record<K1: T1, K2: T2, ...>"})," is compatible with a record of type\n",(0,i.jsx)(n.code,{children:"record<K1: T1, K2: T2, ..., K3: T3, ...>"})," if:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The keys of the first record are a subset of the keys of the second."}),"\n",(0,i.jsx)(n.li,{children:"The values of the first record are compatible with the values of the second."}),"\n",(0,i.jsx)(n.li,{children:"The order of the keys does not matter."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["A record is compatible with a dictionary ",(0,i.jsx)(n.code,{children:"dictionary<T>"})," if each value type ",(0,i.jsx)(n.code,{children:"T1"}),", ",(0,i.jsx)(n.code,{children:"T2"}),", ... is compatible with ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("record<red: integer, green: integer>")\n  .matches("record<red: integer, green: integer>");\n// \u2794 true\n\nce.type("record<red: integer, green: integer>")\n  .matches("record<red: integer, green: integer, blue: integer>");\n// \u2794 false\n\nce.type("record<red: integer, green: integer, blue: integer>")\n  .matches("record<red: integer, green: integer>");\n// \u2794 true\n\nce.type("record<red: integer, green: integer, blue: integer>")\n  .matches("dictionary<integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"record"})," type is compatible with any record, and the ",(0,i.jsx)(n.code,{children:"dictionary"})," type\nis compatible with both records and dictionaries."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("record<red: integer, green: integer>")\n  .matches("record");\n// \u2794 true\n\nce.type("record<red: integer, green: integer>")\n  .matches("dictionary");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"collection",children:"Collection"}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"collection"})," represent any collection of values, such as a ",(0,i.jsx)(n.code,{children:"list"}),",\na ",(0,i.jsx)(n.code,{children:"set"}),", a ",(0,i.jsx)(n.code,{children:"tuple"}),", a ",(0,i.jsx)(n.code,{children:"record"})," or a ",(0,i.jsx)(n.code,{children:"dictionary"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"collection<T>"})," is a collection of values of type ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"indexed_collection<T>"})," is an indexed collection of values of type ",(0,i.jsx)(n.code,{children:"T"}),",\nsuch as a ",(0,i.jsx)(n.code,{children:"list"}),", a ",(0,i.jsx)(n.code,{children:"tuple"}),", or a ",(0,i.jsx)(n.code,{children:"matrix"}),". It is a subtype of\n",(0,i.jsx)(n.code,{children:"collection<T>"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"function signature"})," is the type of functions literals."]}),"\n",(0,i.jsxs)(n.p,{children:["A function signature is represented by the type expression ",(0,i.jsx)(n.code,{children:"(T1) -> T2"}),", where\n",(0,i.jsx)(n.code,{children:"T1"})," is the type of the input values of the function literal and ",(0,i.jsx)(n.code,{children:"T2"})," is the\ntype of the output value, or return type, of the function literal."]}),"\n",(0,i.jsx)(n.h3,{id:"return-types",children:"Return Types"}),"\n",(0,i.jsxs)(n.p,{children:["If the function does not return a value, the function signature is ",(0,i.jsx)(n.code,{children:"(T) -> nothing"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A function that never returns, has a signature of ",(0,i.jsx)(n.code,{children:"(T) -> never"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.p,{children:["The arguments of a function are a sequence of comma-separated types surrounded\nby parentheses, for example ",(0,i.jsx)(n.code,{children:"(T1, T2, ...) -> T3"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If there are no input arguments, the signature is ",(0,i.jsx)(n.code,{children:"() -> T"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For example ",(0,i.jsx)(n.code,{children:"() -> integer"})," is the type of functions that return an integer\nand have no input arguments."]}),"\n",(0,i.jsxs)(n.p,{children:["For example ",(0,i.jsx)(n.code,{children:"(integer, integer) -> integer"})," is the type of functions that map two integers to an integer."]}),"\n",(0,i.jsx)(n.h3,{id:"named-arguments",children:"Named Arguments"}),"\n",(0,i.jsxs)(n.p,{children:["Optionally, the input arguments can be named, for example: ",(0,i.jsx)(n.code,{children:"(x: integer, y: integer) -> integer"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["(See ",(0,i.jsx)(n.a,{href:"#naming-constraints-for-elements-and-arguments",children:"Naming Constraints for Elements and Arguments"})," for rules on argument names.)"]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:"(x: integer) -> integer"})," is a function that takes a single named argument ",(0,i.jsx)(n.code,{children:"x"})," of type ",(0,i.jsx)(n.code,{children:"integer"})," and returns an ",(0,i.jsx)(n.code,{children:"integer"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"optional-arguments",children:"Optional Arguments"}),"\n",(0,i.jsxs)(n.p,{children:["A function signature can include ",(0,i.jsx)(n.strong,{children:"optional arguments"}),", which are arguments\nthat may or may not be provided when calling the function. An optional\nargument is indicated by a question mark immediately after its type."]}),"\n",(0,i.jsxs)(n.p,{children:["For example ",(0,i.jsx)(n.code,{children:"(integer, integer?) -> integer"})," indicates a function literal accepting\none or two integers as input and returning an integer."]}),"\n",(0,i.jsx)(n.p,{children:"If there are any optional arguments, they must be at the end of the argument list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("(integer, integer?) -> number")\n  .matches("(integer) -> number");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"variadic-arguments",children:"Variadic Arguments"}),"\n",(0,i.jsxs)(n.p,{children:["A function signature can include a variable number of arguments, also known as\n",(0,i.jsx)(n.strong,{children:"variadic arguments"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Variadic arguments are indicated by a ",(0,i.jsx)(n.code,{children:"+"})," or ",(0,i.jsx)(n.code,{children:"*"}),"\nimmediately after the type of the last argument. The ",(0,i.jsx)(n.code,{children:"+"})," prefix indicates that\nthe function accepts one or more arguments of that type, while the ",(0,i.jsx)(n.code,{children:"*"})," prefix\nindicates that the function accepts zero or more arguments of that type."]}),"\n",(0,i.jsxs)(n.p,{children:["For example ",(0,i.jsx)(n.code,{children:"(string, integer+) -> integer"})," is a function that accepts a\nstring as a first argument followed by one or more integers and returns an integer."]}),"\n",(0,i.jsxs)(n.p,{children:["To indicate that the function accepts a variable number of arguments of any\ntype, use ",(0,i.jsx)(n.code,{children:"any+"})," or ",(0,i.jsx)(n.code,{children:"any*"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("(integer, integer) -> number")\n  .matches("(integer, integer+) -> number");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.p,{children:"If a signature has a variadic argument, it must be the last argument in the list,\nand it cannot be combined with optional arguments."}),"\n",(0,i.jsx)(n.h3,{id:"function-type",children:"Function Type"}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"function"})," matches any function literal. It is a shorthand for ",(0,i.jsx)(n.code,{children:"(any*) -> unknown"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"value-type",children:"Value Type"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"value type"})," is a type that represents a single value."]}),"\n",(0,i.jsx)(n.p,{children:"The value can be:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["a boolean: ",(0,i.jsx)(n.code,{children:"true"})," or ",(0,i.jsx)(n.code,{children:"false"})]}),"\n",(0,i.jsxs)(n.li,{children:["a number, such as ",(0,i.jsx)(n.code,{children:"42"}),", ",(0,i.jsx)(n.code,{children:"-3.14"}),", or ",(0,i.jsx)(n.code,{children:"6.022e23"})]}),"\n",(0,i.jsxs)(n.li,{children:["a string, such as ",(0,i.jsx)(n.code,{children:'"yellow"'}),","]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Value types can be used in conjunction with a union to represent a type that\ncan be one of multiple values, for example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0 | 1"})," is the type of values that are either ",(0,i.jsx)(n.code,{children:"0"})," or ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"integer | nothing"})," is the type of values that are integers or ",(0,i.jsx)(n.code,{children:"Nothing"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"red" | "green" | "blue"'})," is the type of values that are either of the strings ",(0,i.jsx)(n.code,{children:'"red"'}),", ",(0,i.jsx)(n.code,{children:'"green"'})," or ",(0,i.jsx)(n.code,{children:'"blue"'}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"other-constructed-types",children:"Other Constructed Types"}),"\n",(0,i.jsxs)(n.p,{children:["Types can be combined to form new types using a ",(0,i.jsx)(n.strong,{children:"union"}),", an ",(0,i.jsx)(n.strong,{children:"intersection"}),", or a ",(0,i.jsx)(n.strong,{children:"negation"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"union",children:"Union"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"union"})," is the type of values that are in either of two types."]}),"\n",(0,i.jsx)(n.p,{children:"Unions are useful when a value may be one of several possible types."}),"\n",(0,i.jsxs)(n.p,{children:["The type of a union is represented by the type expression ",(0,i.jsx)(n.code,{children:"T1 | T2"}),", where ",(0,i.jsx)(n.code,{children:"T1"})," and ",(0,i.jsx)(n.code,{children:"T2"})," are the types of the values."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:"number | boolean"})," is the type of values that are numbers or booleans."]}),"\n",(0,i.jsx)(n.h3,{id:"intersection",children:"Intersection"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"intersection"})," is the type of values that are in both of two types."]}),"\n",(0,i.jsx)(n.p,{children:"Intersections are useful when a value must satisfy multiple type constraints at once.\nThey can be used to model values that meet several structural or semantic requirements."}),"\n",(0,i.jsxs)(n.p,{children:["The type of an intersection is represented by the type expression ",(0,i.jsx)(n.code,{children:"T1 & T2"}),", where ",(0,i.jsx)(n.code,{children:"T1"})," and ",(0,i.jsx)(n.code,{children:"T2"})," are the types of the values."]}),"\n",(0,i.jsx)(n.p,{children:"Intersections are most useful for extending or combining record types."}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:"record<length: integer> & record<size: integer>"})," is the type of values\nthat are records with both a ",(0,i.jsx)(n.code,{children:"length"})," and a ",(0,i.jsx)(n.code,{children:"size"})," key, that is ",(0,i.jsx)(n.code,{children:"record<length: integer, size: integer>"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"negation",children:"Negation"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"negation"})," represents values that are excluded from a given type."]}),"\n",(0,i.jsxs)(n.p,{children:["This can be useful for excluding special cases such as ",(0,i.jsx)(n.code,{children:"0"}),", ",(0,i.jsx)(n.code,{children:"NaN"}),", or ",(0,i.jsx)(n.code,{children:"Infinity"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A type negation is represented by the type expression ",(0,i.jsx)(n.code,{children:"!T"}),", where ",(0,i.jsx)(n.code,{children:"T"})," is a type."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:"!integer"})," is the type of values that are not integers."]}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"integer & !0"})," is the type of values that are integers but not ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"matching-types",children:"Matching Types"}),"\n",(0,i.jsxs)(n.p,{children:["Two types can be evaluated for ",(0,i.jsx)(n.strong,{children:"compatibility"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A type ",(0,i.jsx)(n.code,{children:"A"})," matches type ",(0,i.jsx)(n.code,{children:"B"})," if all values of ",(0,i.jsx)(n.code,{children:"A"})," are also values of ",(0,i.jsx)(n.code,{children:"B"}),", that is, if ",(0,i.jsx)(n.code,{children:"A"})," is a subtype of ",(0,i.jsx)(n.code,{children:"B"}),".\nMatching is used for type checking and for validating function arguments."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To check if two types are compatible"}),", use the ",(0,i.jsx)(n.code,{children:"type.matches()"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("integer").matches("number");\n// \u2794 true\n\nce.type("number").matches("integer");\n// \u2794 false\n\nce.parse("3.14").type.matches("real");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.p,{children:"Do not check for type compatibility by comparing the type strings directly."}),(0,i.jsxs)(n.p,{children:["Type strings may represent refined or derived types\n(e.g. ",(0,i.jsx)(n.code,{children:"real"})," vs ",(0,i.jsx)(n.code,{children:"finite_real"}),"), so use ",(0,i.jsx)(n.code,{children:".matches()"})," for compatibility checks\ninstead of strict equality."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("3.14").type === "real";\n// \u2794 false (the type is actually "finite_real")\n\nce.parse("3.14").type.matches("real");\n// \u2794 true\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"compatibility-of-complex-types",children:"Compatibility of Complex Types"}),"\n",(0,i.jsx)(n.p,{children:"When checking compatibility of complex types, both structure and element types must be considered."}),"\n",(0,i.jsx)(n.p,{children:"Compatibility of complex types follows specific rules depending on the type of structure, such as records, tuples, or lists."}),"\n",(0,i.jsx)(n.h4,{id:"records",children:"Records"}),"\n",(0,i.jsx)(n.p,{children:"Records are compatible if they have the same keys and the values are compatible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\{red: 1, green: 2\\\\}").type\n  .matches("record<red: integer, green: integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Width subtyping"})," is supported for records, meaning that a record with more keys is\ncompatible with a record with fewer keys."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\{red: 1, green: 2, blue: 3\\\\}").type\n  .matches("record<red: integer, green: integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h4,{id:"dictionaries",children:"Dictionaries"}),"\n",(0,i.jsx)(n.p,{children:"Dictionaries are compatible if the values are compatible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\{red: 1, green: 2\\\\}").type \n  .matches("dictionary<integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.p,{children:"Records are compatible with dictionaries if all the values of the record are compatible with the dictionary's value type."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\{red: 104, green: 2, blue: 37\\\\}").type\n  .matches("dictionary<integer>");\n// \u2794 true\nce.parse("\\\\{user: \\"Bob\\", age: 24\\\\}").type\n  .matches("dictionary<integer>");\n// \u2794 false\n'})}),"\n",(0,i.jsx)(n.h4,{id:"tuples",children:"Tuples"}),"\n",(0,i.jsx)(n.p,{children:"Tuples are compatible if they have the same length and the elements are compatible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("(1, 2, 3)").type\n  .matches("tuple<integer, integer, integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.p,{children:"If the elements of a tuple are named, the names must match."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("(x: 1, y: 2)").type\n  .matches("tuple<x: integer, y: integer>");\n// \u2794 true\n\nce.parse("(x: 1, y: 2)").type\n  .matches("tuple<a: integer, b: integer>");\n// \u2794 false\n'})}),"\n",(0,i.jsx)(n.h4,{id:"lists",children:"Lists"}),"\n",(0,i.jsx)(n.p,{children:"Lists are compatible if they have the same length and the elements are compatible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\[1, 2, 3\\\\]").type\n  .matches("list<finite_integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h4,{id:"function-literals",children:"Function Literals"}),"\n",(0,i.jsx)(n.p,{children:"Function literals are compatible if the input types are compatible and the\noutput types are compatible, specifically the output type is covariant and the\ninput types are contravariant."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("(integer) -> integer")\n  .matches("(number) -> number");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.p,{children:"The name of the arguments of a function signature is not taken into account when\nchecking for compatibility."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("(x: integer) -> integer")\n  .matches("(integer) -> integer");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"checking-the-type-of-a-numeric-value",children:"Checking the Type of a Numeric Value"}),"\n",(0,i.jsxs)(n.p,{children:["The properties ",(0,i.jsx)(n.code,{children:"expr.isNumber"}),", ",(0,i.jsx)(n.code,{children:"expr.isInteger"}),", ",(0,i.jsx)(n.code,{children:"expr.isRational"})," and\n",(0,i.jsx)(n.code,{children:"expr.isReal"})," are shortcuts to check if the type of an expression matches the\ntypes  ",(0,i.jsx)(n.code,{children:'"number"'}),", ",(0,i.jsx)(n.code,{children:'"integer"'}),", ",(0,i.jsx)(n.code,{children:'"rational"'})," and ",(0,i.jsx)(n.code,{children:'"real"'})," respectively."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'console.info(ce.box(3.14).type);\n// \u2794 "finite_real"\n\nconsole.info(ce.box(3.14).type.matches("finite_real")) \n// \u2794 true\n\nconsole.info(ce.box(3.14).type.matches("real")) \n// \u2794 true\n\nconsole.info(ce.box(3.14).isReal) \n// \u2794 true\n\nconsole.info(ce.box(3.14).type.matches("integer")) \n// \u2794 false\n\nconsole.info(ce.box(3.14).isInteger) \n// \u2794 false\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"type-inference",children:"Type Inference"}),"\n",(0,i.jsxs)(n.p,{children:["When  an explicit type is not provided for a symbol, the Compute Engine will\nattempt to ",(0,i.jsx)(n.strong,{children:"infer"})," the type of the symbol based on the context in which it is used.\nThis process is known as ",(0,i.jsx)(n.strong,{children:"type inference"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"When assigning a value to an undeclared symbol, the type of the value is\nused to infer the type of the symbol."}),"\n",(0,i.jsx)(n.p,{children:"If the symbol is a constant, the type is used exactly as the type of the symbol.\nIf the symbol is a variable, the type of the value may be widened to a more general\ntype:"}),"\n",(0,i.jsx)("div",{className:"symbols-table",style:{"--first-col-width":"18ch"},children:(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Value Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Inferred Symbol Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"complex"}),"  ",(0,i.jsx)("br",{})," ",(0,i.jsx)(n.code,{children:"imaginary"})," ",(0,i.jsx)("br",{})," ",(0,i.jsx)(n.code,{children:"non_finite_number"})," ",(0,i.jsx)("br",{})," ",(0,i.jsx)(n.code,{children:"finite_number"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"integer"})," ",(0,i.jsx)("br",{})," ",(0,i.jsx)(n.code,{children:"finite_integer"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"integer"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"real"})," ",(0,i.jsx)("br",{})," ",(0,i.jsx)(n.code,{children:"finite_real"})," ",(0,i.jsx)("br",{})," ",(0,i.jsx)(n.code,{children:"rational"})," ",(0,i.jsx)("br",{})," ",(0,i.jsx)(n.code,{children:"finite_rational"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"real"})})]})]})]})}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsx)("div",{className:"symbols-table",style:{"--first-col-width":"8ch"},children:(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Value"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Value Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Inferred Symbol Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"34"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_integer"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"integer"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"3.14"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_real"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"real"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"4i"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"imaginary"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"1/2"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_rational"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"real"})})]})]})]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.assign("n", 34);\nce.box("n").type;\n// \u2794 "integer"\n'})}),"\n",(0,i.jsx)(n.p,{children:"When a symbol is used in a function expression, the expected type of the\narguments is used to infer the type of the symbol."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declare("n", "unknown");\nce.declare("f", "(number) -> number");\nce.box(["f", "n"]);\nce.box("n").type;\n// \u2794 "number"\n'})}),"\n",(0,i.jsx)(n.p,{children:"A type that has been inferred can be refined later, for example by\nassigning a value of a more specific type to the symbol or by using the\nsymbol in a context that requires a more specific type."}),"\n",(0,i.jsx)(n.p,{children:"Continuing the example above:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declare("g", "(integer) -> number");\nce.box(["g", "n"]);\nce.box("n").type;\n// \u2794 "integer": "n" has been narrowed \n//    from "number" to "integer"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"defining-new-types",children:"Defining New Types"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To define new types"})," use the ",(0,i.jsx)(n.code,{children:"ce.declareType()"})," function.\nThis enables defining domain-specific types that can improve type checking and clarity.\nCustom types help document intent and improve code maintainability."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, to defines a new type ",(0,i.jsx)(n.code,{children:"point"})," that is a tuple of two\nintegers, ",(0,i.jsx)(n.code,{children:"x"})," and ",(0,i.jsx)(n.code,{children:"y"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declareType(\n  "point",\n  "tuple<x: integer, y: integer>"\n);\n'})}),"\n",(0,i.jsx)(n.p,{children:"The type is defined in the current lexical scope."}),"\n",(0,i.jsx)(n.h3,{id:"nominal-vs-structural-types",children:"Nominal vs Structural Types"}),"\n",(0,i.jsx)(n.p,{children:"By default, types are nominal, meaning that to be compatible two types must have\nthe same name and not just the same structure."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("tuple<x: integer, y: integer>")\n  .matches("point");\n// \u2794 false\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To make a type structural"}),", use the ",(0,i.jsx)(n.code,{children:"ce.declareType()"})," function with the\n",(0,i.jsx)(n.code,{children:"alias"})," option. Two structural types are compatible if they have the same structure,\nregardless of their names."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declareType(\n    "pointData", "tuple<x: integer, y: integer>", \n    { alias: true }\n);\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("tuple<x: integer, y: integer>")\n  .matches("pointData");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"recursive-types",children:"Recursive Types"}),"\n",(0,i.jsx)(n.p,{children:"A recursive type is a type that refers to itself in its definition."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To use a type before declaring it"}),", preface it with the ",(0,i.jsx)(n.code,{children:"type"})," keyword in the type expression."]}),"\n",(0,i.jsx)(n.p,{children:"For example, a binary tree can be defined as a tuple of a value and two subtrees:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declareType(\n  "tree", \n  "tuple<value: integer, left: type tree, right: type tree>"\n);\n'})}),"\n",(0,i.jsx)(n.p,{children:"A set of types can be mutually recursive, meaning that they can refer to each other in their definitions."}),"\n",(0,i.jsx)(n.p,{children:"For example, a definition of a JSON value could be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declareType("json", `\n    nothing\n  | boolean\n  | number\n  | string\n  | type json_array\n  | type json_object\n`);\nce.declareType("json_object", "dictionary<json>");\nce.declareType("json_array", "list<json>");\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When using ",(0,i.jsx)(n.code,{children:"type json_array"})," or ",(0,i.jsx)(n.code,{children:"type json_object"}),", the type is not yet defined,\nbut it will be defined later in the code. Using the ",(0,i.jsx)(n.code,{children:"type"})," keyword allows you to use the type\nbefore declaring it. If the referenced type is already defined, the ",(0,i.jsx)(n.code,{children:"type"})," keyword is optional."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);