"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[3430],{3385:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"compute-engine/guide-types","title":"Types","description":"In the Compute Engine, the type of an expression is the set of the possible values of that expression.","source":"@site/docs/compute-engine/08-guide-types.md","sourceDirName":"compute-engine","slug":"/compute-engine/guides/types/","permalink":"/compute-engine/guides/types/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1746974136000,"sidebarPosition":8,"frontMatter":{"title":"Types","slug":"/compute-engine/guides/types/"},"sidebar":"docSidebar","previous":{"title":"LaTeX Syntax","permalink":"/compute-engine/guides/latex-syntax/"},"next":{"title":"Simplify","permalink":"/compute-engine/guides/simplify/"}}');var i=t(4848),r=t(8453);const l={title:"Types",slug:"/compute-engine/guides/types/"},c=void 0,d={},a=[{value:"Type Hierarchy",id:"type-hierarchy",level:2},{value:"Primitive Types",id:"primitive-types",level:2},{value:"Comparison of Special Types",id:"comparison-of-special-types",level:3},{value:"Numeric Types",id:"numeric-types",level:3},{value:"Collection Types",id:"collection-types",level:2},{value:"Set",id:"set",level:3},{value:"Tuple",id:"tuple",level:3},{value:"List, Vector, Matrix and Tensor",id:"list-vector-matrix-and-tensor",level:3},{value:"Map",id:"map",level:3},{value:"Collection",id:"collection",level:3},{value:"Function Signature",id:"function-signature",level:2},{value:"Return Types",id:"return-types",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Named Arguments",id:"named-arguments",level:3},{value:"Optional Argument",id:"optional-argument",level:3},{value:"Rest Argument",id:"rest-argument",level:3},{value:"Function Type",id:"function-type",level:3},{value:"Value Type",id:"value-type",level:2},{value:"Other Constructed Types",id:"other-constructed-types",level:2},{value:"Union",id:"union",level:3},{value:"Intersection",id:"intersection",level:3},{value:"Negation",id:"negation",level:3},{value:"Matching Types",id:"matching-types",level:2},{value:"Compatibility of Complex Types",id:"compatibility-of-complex-types",level:3},{value:"Maps",id:"maps",level:4},{value:"Tuples",id:"tuples",level:4},{value:"Lists",id:"lists",level:4},{value:"Function Literals",id:"function-literals",level:4},{value:"Checking the Type of a Numeric Value",id:"checking-the-type-of-a-numeric-value",level:3},{value:"Defining New Types",id:"defining-new-types",level:2},{value:"Nominal vs Structural Types",id:"nominal-vs-structural-types",level:3},{value:"Recursive Types",id:"recursive-types",level:3}];function o(e){const n={admonition:"admonition",br:"br",code:"code","code-playground":"code-playground",div:"div",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},t=n["code-playground"],{Icon:s,Intro:l,ReadMore:c}=n;return s||x("Icon",!0),l||x("Intro",!0),c||x("ReadMore",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l,{children:(0,i.jsxs)(n.p,{children:["In the Compute Engine, the ",(0,i.jsx)(n.strong,{children:"type"})," of an expression is the set of the possible values of that expression."]})}),"\n",(0,i.jsx)(n.p,{children:"The Compute Engine uses a type system to ensure that operations are\nperformed on the correct types of values."}),"\n",(0,i.jsxs)(n.p,{children:["A type is represented by a ",(0,i.jsx)(n.strong,{children:"type expression"}),", which is a string with\na specific syntax. For example:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"integer"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"boolean"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"matrix<3x3>"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"integer & !0"'})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:'"integer -> integer"'})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A type expression is either a ",(0,i.jsx)(n.strong,{children:"primitive type"})," represented by an identifier\nsuch as ",(0,i.jsx)(n.code,{children:'"integer"'})," or ",(0,i.jsx)(n.code,{children:'"boolean"'})," or a ",(0,i.jsx)(n.strong,{children:"constructed type"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To check the type of an expression"}),", use the ",(0,i.jsx)(n.code,{children:"expr.type"})," property."]}),"\n",(0,i.jsx)(t,{children:(0,i.jsx)(n.div,{slot:"javascript",children:'console.log(ce.parse("3.14").type);\n'})}),"\n",(0,i.jsx)(n.p,{children:"The type of a symbol can be declared explicitly, or it can be inferred from\nthe context in which it is used, such as the value that is assigned to it\nor the operation that is performed on it."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To explicitly declare the type of a symbol"}),", use the ",(0,i.jsx)(n.code,{children:"ce.declare()"})," function."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declare("n", "integer");\nce.parse("n").type;\n// \u2794 "integer"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, to declare the type of a symbol you can evaluate a\n",(0,i.jsx)(n.code,{children:'["Declare"]'})," expression"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.box(["Declare", "n", "\'integer\'"]).evaluate();\nce.parse("n").type;\n// \u2794 "integer"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"type-hierarchy",children:"Type Hierarchy"}),"\n",(0,i.jsxs)(n.p,{children:["The type system is based on the concept of ",(0,i.jsx)(n.strong,{children:"subtyping"}),", which allows for\na hierarchy of types, where a type can be a subtype of another type. This\nallows for more flexible and expressive type definitions, as well as\nbetter error checking and type inference."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plaintext",children:"any\n\u251c\u2500\u2500 error\n\u251c\u2500\u2500 nothing\n\u251c\u2500\u2500 never\n\u251c\u2500\u2500 unknown\n\u2514\u2500\u2500 expression\n    \u251c\u2500\u2500 symbol\n    \u251c\u2500\u2500 function\n    \u2514\u2500\u2500 value\n        \u251c\u2500\u2500 scalar\n        \u2502   \u251c\u2500\u2500 boolean\n        \u2502   \u251c\u2500\u2500 string\n        \u2502   \u2514\u2500\u2500 number\n        \u2502     \u2514\u2500\u2500 complex\n        \u2502         \u251c\u2500\u2500 imaginary\n        \u2502         \u2514\u2500\u2500 real\n        \u2502             \u2514\u2500\u2500 rational\n        \u2502                 \u2514\u2500\u2500 integer\n        \u2514\u2500\u2500 collection\n            \u251c\u2500\u2500 tuple\n            \u251c\u2500\u2500 set\n            \u251c\u2500\u2500 map\n            \u2514\u2500\u2500 list\n                \u2514\u2500\u2500 tensor\n                    \u251c\u2500\u2500 vector\n                    \u2514\u2500\u2500 matrix\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," this diagram is simplified and does not accurately reflect the finite vs\nnon-finite distinction for the numeric types."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"unknown"})," type is a placeholder for an expression whose type has not yet\nbeen determined, typically during type inference or partial evaluation. It is\ncompatible with all types, and all types are compatible with it. It serves as\na wildcard in type matching and can be replaced or refined as more information\nbecomes available."]}),"\n",(0,i.jsx)(n.h2,{id:"primitive-types",children:"Primitive Types"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"primitive type"})," is a type that is not defined in terms of other types."]}),"\n",(0,i.jsx)(n.p,{children:"The Compute Engine supports the following primitive types:"}),"\n",(0,i.jsx)("div",{className:"symbols-table first-column-header",style:{"--first-col-width":"12ch"},children:(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"any"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The universal type, it contains all possible values. It has the following sub-types: ",(0,i.jsx)(n.code,{children:"error"}),", ",(0,i.jsx)(n.code,{children:"nothing"}),",   ",(0,i.jsx)(n.code,{children:"never"}),",  ",(0,i.jsx)(n.code,{children:"unknown"})," and ",(0,i.jsx)(n.code,{children:"expression"}),". No other type matches ",(0,i.jsx)(n.code,{children:"any"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"error"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of an ",(0,i.jsx)(n.strong,{children:"invalid expression"}),", such as ",(0,i.jsx)(n.code,{children:'["Error"]'})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"nothing"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type whose only member is the symbol ",(0,i.jsx)(n.code,{children:"Nothing"}),"; the unit type"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"never"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type that has no values; the empty type or ",(0,i.jsx)(n.strong,{children:"bottom type"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"unknown"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The type of an expression whose type is not known. An expression whose type is ",(0,i.jsx)(n.code,{children:"unknown"})," can have its type modified (narrowed or broadened) at any time. Every other type matches ",(0,i.jsx)(n.code,{children:"unknown"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"expression"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A symbolic expression that represents a mathematical object, such as ",(0,i.jsx)(n.code,{children:'["Add", 1, "x"]'}),", a ",(0,i.jsx)(n.code,{children:"symbol"}),", a ",(0,i.jsx)(n.code,{children:"function"})," or a ",(0,i.jsx)(n.code,{children:"value"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"symbol"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A named object, for example a constant or variable in an expression such as ",(0,i.jsx)(n.code,{children:"x"})," or ",(0,i.jsx)(n.code,{children:"alpha"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"function"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A function literal: an expression that applies some arguments to a body to produce a result, such as ",(0,i.jsx)(n.code,{children:'["Function", ["Add", "x", 1], "x"]'})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"value"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A constant value, such as ",(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"True"}),", ",(0,i.jsx)(n.code,{children:"'hello'"})," or ",(0,i.jsx)(n.code,{children:"Pi"}),": a ",(0,i.jsx)(n.code,{children:"scalar"})," or a ",(0,i.jsx)(n.code,{children:"collection"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"collection"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A collection of values: a ",(0,i.jsx)(n.code,{children:"list"}),", a ",(0,i.jsx)(n.code,{children:"set"}),", a ",(0,i.jsx)(n.code,{children:"tuple"}),", or a ",(0,i.jsx)(n.code,{children:"map"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"scalar"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A single value: a ",(0,i.jsx)(n.code,{children:"boolean"}),", a ",(0,i.jsx)(n.code,{children:"string"}),", or a ",(0,i.jsx)(n.code,{children:"number"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The symbol ",(0,i.jsx)(n.code,{children:"True"})," or ",(0,i.jsx)(n.code,{children:"False"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"A string of Unicode characters"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"A numeric value"})]})]})]})}),"\n",(0,i.jsxs)("div",{className:"symbols-table first-column-header",style:{"--first-col-width":"9ch"},children:[(0,i.jsx)(n.h3,{id:"comparison-of-special-types",children:"Comparison of Special Types"}),(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Assignable To"}),(0,i.jsx)(n.th,{children:"Assignable From"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"any"})}),(0,i.jsx)(n.td,{children:"All possible values"}),(0,i.jsx)(n.td,{children:"\u2713"}),(0,i.jsx)(n.td,{children:"\u2713"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"unknown"})}),(0,i.jsx)(n.td,{children:"Undetermined type, placeholder for inference"}),(0,i.jsx)(n.td,{children:"\u2713"}),(0,i.jsx)(n.td,{children:"\u2713"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"never"})}),(0,i.jsx)(n.td,{children:"No values at all (bottom type)"}),(0,i.jsx)(n.td,{children:"\u2713"}),(0,i.jsx)(n.td,{children:"\u2717"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"nothing"})}),(0,i.jsxs)(n.td,{children:["Singleton unit type (",(0,i.jsx)(n.code,{children:"Nothing"}),")"]}),(0,i.jsx)(n.td,{children:"\u2713"}),(0,i.jsxs)(n.td,{children:["Only ",(0,i.jsx)(n.code,{children:"Nothing"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"error"})}),(0,i.jsx)(n.td,{children:"Invalid or ill-formed expression"}),(0,i.jsx)(n.td,{children:"\u2717"}),(0,i.jsx)(n.td,{children:"\u2717"})]})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"numeric-types",children:"Numeric Types"}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"number"})," represent all numeric values, including ",(0,i.jsx)(n.code,{children:"NaN"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["More specific types of numeric values are represented by subtypes of ",(0,i.jsx)(n.code,{children:"number"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Some numeric types have a variant that excludes non-finite values, such as\n",(0,i.jsx)(n.code,{children:"PositiveInfinity"}),", ",(0,i.jsx)(n.code,{children:"NegativeInfinity"})," and ",(0,i.jsx)(n.code,{children:"ComplexInfinity"}),"."]}),"\n",(0,i.jsx)("div",{className:"symbols-table first-column-header",style:{"--first-col-width":"17ch"},children:(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["All numeric values: a real or complex number or ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\mathrm{NaN}"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"non_finite_number"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The values ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"+\\infty"})," and ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-\\infty"})," (",(0,i.jsx)(n.code,{children:"PositiveInfinity"})," and ",(0,i.jsx)(n.code,{children:"NegativeInfinity"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"complex"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A number with non-zero real and imaginary parts, such as ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"2 + 3i"}),", including ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\tilde\\infty"})," (",(0,i.jsx)(n.code,{children:"ComplexInfinity"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"imaginary"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A pure imaginary number, such as ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"3i"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"real"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A real number, such as ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-2.5"}),", including ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"rational"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A number that can be expressed as the quotient of two integers such as ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-\\nicefrac{3}{4}"}),", including ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"integer"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A whole number, such as ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"42"}),", including ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_number"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A real or complex number, except ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})," and ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\tilde\\infty"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_complex"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A complex number, except ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})," and ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\tilde\\infty"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_real"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A real number, except ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_rational"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A rational number, except ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_integer"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["An integer, except ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\pm\\infty"})]})]})]})]})}),"\n",(0,i.jsx)(n.p,{children:"Here is the type of various numeric values:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"Value"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"42"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_integer"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-3.14"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_real"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\nicefrac{1}{2}"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_rational"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"3i"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"imaginary"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"2 + 3i"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"finite_complex"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-\\infty"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"non_finite_number"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\mathrm{NaN}"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"number"})})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"The Compute Engine Standard Library includes definitions for sets that\ncorrespond to some numeric types."}),"\n",(0,i.jsx)(c,{path:"/compute-engine/reference/sets/",children:(0,i.jsxs)(n.p,{children:["Read more about the ",(0,i.jsx)(n.strong,{children:"sets"})," included in the Standard Library ",(0,i.jsx)(s,{name:"chevron-right-bold"})]})}),"\n",(0,i.jsx)(n.h2,{id:"collection-types",children:"Collection Types"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"collection type"})," is the type of an object that contains multiple values."]}),"\n",(0,i.jsxs)(n.p,{children:["The Compute Engine supports the following collection types: ",(0,i.jsx)(n.code,{children:"set"}),", ",(0,i.jsx)(n.code,{children:"tuple"}),", ",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"list"})," (including ",(0,i.jsx)(n.code,{children:"vector"}),", ",(0,i.jsx)(n.code,{children:"matrix"})," and ",(0,i.jsx)(n.code,{children:"tensor"}),"),  ",(0,i.jsx)(n.code,{children:"map"})," and ",(0,i.jsx)(n.code,{children:"collection"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"set",children:"Set"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"set"})," is an unordered collection of unique values."]}),"\n",(0,i.jsxs)(n.p,{children:["The type of a set is represented by the type expression ",(0,i.jsx)(n.code,{children:"set<T>"}),", where ",(0,i.jsx)(n.code,{children:"T"}),"\nis the type of the elements of the set."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\{1, 2, 3\\\\}").type\n// \u2794 "set<finite_integer>"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"tuple",children:"Tuple"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"tuple"})," is an ordered collection of values, representing a fixed\nnumber of elements."]}),"\n",(0,i.jsxs)(n.p,{children:["The type of a tuple is represented by the type expression ",(0,i.jsx)(n.code,{children:"tuple<T1, T2, ...>"}),",\nwhere ",(0,i.jsx)(n.code,{children:"T1"}),", ",(0,i.jsx)(n.code,{children:"T2"}),", ... are the types of the elements of the tuple."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("(1, 2, 3)").type\n// \u2794 "tuple<finite_integer, finite_integer, finite_integer>"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The elements of a tuple can be named: ",(0,i.jsx)(n.code,{children:"tuple<x: integer, y: integer>"}),". If\nan element is named, all elements must be named and the names must be unique."]}),"\n",(0,i.jsxs)(n.p,{children:["The name of the elements of a tuple must use the letters ",(0,i.jsx)(n.code,{children:"a"})," to ",(0,i.jsx)(n.code,{children:"z"})," or ",(0,i.jsx)(n.code,{children:"A"})," to\n",(0,i.jsx)(n.code,{children:"Z"}),", the digits ",(0,i.jsx)(n.code,{children:"0"})," to ",(0,i.jsx)(n.code,{children:"9"})," or the underscore ",(0,i.jsx)(n.code,{children:"_"})," and must start with a letter\nor an underscore."]}),"\n",(0,i.jsx)(n.p,{children:"For two tuples to be compatible, each element must have the same type and the names must match."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("(x: 1, y: 2)").type.matches("tuple<x: integer, y: integer>");\n// \u2794 true\nce.parse("(x: 1, y: 2)").type.matches("tuple<a: integer, b: integer>");\n// \u2794 false\n'})}),"\n",(0,i.jsx)(n.h3,{id:"list-vector-matrix-and-tensor",children:"List, Vector, Matrix and Tensor"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"list"})," is an ordered collection of values, used to represent vectors,\nmatrices, and sequences."]}),"\n",(0,i.jsxs)(n.p,{children:["The type of a list is represented by the type expression ",(0,i.jsx)(n.code,{children:"list<T>"}),", where ",(0,i.jsx)(n.code,{children:"T"})," is the type of the elements of the list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("[1, 2, 3]").type.toString();\n// \u2794 "list<number>"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The shorthand ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"list"})})," is equivalent to ",(0,i.jsx)(n.code,{children:"list<any>"}),", a list of values of any type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("[1, 2, 3]").matches("list");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The shorthand ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"vector"})})," is a list of numbers, equivalent to ",(0,i.jsx)(n.code,{children:"list<number>"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("[1, 2, 3]").matches("vector");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"vector<n>"})})," is a list of ",(0,i.jsx)(n.code,{children:"n"})," numbers."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("[1, 2, 3]").type.matches("vector<3>");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"vector<T^n>"})})," is a list of ",(0,i.jsx)(n.code,{children:"n"})," elements of type ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("[1, 2, 3]").type.matches("vector<integer^3>");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Similarly, a ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"matrix"})})," is a list of lists."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The shorthand ",(0,i.jsx)(n.code,{children:"matrix"})," is ",(0,i.jsx)(n.code,{children:"matrix<number^?x?>"}),", a matrix of elements of\ntype ",(0,i.jsx)(n.code,{children:"T"}),", a list of lists of numbers, of rank 2 but of any dimensions. The ",(0,i.jsx)(n.code,{children:"?"}),"\nsymbol is a wildcard that matches any number of elements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"matrix<T>"}),": A matrix of elements of type ",(0,i.jsx)(n.code,{children:"T"}),", of any dimensions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"matrix<nxm>"}),": A matrix of ",(0,i.jsx)(n.code,{children:"n"})," rows and ",(0,i.jsx)(n.code,{children:"m"})," columns (e.g. ",(0,i.jsx)(n.code,{children:"matrix<3x3>"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"matrix<T^nxm>"}),": A matrix of ",(0,i.jsx)(n.code,{children:"n"})," rows and ",(0,i.jsx)(n.code,{children:"m"})," columns of elements of type ",(0,i.jsx)(n.code,{children:"T"}),"\n(e.g. ",(0,i.jsx)(n.code,{children:"matrix<boolean^3x3>"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["And finally, a ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"tensor"})})," is a multi-dimensional array of any values, of any rank,\nand ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"tensor<T>"})})," is a tensor of elements of type ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"map",children:"Map"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"map"})," is a collection of key-value pairs, used to represent a dictionary,\nalso known as an associative array, a hash table or a record."]}),"\n",(0,i.jsxs)(n.p,{children:["The keys of a map must use the letters ",(0,i.jsx)(n.code,{children:"a"})," to ",(0,i.jsx)(n.code,{children:"z"})," or ",(0,i.jsx)(n.code,{children:"A"})," to ",(0,i.jsx)(n.code,{children:"Z"}),", the digits\n",(0,i.jsx)(n.code,{children:"0"})," to ",(0,i.jsx)(n.code,{children:"9"})," or the underscore ",(0,i.jsx)(n.code,{children:"_"}),". Keys containing other characters must be\nenclosed in backticks."]}),"\n",(0,i.jsx)(n.p,{children:"Keys must be unique within a map, but they are not ordered."}),"\n",(0,i.jsxs)(n.p,{children:["The type of a map is represented by the type expression ",(0,i.jsx)(n.code,{children:"map<K1: T1, K2: T2, ...>"}),",\nwhere ",(0,i.jsx)(n.code,{children:"K1"}),", ",(0,i.jsx)(n.code,{children:"K2"}),", ... are the keys and ",(0,i.jsx)(n.code,{children:"T1"}),", ",(0,i.jsx)(n.code,{children:"T2"}),", ... are the types of the values."]}),"\n",(0,i.jsxs)(n.p,{children:["For example: ",(0,i.jsx)(n.code,{children:"map<red: integer, green: integer, blue: integer>"})," is a map that\ncontains three elements with keys ",(0,i.jsx)(n.code,{children:"red"}),", ",(0,i.jsx)(n.code,{children:"green"})," and ",(0,i.jsx)(n.code,{children:"blue"}),", and values of type ",(0,i.jsx)(n.code,{children:"integer"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For a map ",(0,i.jsx)(n.code,{children:"A"})," to be compatible with a map ",(0,i.jsx)(n.code,{children:"B"}),", the keys of ",(0,i.jsx)(n.code,{children:"A"})," must be a\nsubset of the keys of ",(0,i.jsx)(n.code,{children:"B"})," and the values of ",(0,i.jsx)(n.code,{children:"A"})," must be compatible with the\nvalues of ",(0,i.jsx)(n.code,{children:"B"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("map<red: integer, green: integer>")\n  .matches("map<red: integer, green: integer>");\n// \u2794 true\n\nce.type("map<red: integer, green: integer>")\n  .matches("map<red: integer, green: integer, blue: integer>");\n// \u2794 false\n\nce.type("map<red: integer, green: integer, blue: integer>")\n  .matches("map<red: integer, green: integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"map"})," matches any map."]}),"\n",(0,i.jsx)(n.h3,{id:"collection",children:"Collection"}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"collection"})," represent any collection of values, such as a ",(0,i.jsx)(n.code,{children:"list"}),",\na ",(0,i.jsx)(n.code,{children:"set"}),", a ",(0,i.jsx)(n.code,{children:"tuple"}),", or a ",(0,i.jsx)(n.code,{children:"map"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"collection<T>"})," is a collection of values of type ",(0,i.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The collection type is an abstract type that is not directly instantiated. It\ncan be used to check if an expression is a collection of values, without\nspecifying the exact type of the collection."}),"\n",(0,i.jsx)(n.h2,{id:"function-signature",children:"Function Signature"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"function signature"})," is the type of functions literals."]}),"\n",(0,i.jsxs)(n.p,{children:["A function signature is represented by the type expression ",(0,i.jsx)(n.code,{children:"(T1) -> T2"}),", where\n",(0,i.jsx)(n.code,{children:"T1"})," is the type of the input values of the function literal and ",(0,i.jsx)(n.code,{children:"T2"})," is the\ntype of the output value, or return type, of the function literal."]}),"\n",(0,i.jsx)(n.h3,{id:"return-types",children:"Return Types"}),"\n",(0,i.jsxs)(n.p,{children:["If the function never returns, the function signature is ",(0,i.jsx)(n.code,{children:"(T) -> never"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If the function does not return a value, the function signature is ",(0,i.jsx)(n.code,{children:"(T) -> nothing"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.p,{children:["If there is a single input argument, the parentheses can be omitted: ",(0,i.jsx)(n.code,{children:"T1 -> T2"}),".\nFor example, ",(0,i.jsx)(n.code,{children:"real -> integer"})," is the type of functions that map real numbers to integers."]}),"\n",(0,i.jsxs)(n.p,{children:["If there are no input arguments, use ",(0,i.jsx)(n.code,{children:"() -> T"}),", for example ",(0,i.jsx)(n.code,{children:"() -> integer"})," is\nthe type of functions that return an integer and have no input arguments."]}),"\n",(0,i.jsxs)(n.p,{children:["If there are multiple input arguments, the function signature is ",(0,i.jsx)(n.code,{children:"(T1, T2, ...) -> T"}),",\nfor example ",(0,i.jsx)(n.code,{children:"(integer, integer) -> integer"})," is the type of functions that map two integers to an integer."]}),"\n",(0,i.jsx)(n.h3,{id:"named-arguments",children:"Named Arguments"}),"\n",(0,i.jsxs)(n.p,{children:["Optionally, the input arguments can be named, for example: ",(0,i.jsx)(n.code,{children:"(x: integer, y: integer) -> integer"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The name of the argument must use the letters ",(0,i.jsx)(n.code,{children:"a"})," to ",(0,i.jsx)(n.code,{children:"z"})," and ",(0,i.jsx)(n.code,{children:"A"})," to ",(0,i.jsx)(n.code,{children:"Z"}),", the digits ",(0,i.jsx)(n.code,{children:"0"})," to ",(0,i.jsx)(n.code,{children:"9"})," or the underscore ",(0,i.jsx)(n.code,{children:"_"}),"\nand must start with a letter or an underscore."]}),"\n",(0,i.jsx)(n.h3,{id:"optional-argument",children:"Optional Argument"}),"\n",(0,i.jsx)(n.p,{children:"An optional argument is indicated by a question mark after the type."}),"\n",(0,i.jsxs)(n.p,{children:["For example ",(0,i.jsx)(n.code,{children:"(integer, integer?) -> integer"})," indicates a function literal accepting\none or two integers as input and returning an integer."]}),"\n",(0,i.jsx)(n.p,{children:"If there are any optional arguments, they must be at the end of the argument list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("(integer, integer?) -> number").matches("(integer) -> number");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"rest-argument",children:"Rest Argument"}),"\n",(0,i.jsxs)(n.p,{children:["A function signature can include a variable number of arguments, also known as\na rest argument, indicated by an ellipsis ",(0,i.jsx)(n.code,{children:"..."})," before the type of the last argument."]}),"\n",(0,i.jsxs)(n.p,{children:["For example ",(0,i.jsx)(n.code,{children:"(string, ...integer) -> integer"})," is a function that accepts a\nstring as a first argument followed by any number of integers and returns an integer."]}),"\n",(0,i.jsxs)(n.p,{children:["To indicate that the function accepts a variable number of arguments of any\ntype, use ",(0,i.jsx)(n.code,{children:"...any"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("(integer, ...integer) -> number").matches("(integer, integer) -> number");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"function-type",children:"Function Type"}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"function"})," matches any function literal, it is a shorthand for ",(0,i.jsx)(n.code,{children:"(...any) -> unknown"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"value-type",children:"Value Type"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"value type"})," is a type that represents a single value."]}),"\n",(0,i.jsx)(n.p,{children:"A value can be:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["a boolean: ",(0,i.jsx)(n.code,{children:"true"})," or ",(0,i.jsx)(n.code,{children:"false"})]}),"\n",(0,i.jsxs)(n.li,{children:["a number, such as ",(0,i.jsx)(n.code,{children:"42"}),", ",(0,i.jsx)(n.code,{children:"-3.14"}),", or ",(0,i.jsx)(n.code,{children:"6.022e23"})]}),"\n",(0,i.jsxs)(n.li,{children:["a string, such as ",(0,i.jsx)(n.code,{children:'"yellow"'}),","]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Value types can be used in conjunction with a union to represent a type that\ncan be one of multiple values, for example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"0 | 1"})," is the type of values that are either ",(0,i.jsx)(n.code,{children:"0"})," or ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"integer | false"})," is the type of values that are integers or ",(0,i.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"red" | "green" | "blue"'})," is the type of values that are either of the strings ",(0,i.jsx)(n.code,{children:'"red"'}),", ",(0,i.jsx)(n.code,{children:'"green"'})," or ",(0,i.jsx)(n.code,{children:'"blue"'}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"other-constructed-types",children:"Other Constructed Types"}),"\n",(0,i.jsx)(n.p,{children:"Types can be combined to form new types using the following operations:"}),"\n",(0,i.jsx)(n.h3,{id:"union",children:"Union"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"union"})," is the type of values that are in either of two types."]}),"\n",(0,i.jsxs)(n.p,{children:["The type of a union is represented by the type expression ",(0,i.jsx)(n.code,{children:"T1 | T2"}),", where ",(0,i.jsx)(n.code,{children:"T1"})," and ",(0,i.jsx)(n.code,{children:"T2"})," are the types of the values."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:"number | boolean"})," is the type of values that are numbers or booleans."]}),"\n",(0,i.jsx)(n.h3,{id:"intersection",children:"Intersection"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"intersection"})," is the type of values that are in both of two types."]}),"\n",(0,i.jsxs)(n.p,{children:["The type of an intersection is represented by the type expression ",(0,i.jsx)(n.code,{children:"T1 & T2"}),", where ",(0,i.jsx)(n.code,{children:"T1"})," and ",(0,i.jsx)(n.code,{children:"T2"})," are the types of the values."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:"map<length: integer> & map<size: integer>"})," is the type of values\nthat are dictionaries with both a ",(0,i.jsx)(n.code,{children:"length"})," and a ",(0,i.jsx)(n.code,{children:"size"})," key."]}),"\n",(0,i.jsx)(n.h3,{id:"negation",children:"Negation"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"negation"})," is the type of values that are not of a given type."]}),"\n",(0,i.jsxs)(n.p,{children:["A type negation is represented by the type expression ",(0,i.jsx)(n.code,{children:"!T"}),", where ",(0,i.jsx)(n.code,{children:"T"})," is a type."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:"!integer"})," is the type of values that are not integers."]}),"\n",(0,i.jsxs)(n.p,{children:["The type ",(0,i.jsx)(n.code,{children:"integer & !0"})," is the type of values that are integers but not ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"matching-types",children:"Matching Types"}),"\n",(0,i.jsxs)(n.p,{children:["Two types can be evaluated for their ",(0,i.jsx)(n.strong,{children:"compatibility"}),". A type ",(0,i.jsx)(n.code,{children:"A"})," is\ncompatible with a type ",(0,i.jsx)(n.code,{children:"B"})," (or matches it) if all values of type ",(0,i.jsx)(n.code,{children:"A"})," are also\nvalues of type ",(0,i.jsx)(n.code,{children:"B"}),". In other words, if ",(0,i.jsx)(n.code,{children:"A"})," is a non-strict subtype of ",(0,i.jsx)(n.code,{children:"B"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To check if two types are compatible"}),", use the ",(0,i.jsx)(n.code,{children:"type.matches()"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("integer").matches("number");\n// \u2794 true\n\nce.type("number").matches("integer");\n// \u2794 false\n\nce.parse("3.14").type.matches("real");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.p,{children:"Do not check for type compatibility by comparing the type strings directly."}),(0,i.jsxs)(n.p,{children:["Type strings may represent refined or derived types\n(e.g. ",(0,i.jsx)(n.code,{children:"real"})," vs ",(0,i.jsx)(n.code,{children:"finite_real"}),"), so use ",(0,i.jsx)(n.code,{children:".matches()"})," for compatibility checks\ninstead of strict equality."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("3.14").type === "real";\n// \u2794 false (the type is actually "finite_real")\n\nce.parse("3.14").type.matches("real");\n// \u2794 true\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"compatibility-of-complex-types",children:"Compatibility of Complex Types"}),"\n",(0,i.jsx)(n.h4,{id:"maps",children:"Maps"}),"\n",(0,i.jsx)(n.p,{children:"Maps are compatible if they have the same keys and the values are compatible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("{red: 1, green: 2}").type\n  .matches("map<red: integer, green: integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Width subtyping"})," is supported for maps, meaning that a map with more keys is\ncompatible with a map with fewer keys."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("{red: 1, green: 2, blue: 3}").type\n  .matches("map<red: integer, green: integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h4,{id:"tuples",children:"Tuples"}),"\n",(0,i.jsx)(n.p,{children:"Tuples are compatible if they have the same length and the elements are compatible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("(1, 2, 3)").type\n  .matches("tuple<integer, integer, integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.p,{children:"If the elements of a tuple are named, the names must match."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("(x: 1, y: 2)").type\n  .matches("tuple<x: integer, y: integer>");\n// \u2794 true\n\nce.parse("(x: 1, y: 2)").type\n  .matches("tuple<a: integer, b: integer>");\n// \u2794 false\n'})}),"\n",(0,i.jsx)(n.h4,{id:"lists",children:"Lists"}),"\n",(0,i.jsx)(n.p,{children:"Lists are compatible if they have the same length and the elements are compatible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("[1, 2, 3]").type\n  .matches("list<finite_integer>");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h4,{id:"function-literals",children:"Function Literals"}),"\n",(0,i.jsx)(n.p,{children:"Function literals are compatible if the input types are compatible and the output types are compatible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("integer -> integer")\n  .matches("number -> number");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.p,{children:"The name of the arguments of a function signature is not taken into account when\nchecking for compatibility."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("x: integer -> integer")\n  .matches("integer -> integer");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"checking-the-type-of-a-numeric-value",children:"Checking the Type of a Numeric Value"}),"\n",(0,i.jsxs)(n.p,{children:["The properties ",(0,i.jsx)(n.code,{children:"expr.isNumber"}),", ",(0,i.jsx)(n.code,{children:"expr.isInteger"}),", ",(0,i.jsx)(n.code,{children:"expr.isRational"})," and\n",(0,i.jsx)(n.code,{children:"expr.isReal"})," are shortcuts to check if the type of an expression matches the\ntypes  ",(0,i.jsx)(n.code,{children:'"number"'}),", ",(0,i.jsx)(n.code,{children:'"integer"'}),", ",(0,i.jsx)(n.code,{children:'"rational"'})," and ",(0,i.jsx)(n.code,{children:'"real"'})," respectively."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'console.info(ce.box(3.14).type);\n// \u2794 "finite_real"\n\nconsole.info(ce.box(3.14).type.matches("finite_real")) \n// \u2794 true\n\nconsole.info(ce.box(3.14).type.matches("real")) \n// \u2794 true\n\nconsole.info(ce.box(3.14).isReal) \n// \u2794 true\n\nconsole.info(ce.box(3.14).type.matches("integer")) \n// \u2794 false\n\nconsole.info(ce.box(3.14).isInteger) \n// \u2794 false\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"defining-new-types",children:"Defining New Types"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To define new types"})," use the ",(0,i.jsx)(n.code,{children:"ce.declareType()"})," function."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, to defines a new type ",(0,i.jsx)(n.code,{children:"point"})," that is a tuple of two\nintegers, ",(0,i.jsx)(n.code,{children:"x"})," and ",(0,i.jsx)(n.code,{children:"y"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declareType("point", "tuple<x: integer, y: integer>");\n'})}),"\n",(0,i.jsx)(n.p,{children:"The type is defined in the current lexical scope."}),"\n",(0,i.jsx)(n.h3,{id:"nominal-vs-structural-types",children:"Nominal vs Structural Types"}),"\n",(0,i.jsx)(n.p,{children:"By default, types are nominal, meaning that to be compatible, they must have\nthe same name and not just the same structure."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("tuple<x: integer, y: integer>")\n  .matches("point");\n// \u2794 false\n'})}),"\n",(0,i.jsxs)(n.p,{children:["To make a type structural, use the ",(0,i.jsx)(n.code,{children:"ce.declareType()"})," function with the\n",(0,i.jsx)(n.code,{children:"alias"})," option. Two structural types are compatible if they have the same structure,\nregardless of their names."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declareType("pointData", "tuple<x: integer, y: integer>", { alias: true });\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.type("tuple<x: integer, y: integer>")\n  .matches("pointData");\n// \u2794 true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"recursive-types",children:"Recursive Types"}),"\n",(0,i.jsx)(n.p,{children:"A recursive type is a type that refers to itself in its definition."}),"\n",(0,i.jsx)(n.p,{children:"For example, a binary tree can be defined as a tuple of a value and two subtrees:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declareType("tree", "tuple<value: integer, left: tree, right: tree>");\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A set of types can be mutually recursive, meaning that they can refer to each other in their definitions.\nIn this case, you can use a type before declaring it by prefacing if with the ",(0,i.jsx)(n.code,{children:"type"})," keyword."]}),"\n",(0,i.jsx)(n.p,{children:"For example, a definition of a JSON object could be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.declareType("json_value", `\n    nothing\n  | boolean\n  | number\n  | string\n  | type json_array\n  | type json_object\n`);\nce.declareType("json_object", "map<string, type json>");\nce.declareType("json_array", "list<type json>");\nce.declareType("json", "json_object | json_array");\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When using ",(0,i.jsx)(n.code,{children:"type json_array"})," or ",(0,i.jsx)(n.code,{children:"type json_object"}),", the type is not yet defined, but it will be\ndefined later in the code. This allows you to use the type before declaring it,\nbut it is not necessary to use the ",(0,i.jsx)(n.code,{children:"type"})," keyword if the type is already defined."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);