"use strict";(globalThis.webpackChunkcortexjs_io=globalThis.webpackChunkcortexjs_io||[]).push([[9048],{4057:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"compute-engine/reference-strings","title":"Strings and Text","description":"Introduction","source":"@site/docs/compute-engine/97-reference-strings.md","sourceDirName":"compute-engine","slug":"/compute-engine/reference/strings/","permalink":"/compute-engine/reference/strings/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1752782392000,"sidebarPosition":97,"frontMatter":{"title":"Strings and Text","slug":"/compute-engine/reference/strings/"},"sidebar":"docSidebar","previous":{"title":"Number Theory","permalink":"/compute-engine/reference/number-theory/"},"next":{"title":"Trigonometry","permalink":"/compute-engine/reference/trigonometry/"}}');var i=s(4848),t=s(8453);const l={title:"Strings and Text",slug:"/compute-engine/reference/strings/"},c=void 0,d={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Strings",id:"strings",level:3},{value:"Annotated Expressions",id:"annotated-expressions",level:3},{value:"Text Expressions",id:"text-expressions",level:3},{value:"Functions",id:"functions",level:2},{value:"String",id:"string",level:3},{value:"StringFrom",id:"stringfrom",level:3},{value:"Utf8",id:"utf8",level:3},{value:"Utf16",id:"utf16",level:3},{value:"UnicodeScalars",id:"unicodescalars",level:3},{value:"GraphemeClusters",id:"graphemeclusters",level:3},{value:"BaseForm",id:"baseform",level:3},{value:"Delimiter",id:"delimiter",level:3},{value:"Spacing",id:"spacing",level:3},{value:"Annotated",id:"annotated",level:3}];function a(e){const n={a:"a",br:"br",code:"code","code-playground":"code-playground",div:"div",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components},s=n["code-playground"],{FunctionDefinition:r,ReadMore:l,Signature:c}=n;return r||x("FunctionDefinition",!0),l||x("ReadMore",!0),c||x("Signature",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.h3,{id:"strings",children:"Strings"}),"\n",(0,i.jsxs)(n.p,{children:["A string is a sequence of characters such as ",(0,i.jsx)("span",{style:{fontSize:"1.2rem"},children:(0,i.jsx)(n.code,{children:'"Hello, \ud83c\udf0d!"'})})," or ",(0,i.jsxs)("span",{style:{fontSize:"1.2rem"},children:[(0,i.jsx)(n.code,{children:'"Simplify(\ud83d\udc68\u200d\ud83d\ude80 \xd7 \u26a1\ufe0f) \u2192 \ud83d\udc68\u200d\ud83c\udfa4"'}),"."]})]}),"\n",(0,i.jsx)(n.p,{children:"In the Compute Engine, strings are composed of encoding-independent Unicode\ncharacters and provide access to those characters through a variety of Unicode\nrepresentations."}),"\n",(0,i.jsxs)(n.p,{children:["Strings are ",(0,i.jsx)(n.strong,{children:"not handled as collections"}),". This is because the concept of a",(0,i.jsx)(n.br,{}),"\n","\u201ccharacter\u201d is inherently ambiguous: a single user-perceived character (a",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"grapheme cluster"}),") may consist of multiple ",(0,i.jsx)(n.strong,{children:"Unicode scalars"})," (code",(0,i.jsx)(n.br,{}),"\n","points), and those scalars may in turn be represented differently in various",(0,i.jsx)(n.br,{}),"\n","encodings: UTF-8, UTF-16, or UTF-32."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The grapheme ",(0,i.jsx)(n.code,{children:"\xe9"})," can be represented as one Unicode scalar (",(0,i.jsx)(n.code,{children:"U+00E9"}),") or",(0,i.jsx)(n.br,{}),"\n","two scalars (",(0,i.jsx)(n.code,{children:"U+0065"})," + ",(0,i.jsx)(n.code,{children:"U+0301"}),", i.e. ",(0,i.jsx)(n.code,{children:"e"})," + combining acute)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The emoji ",(0,i.jsx)(n.code,{children:"\ud83d\udc68\u200d\ud83d\ude80"})," is a grapheme cluster made of multiple scalars:",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"[U+1F468, U+200D, U+1F680]"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In UTF-8, it's encoded as the byte sequence:",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"[240, 159, 145, 168, 226, 128, 141, 240, 159, 154, 128]"})]}),"\n",(0,i.jsxs)(n.p,{children:["In UTF-16, it's encoded as the code units:",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:"[55357, 56457, 8205, 55357, 56960]"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['const s = ce.string("Hello, \ud83c\udf0d!");\n','console.info(ce.function("Utf8", [s]).evaluate().json);\n']})}),"\n",(0,i.jsxs)(n.p,{children:["To avoid confusion and ensure consistent behavior, strings are ",(0,i.jsx)(n.strong,{children:"not accessed directly"})," as collections of characters. Instead, they must be ",(0,i.jsx)(n.strong,{children:"explicitly converted"})," either to a sequence of ",(0,i.jsx)(n.strong,{children:"grapheme clusters"})," (what users perceive as individual characters), or to a sequence of ",(0,i.jsx)(n.strong,{children:"Unicode scalars"})," (code points). For encoding-level operations (such as manipulating UTF-8 or UTF-16), strings must be converted to their encoded form, as ",(0,i.jsx)(n.strong,{children:"Unicode scalars are not encodings"}),". This distinction matters because a single grapheme cluster may be composed of multiple scalars, and each scalar may map to different byte representations depending on the encoding."]}),"\n",(0,i.jsx)(n.h3,{id:"annotated-expressions",children:"Annotated Expressions"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"annotated expression"})," is an expression that carries additional visual or\nsemantic metadata that is not material to the interpretation of an expression\nsuch as text color and size or other typographic variations, a tooltip or a hyperlink\ndata to link to a web page."]}),"\n",(0,i.jsx)(n.p,{children:"While annotated expression can be applied to string, they can also\nbe used to annotate mathematical expressions, such as variables, operators, or\nfunctions, to provide additional context or visual emphasis."}),"\n",(0,i.jsx)(n.p,{children:"For example, an annotated expression can be used to highlight a specific\npart of a mathematical expression:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Equal", \n  "circumference", \n  ["Multiply", 2, ["Annotated", "Pi", {"color": "blue"}], "r"]\n]\n// \u2794 Pi (in blue)\n'})}),"\n",(0,i.jsx)(n.p,{children:"which would correspond to the LaTeX expression:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-latex",children:"\\mathrm{circumference} = 2 \\cdot \\textcolor{blue}{\\pi} \\cdot r\n"})}),"\n",(0,i.jsx)(n.p,{children:"Annotated expressions are similar to attributed strings in other systems."}),"\n",(0,i.jsx)(n.h3,{id:"text-expressions",children:"Text Expressions"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:'["Text"]'})," expression is a sequence of strings, annotated expressions or\nother ",(0,i.jsx)(n.code,{children:'["Text"]'})," expressions. It is used to represent formatted text content,\nfor example from a LaTeX expression like ",(0,i.jsx)(n.code,{children:"\\text{Hello \\mathbf{world}}"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"What would happen if you used a string expression instead of a text expression?"}),"\n",(0,i.jsxs)(n.p,{children:["The arguments of a ",(0,i.jsx)(n.code,{children:'["String"]'})," expression get converted to their string\nrepresentation, then joined together with no spaces. The text representation\nof an annotated expression is the name of the expression, not its formatted\nversion. For example, ",(0,i.jsx)(n.code,{children:'["Annotated", "world", {"dict": {"color": "blue"}}]'})," would\nbe serialized to LaTeX as ",(0,i.jsx)(n.code,{children:'\\mathrm{Annotated}(\\text{world}, {color \\to "blue"})'}),", which is not what you want."]}),"\n",(0,i.jsxs)(n.p,{children:["The arguments of a ",(0,i.jsx)(n.code,{children:'["Text"]'})," expression remain a sequence of elements. When\nserialized to LaTeX, the elements are serialized to appropriate LaTeX commands\nto preserve their formatting and structure."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"example",children:'const stringExpr = ce.box([\n  "String", \n  "Hello", \n  ["Annotated", "world", {dict: {"color": "blue"}}]\n]);\nconsole.info(stringExpr.latex);\n// \u2794 "\\text{Hello $\\mathrm{Annotated}(\\text{world}, {color: "blue"})$}"\n\nconst textExpr = ce.box([\n  "Text", \n  "Hello", \n  ["Annotated", "world", {dict: {"color": "blue"}}]\n]);\nconsole.info(textExpr.latex);\n// \u2794 "\\text{Hello \\textcolor{blue}{world}}"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)("nav",{className:"hidden",children:(0,i.jsx)(n.h3,{id:"string",children:"String"})}),"\n",(0,i.jsxs)(r,{name:"String",children:[(0,i.jsx)(c,{name:"String",returns:"string",children:"any*"}),(0,i.jsx)(n.p,{children:"A string created by joining its arguments. The arguments are converted to\ntheir default string representation."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["String", "Hello", ", ", "\ud83c\udf0d", "!"]\n// \u2794 "Hello, \ud83c\udf0d!" \n\n["String", 42, " is the answer"]\n// \u2794 "42 is the answer"  \n'})})]}),"\n",(0,i.jsx)("nav",{className:"hidden",children:(0,i.jsx)(n.h3,{id:"stringfrom",children:"StringFrom"})}),"\n",(0,i.jsxs)(r,{name:"StringFrom",children:[(0,i.jsxs)(c,{name:"StringFrom",returns:"string",children:["any, ",(0,i.jsx)(n.em,{children:"format"}),":string","?"]}),(0,i.jsxs)(n.p,{children:["Convert the argument to a string, using the specified ",(0,i.jsx)(n.em,{children:"format"}),"."]}),(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:(0,i.jsx)(n.em,{children:"format"})}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"utf-8"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"The argument is a list of UTF-8 code points"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"utf-16"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"The argument is a list of UTF-16 code points"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"unicode-scalars"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"The argument is a list of Unicode scalars (same as UTF-32) or a single Unicode scalar"})]})]})]}),(0,i.jsxs)(n.p,{children:["If no ",(0,i.jsx)(n.em,{children:"format"})," is specified, the default is ",(0,i.jsx)(n.code,{children:"unicode-scalars"}),"."]}),(0,i.jsx)(n.p,{children:"For example:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["StringFrom", ["List" 240, 159, 148, 159], {str: "utf-8"}]\n// \u2794 "Hello"\n\n["StringFrom", ["List", 55357, 56607], {str: "utf-16"}]\n// \u2794 "\\u0048\\u0065\\u006c\\u006c\\u006f"\n\n["StringFrom", 128287]\n// \u2794 "\ud83d\udd1f"\n\n["StringFrom", ["List", 127467, 127479]]\n// \u2794 "\ud83c\uddeb\ud83c\uddf7"\n'})})]}),"\n",(0,i.jsx)("nav",{className:"hidden",children:(0,i.jsx)(n.h3,{id:"utf8",children:"Utf8"})}),"\n",(0,i.jsxs)(r,{name:"Utf8",children:[(0,i.jsx)(c,{name:"Utf8",returns:"list<integer>",children:"string"}),(0,i.jsxs)(n.p,{children:["Return a list of UTF-8 code points for the given ",(0,i.jsx)(n.em,{children:"string"}),"."]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," The values returned are UTF-8 bytes, not Unicode scalar values."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Utf8", {str: "Hello"}]\n// \u2794 ["List", 72, 101, 108, 108, 111]  \n\n["Utf8", {str: "\ud83d\udc69\u200d\ud83c\udf93"}]\n// \u2794 ["List", 240, 159, 145, 169, 226, 128, 141, 240, 159, 142, 147]\n'})}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To create a string from UTF-8 code points"}),", use the ",(0,i.jsx)(n.code,{children:'["StringFrom", _list_, "utf-8"]'})," function."]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"See also"}),": ",(0,i.jsx)(n.a,{href:"#utf16",children:(0,i.jsx)(n.code,{children:"Utf16"})}),", ",(0,i.jsx)(n.a,{href:"#unicodescalars",children:(0,i.jsx)(n.code,{children:"UnicodeScalars"})})," and ",(0,i.jsx)(n.a,{href:"#graphemeclusters",children:(0,i.jsx)(n.code,{children:"GraphemeClusters"})}),"."]})]}),"\n",(0,i.jsx)("nav",{className:"hidden",children:(0,i.jsx)(n.h3,{id:"utf16",children:"Utf16"})}),"\n",(0,i.jsxs)(r,{name:"Utf16",children:[(0,i.jsx)(c,{name:"Utf16",returns:"list<integer>",children:"string"}),(0,i.jsxs)(n.p,{children:["Return a list of UTF-16 code points for the given ",(0,i.jsx)(n.em,{children:"string"}),"."]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," The values returned are UTF-16 code units, not Unicode scalar values."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Utf16", {str: "Hello"}]\n// \u2794 ["List", 72, 101, 108, 108, 111]  \n\n["Utf16", {str: "\ud83d\udc69\u200d\ud83c\udf93"}]\n// \u2794 ["List", 55357, 56489, 8205, 55356, 57235]\n'})}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To create a string from UTF-16 code units"}),", use the ",(0,i.jsx)(n.code,{children:'["StringFrom", _list_, "utf-16"]'})," function."]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"See also"}),": ",(0,i.jsx)(n.a,{href:"#utf8",children:(0,i.jsx)(n.code,{children:"Utf8"})}),", ",(0,i.jsx)(n.a,{href:"#unicodescalars",children:(0,i.jsx)(n.code,{children:"UnicodeScalars"})})," and ",(0,i.jsx)(n.a,{href:"#graphemeclusters",children:(0,i.jsx)(n.code,{children:"GraphemeClusters"})}),"."]})]}),"\n",(0,i.jsx)("nav",{className:"hidden",children:(0,i.jsx)(n.h3,{id:"unicodescalars",children:"UnicodeScalars"})}),"\n",(0,i.jsxs)(r,{name:"UnicodeScalars",children:[(0,i.jsx)(c,{name:"UnicodeScalars",returns:"list<integer>",children:"string"}),(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"Unicode scalar"})," is any valid Unicode code point, represented as a number\nbetween ",(0,i.jsx)(n.code,{children:"U+0000"})," and ",(0,i.jsx)(n.code,{children:"U+10FFFF"}),", excluding the surrogate range\n(",(0,i.jsx)(n.code,{children:"U+D800"})," to ",(0,i.jsx)(n.code,{children:"U+DFFF"}),"). In other words, Unicode scalars correspond exactly to\nUTF-32 code units."]}),(0,i.jsxs)(n.p,{children:["This function returns the sequence of Unicode scalars (code points) that make\nup the string. Note that some characters perceived as a single visual unit\n(grapheme clusters) may consist of multiple scalars. For example, the emoji\n",(0,i.jsx)("span",{style:{fontSize:"1.2em"},children:"\ud83d\udc69\u200d\ud83d\ude80"})," is a single grapheme but is\ncomposed of several scalars."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["UnicodeScalars", {str: "Hello"}]\n// \u2794 [72, 101, 108, 108, 111]  \n\n["UnicodeScalars", {str: "\ud83d\udc69\u200d\ud83c\udf93"}]\n// \u2794 [128105, 8205, 127891]\n'})}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To create a string from Unicode scalars"}),", use the ",(0,i.jsx)(n.code,{children:'["StringFrom", _list_, "unicode-scalars"]'})," function."]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"See also"}),": ",(0,i.jsx)(n.a,{href:"#utf8",children:(0,i.jsx)(n.code,{children:"Utf8"})}),", ",(0,i.jsx)(n.a,{href:"#utf16",children:(0,i.jsx)(n.code,{children:"Utf16"})}),", and ",(0,i.jsx)(n.a,{href:"#graphemeclusters",children:(0,i.jsx)(n.code,{children:"GraphemeClusters"})}),"."]})]}),"\n",(0,i.jsx)("nav",{className:"hidden",children:(0,i.jsx)(n.h3,{id:"graphemeclusters",children:"GraphemeClusters"})}),"\n",(0,i.jsxs)(r,{name:"GraphemeClusters",children:[(0,i.jsx)(c,{name:"GraphemeClusters",returns:"list<string>",children:"string"}),(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"grapheme cluster"})," is the smallest unit of text that a reader perceives\nas a single character. It may consist of one or more ",(0,i.jsx)(n.strong,{children:"Unicode scalars"}),"\n(code points)."]}),(0,i.jsxs)(n.p,{children:["For example, the character ",(0,i.jsx)(n.strong,{children:"\xe9"})," can be a single scalar (",(0,i.jsx)(n.code,{children:"U+00E9"}),") or a\nsequence of scalars (",(0,i.jsx)(n.strong,{children:"e"})," ",(0,i.jsx)(n.code,{children:"U+0065"})," + ",(0,i.jsx)(n.strong,{children:"combining acute"})," ",(0,i.jsx)(n.code,{children:"U+0301"}),"),\nbut both form a single grapheme cluster."]}),(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.strong,{children:"NFC"})," (Normalization Form C) refers to the precomposed form of characters, while ",(0,i.jsx)(n.strong,{children:"NFD"})," (Normalization Form D) refers to the decomposed form where combining marks are used."]}),(0,i.jsxs)(n.p,{children:["Similarly, complex emojis (",(0,i.jsx)("span",{style:{fontSize:"1.2rem"},children:"\ud83d\udc69\u200d\ud83d\ude80"}),", ",(0,i.jsx)("span",{style:{fontSize:"1.2rem"},children:"\ud83c\uddeb\ud83c\uddf7"}),")\nare grapheme clusters composed of multiple scalars."]}),(0,i.jsxs)(n.p,{children:["The exact definition of grapheme clusters is determined by the Unicode Standard\n(",(0,i.jsx)(n.a,{href:"https://unicode.org/reports/tr29/",children:"UAX #29"}),") and may evolve over time as new\ncharacters, scripts, or emoji sequences are introduced. In contrast, Unicode\nscalars and their UTF-8, UTF-16, or UTF-32 encodings are fixed and stable across Unicode versions."]}),(0,i.jsx)(n.p,{children:"The table below illustrates the difference between grapheme clusters and Unicode scalars:"}),(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"String"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Grapheme Clusters"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Unicode Scalars (Code Points)"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)("span",{style:{fontSize:"1.3rem"},children:(0,i.jsx)(n.code,{children:"\xe9"})})," (NFC)"]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)("span",{style:{fontSize:"1.3rem"},children:(0,i.jsx)(n.code,{children:'["\xe9"]'})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"[233]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)("span",{style:{fontSize:"1.3rem"},children:(0,i.jsx)(n.code,{children:"e\u0301"})})," (NFD)"]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)("span",{style:{fontSize:"1.3rem"},children:(0,i.jsx)(n.code,{children:'["\xe9"]'})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"[101, 769]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)("span",{style:{fontSize:"1.3rem"},children:(0,i.jsx)(n.code,{children:"\ud83d\udc69\u200d\ud83c\udf93"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)("span",{style:{fontSize:"1.3rem"},children:(0,i.jsx)(n.code,{children:'["\ud83d\udc69\u200d\ud83c\udf93"]'})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"[128105, 8205, 127891]"})})]})]})]}),(0,i.jsx)(n.p,{children:"This function splits a string into grapheme clusters:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["GraphemeClusters", "Hello"]\n// \u2794 ["H", "e", "l", "l", "o"]\n\n["GraphemeClusters", "\ud83d\udc69\u200d\ud83c\udf93"]\n// \u2794 ["\ud83d\udc69\u200d\ud83c\udf93"]\n\n["UnicodeScalars", "\ud83d\udc69\u200d\ud83c\udf93"]\n// \u2794 [128105, 8205, 127891]\n'})}),(0,i.jsxs)(n.p,{children:["For more details on how grapheme cluster boundaries are determined,\nsee ",(0,i.jsx)(n.a,{href:"https://unicode.org/reports/tr29/",children:"Unicode\xae Standard Annex #29"}),"."]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"See also"}),": ",(0,i.jsx)(n.a,{href:"#utf8",children:(0,i.jsx)(n.code,{children:"Utf8"})}),", ",(0,i.jsx)(n.a,{href:"#utf16",children:(0,i.jsx)(n.code,{children:"Utf16"})}),", and ",(0,i.jsx)(n.a,{href:"#unicodescalars",children:(0,i.jsx)(n.code,{children:"UnicodeScalars"})}),"."]})]}),"\n",(0,i.jsx)("nav",{className:"hidden",children:(0,i.jsx)(n.h3,{id:"baseform",children:"BaseForm"})}),"\n",(0,i.jsxs)(r,{name:"BaseForm",children:[(0,i.jsxs)(c,{name:"BaseForm",returns:"string",children:[(0,i.jsx)(n.em,{children:"value"}),":integer"]}),(0,i.jsxs)(c,{name:"BaseForm",returns:"string",children:[(0,i.jsx)(n.em,{children:"value"}),":integer",", ",(0,i.jsx)(n.em,{children:"base"}),":integer"]}),(0,i.jsxs)(n.p,{children:["Format an ",(0,i.jsx)(n.em,{children:"integer"})," in a specific ",(0,i.jsx)(n.em,{children:"base"}),", such as hexadecimal or binary."]}),(0,i.jsxs)(n.p,{children:["If no ",(0,i.jsx)(n.em,{children:"base"})," is specified, use base-10."]}),(0,i.jsxs)(n.p,{children:["The sign of ",(0,i.jsx)(n.em,{children:"integer"})," is ignored."]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"value"})," should be an integer."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"base"})," should be an integer from 2 to 36."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Latex", ["BaseForm", 42, 16]]\n\n// \u2794 (\\text(2a))_{16}\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cortex",children:"Latex(BaseForm(42, 16))\n// \u2794 (\\text(2a))_{16}\nString(BaseForm(42, 16))\n// \u2794 \"'0x2a'\"\n"})})]}),"\n",(0,i.jsx)("nav",{className:"hidden",children:(0,i.jsx)(n.h3,{id:"delimiter",children:"Delimiter"})}),"\n",(0,i.jsxs)(r,{name:"Delimiter",children:[(0,i.jsx)(c,{name:"Delimiter",children:(0,i.jsx)(n.em,{children:"expr"})}),(0,i.jsxs)(c,{name:"Delimiter",children:[(0,i.jsx)(n.em,{children:"expr"}),", ",(0,i.jsx)(n.em,{children:"delim"})]}),(0,i.jsx)(n.p,{children:"Visually group expressions with an open delimiter, a close delimiter\nand separators between elements of the expression."}),(0,i.jsxs)(n.p,{children:["When serializing to LaTeX, render ",(0,i.jsx)(n.em,{children:"expr"})," wrapped in delimiters."]}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Delimiter"})," function is ",(0,i.jsx)(n.strong,{children:"inert"})," and the value of a ",(0,i.jsx)(n.code,{children:'["Delimiter", _expr_]'})," expression is ",(0,i.jsx)(n.code,{children:"expr"}),"."]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"expr"})," is a function expression, usually a ",(0,i.jsx)(n.code,{children:'["Sequence"]'}),". It should\nnot be a symbol or a number."]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"delim"})," is an optional string:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"when it is a single character it is a separator"}),"\n",(0,i.jsx)(n.li,{children:"when it is two characters, the first is the opening delimiter and the second is the closing delimiter"}),"\n",(0,i.jsx)(n.li,{children:"when it is three characters, the first is the opening delimiter, the second is the separator, and the third is the closing delimiter"}),"\n"]}),(0,i.jsx)(n.p,{children:"The delimiters are rendered to LaTeX."}),(0,i.jsxs)(n.p,{children:["The open and close delimiters are a single character, one of: ",(0,i.jsx)(n.code,{children:'()[]{}<>|\u2016\u2308\u2309\u230a\u230b\u231c\u231d\u231e\u231f\u23b0\u23b1"'}),". The open and close delimiters do not have to match.\nFor example, ",(0,i.jsx)(n.code,{children:"\"')]'\""})," is a valid delimiter."]}),(0,i.jsxs)(n.p,{children:["If an open or close delimiter is ",(0,i.jsx)(n.code,{children:"."}),", it is ignored."]}),(0,i.jsxs)(n.p,{children:["The separator delimiter is also a single character, one of ",(0,i.jsx)(n.code,{children:",;.&:|-"})," or ",(0,i.jsx)(n.code,{children:"U+00B7"})," (middle dot), ",(0,i.jsx)(n.code,{children:"U+2022"})," (bullet) or ",(0,i.jsx)(n.code,{children:"U+2026"})," (ellipsis)."]}),(0,i.jsxs)(n.p,{children:["If no ",(0,i.jsx)(n.em,{children:"delim"})," is provided, a default delimiter is used based on\nthe type of ",(0,i.jsx)(n.em,{children:"expr"}),":"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'["Sequence"]'})," -> ",(0,i.jsx)(n.code,{children:"(,)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'["Tuple"]'}),", ",(0,i.jsx)(n.code,{children:'["Single"]'}),", ",(0,i.jsx)(n.code,{children:'["Pair"]'}),", ",(0,i.jsx)(n.code,{children:'["Triple"]'})," -> ",(0,i.jsx)(n.code,{children:"(,)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'["List"]'})," -> ",(0,i.jsx)(n.code,{children:"[,]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'["Set"]'})," -> ",(0,i.jsx)(n.code,{children:"{,}"})]}),"\n"]})]}),"\n",(0,i.jsx)("nav",{className:"hidden",children:(0,i.jsx)(n.h3,{id:"spacing",children:"Spacing"})}),"\n",(0,i.jsxs)(r,{name:"Spacing",children:[(0,i.jsx)(c,{name:"Spacing",children:(0,i.jsx)(n.em,{children:"width"})}),(0,i.jsxs)(n.p,{children:["When serializing to LaTeX,  ",(0,i.jsx)(n.code,{children:"width"}),"is the dimension of the spacing, in 1/18 em."]}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Spacing"})," function is ",(0,i.jsx)(n.strong,{children:"inert"})," and the value of a ",(0,i.jsx)(n.code,{children:'["Spacing", _expr_]'})," expression is ",(0,i.jsx)(n.code,{children:"expr"}),"."]})]}),"\n",(0,i.jsx)("nav",{className:"hidden",children:(0,i.jsx)(n.h3,{id:"annotated",children:"Annotated"})}),"\n",(0,i.jsxs)(r,{name:"Annotated",children:[(0,i.jsxs)(c,{name:"Annotated",returns:"expression",children:[(0,i.jsx)(n.em,{children:"expr"}),":expression",", dictionary"]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Annotated(expr, attributes)"})," is an expression that behaves exactly like ",(0,i.jsx)(n.code,{children:"expr"}),",\nbut carries ",(0,i.jsx)(n.strong,{children:"visual or semantic metadata"})," as an attribute dictionary."]}),(0,i.jsx)(n.p,{children:"The attributes have no effect on evaluation. This function is inert \u2014 it\nevaluates to its first argument."}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"attributes"})," dictionary may include:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Visual style hints (e.g. ",(0,i.jsx)(n.code,{children:'weight: "bold"'}),", ",(0,i.jsx)(n.code,{children:'color: "blue"'}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Semantic metadata (e.g. ",(0,i.jsx)(n.code,{children:"tooltip"}),", ",(0,i.jsx)(n.code,{children:"language"}),", ",(0,i.jsx)(n.code,{children:"link"}),")"]}),"\n"]}),(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"Annotated"})," when you want to attach presentational or semantic\ninformation to an expression ",(0,i.jsx)(n.strong,{children:"without affecting its evaluation or identity"}),".\nThis is useful for rendering, tooltips, highlighting, etc."]}),(0,i.jsx)(n.p,{children:"The following keys are applicable to math expressions:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mathStyle"})," = ",(0,i.jsx)(n.code,{children:'"compact"'})," or ",(0,i.jsx)(n.code,{children:'"normal"'}),". The ",(0,i.jsx)(n.code,{children:'"compact"'})," style is used for inline math expressions, while the ",(0,i.jsx)(n.code,{children:'"normal"'})," style is used for display math expressions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"scriptLevel"})," = ",(0,i.jsx)(n.code,{children:"0"}),", ",(0,i.jsx)(n.code,{children:"1"}),", or ",(0,i.jsx)(n.code,{children:"-1"}),", ",(0,i.jsx)(n.code,{children:"+1"}),". The script level is used to\ndetermine the size of the expression in relation to the surrounding text.\nA script level of ",(0,i.jsx)(n.code,{children:"0"})," is normal size, ",(0,i.jsx)(n.code,{children:"1"})," is smaller, and ",(0,i.jsx)(n.code,{children:"2"})," is even smaller."]}),"\n"]}),(0,i.jsx)(n.p,{children:"The following keys are applicable to text content:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"weight"})," a string, one of ",(0,i.jsx)(n.code,{children:'"normal"'}),", ",(0,i.jsx)(n.code,{children:'"bold"'}),", ",(0,i.jsx)(n.code,{children:'"bolder"'}),", ",(0,i.jsx)(n.code,{children:'"light"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"style"})," a string, one of ",(0,i.jsx)(n.code,{children:'"normal"'}),", ",(0,i.jsx)(n.code,{children:'"italic"'}),", ",(0,i.jsx)(n.code,{children:'"oblique"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"language"})," a string indicating the language of the expression, e.g. ",(0,i.jsx)(n.code,{children:'"en"'})," (English), ",(0,i.jsx)(n.code,{children:'"fr"'})," (French), ",(0,i.jsx)(n.code,{children:'"es"'})," (Spanish)"]}),"\n"]}),(0,i.jsx)(n.p,{children:"The following keys are applicable to both math expressions and text content:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"color"})," a color name or hex code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"backgroundColor"})," a color name or hex code for the background color"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tooltip"})," a string to be displayed as a tooltip when the expression is hovered over"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"link"})," a URL to be followed when the expression is clicked"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cssClass"})," a string indicating the CSS class to be applied to the expression"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cssId"})," a string indicating the CSS id of the expression"]}),"\n"]}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Annotated"})," function is ",(0,i.jsx)(n.strong,{children:"inert"})," and the value of a ",(0,i.jsx)(n.code,{children:'["Annotated", expr]'})," expression is ",(0,i.jsx)(n.code,{children:"expr"}),"."]})]}),"\n",(0,i.jsx)(l,{path:"/compute-engine/reference/linear-algebra/#formatting",children:(0,i.jsxs)(n.p,{children:["Read more about formatting of ",(0,i.jsx)(n.strong,{children:"matrixes"})," and ",(0,i.jsx)(n.strong,{children:"vectors"})]})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var r=s(6540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);