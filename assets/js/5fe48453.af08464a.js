"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[9877],{592:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"mathfield/react","title":"Using A Mathfield with React","description":"Theory of Operations","source":"@site/docs/mathfield/10-react.md","sourceDirName":"mathfield","slug":"/mathfield/guides/react/","permalink":"/mathfield/guides/react/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1737867004000,"sidebarPosition":10,"frontMatter":{"date":"Last Modified","title":"Using A Mathfield with React","slug":"/mathfield/guides/react/"},"sidebar":"docSidebar","previous":{"title":"Add A Mathfield to Your Project","permalink":"/mathfield/guides/integration/"},"next":{"title":"Using Svelte","permalink":"/mathfield/guides/svelte/"}}');var a=n(4848),s=n(8453);const r={date:"Last Modified",title:"Using A Mathfield with React",slug:"/mathfield/guides/react/"},l=void 0,o={},d=[{value:"Theory of Operations",id:"theory-of-operations",level:2},{value:"Using A Mathfield with React and TypeScript",id:"using-a-mathfield-with-react-and-typescript",level:2},{value:"Using LaTeX strings with JSX",id:"using-latex-strings-with-jsx",level:2},{value:"Customization",id:"customization",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Icon:n,ReadMore:i}=t;return n||u("Icon",!0),i||u("ReadMore",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"theory-of-operations",children:"Theory of Operations"}),"\n",(0,a.jsx)(t.p,{children:"A mathfield behaves as a regular DOM element:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["define mathfields using the ",(0,a.jsx)(t.code,{children:"<math-field>"})," tag in JSX"]}),"\n",(0,a.jsxs)(t.li,{children:["get a reference to the corresponding DOM element with the ",(0,a.jsx)(t.code,{children:"useRef()"})," hook"]}),"\n",(0,a.jsxs)(t.li,{children:["customize the mathfield on mount with ",(0,a.jsx)(t.code,{children:"useEffect(..., [])"})," hook"]}),"\n"]}),"\n",(0,a.jsx)(t.h1,{id:"using-a-mathfield-with-react",children:"Using A Mathfield with React"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"To use a mathfield with React"}),", import the MathLive library and use a ",(0,a.jsx)(t.code,{children:"<math-field>"})," tag."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:'import "//unpkg.com/mathlive";\nimport { useState } from "react";\n\nexport default function App() {\n  const [value, setValue] = useState("");\n\n  return (\n    <div>\n      <math-field \n        onInput={evt => setValue(evt.target.value)}\n      >\n        {value}\n      </math-field>\n      <p>Value: {value}</p>\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,a.jsx)(t.h2,{id:"using-a-mathfield-with-react-and-typescript",children:"Using A Mathfield with React and TypeScript"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"To use a mathfield with React and TypeScript"}),", you need to add TypeScript\ndefinitions for mathfield elements."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:'declare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      \'math-field\': React.DetailedHTMLProps<React.HTMLAttributes<MathfieldElement>, MathfieldElement>;\n    }\n  }\n}\n\n\nimport "//unpkg.com/mathlive";\nimport { useState } from "react";\n\nexport default function App({children}) {\n  const [value, setValue] = useState<string>("");\n\n  return (\n    <div>\n      <math-field \n        onInput={\n          (evt: React.ChangeEvent<HTMLElement>) => \n            setValue(evt.target.value)\n        }\n      >\n        {children}\n      </math-field>\n      <p>Value: {value}</p>\n    </div>\n  );\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"using-latex-strings-with-jsx",children:"Using LaTeX strings with JSX"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"To specify the initial value of the mathfield"})," provide a LaTeX\nstring as a child of the ",(0,a.jsx)(t.code,{children:"<math-field>"})," tag."]}),"\n",(0,a.jsx)(t.p,{children:"However, since both JSX and LaTeX use curly braces, you need to escape the\nLaTeX braces. The easiest way to do this is to use a backtick string.\nThe content of the backtick string will be interpreted as a JavaScript string,\nwhich means that the backslashes will need to be escaped as well."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"<math-field>{`\n  \\\\frac{1}{2}\n`}</math-field>\n"})}),"\n",(0,a.jsx)(t.h2,{id:"customization",children:"Customization"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"To customize a mathfield"}),", use a ",(0,a.jsx)(t.code,{children:"useRef"})," callback."]}),"\n",(0,a.jsxs)(t.p,{children:["With the  ",(0,a.jsx)(t.code,{children:"current"})," property of the ref, you can access and manipulate all the\nproperties and methods that are specific to the mathfield (",(0,a.jsx)(t.code,{children:"value"}),", ",(0,a.jsx)(t.code,{children:"selection"}),", ",(0,a.jsx)(t.code,{children:"insert()"}),",\netc...). See ",(0,a.jsx)(t.a,{href:"/docs/mathfield/#(MathfieldElement%3Aclass)",children:"MathfieldElement"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:'import "./App.css";\nimport "//unpkg.com/mathlive";\nimport { useState, useEffect, useRef } from "react";\n\nexport default function App({children}) {\n  const [value, setValue] = useState("");\n\n  return (\n    <div className="App">\n      <math-field \n        ref={(el) => {\n          if (el === null) {\n            // When el is null, the mathfield is being destroyed\n            // You may want to unsubscribe from events here\n            return;\n          }\n          // Customize the mathfield when it is created\n          mf.current.mathVirtualKeyboardPolicy = "manual";\n          mf.current.addEventListener("focusin", (evt) => \n            window.mathVirtualKeyboard.show()\n          );\n          mf.current.addEventListener("focusout", (evt) => \n            window.mathVirtualKeyboard.hide()\n        }} \n        onInput={evt => setValue(evt.target.value)}\n      >\n        {children}\n      </math-field>\n      <p>Value: {value}</p>\n    </div>\n  );\n}\n'})}),"\n",(0,a.jsx)(i,{path:"https://github.com/arnog/react-mathlive",children:(0,a.jsxs)(t.p,{children:["A ready-to-run example project is available on ",(0,a.jsx)(t.strong,{children:"GitHub"}),(0,a.jsx)(n,{name:"chevron-right-bold"})]})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(6540);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);