"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[4790],{7763:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"compute-engine/reference-functions","title":"Functions","description":"Functions are first-class values in the Compute Engine. This means that","source":"@site/docs/compute-engine/87-reference-functions.md","sourceDirName":"compute-engine","slug":"/compute-engine/reference/functions/","permalink":"/compute-engine/reference/functions/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1746803465000,"sidebarPosition":87,"frontMatter":{"title":"Functions","slug":"/compute-engine/reference/functions/"},"sidebar":"docSidebar","previous":{"title":"Core","permalink":"/compute-engine/reference/core/"},"next":{"title":"Linear Algebra","permalink":"/compute-engine/reference/linear-algebra/"}}');var i=t(4848),r=t(8453);const l={title:"Functions",slug:"/compute-engine/reference/functions/"},o=void 0,a={},c=[{value:"Function Literals",id:"function-literals",level:2},{value:"Shorthand Function Literals",id:"shorthand-function-literals",level:2},{value:"Anonymous Functions",id:"anonymous-functions",level:2},{value:"Evaluating a Function Literal",id:"evaluating-a-function-literal",level:2},{value:"Closures",id:"closures",level:2},{value:"Operating on Functions",id:"operating-on-functions",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components},{FunctionDefinition:t,Intro:s,Latex:l,ReadMore:o,Signature:a}=n;return t||u("FunctionDefinition",!0),s||u("Intro",!0),l||u("Latex",!0),o||u("ReadMore",!0),a||u("Signature",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s,{children:(0,i.jsx)(n.p,{children:"Functions are first-class values in the Compute Engine. This means that\nfunctions can be passed as arguments to other functions, returned from\nfunctions, and assigned to variables."})}),"\n",(0,i.jsx)(n.p,{children:"The standard library can be extended with your own functions."}),"\n",(0,i.jsx)(o,{path:"/compute-engine/guides/augmenting/",children:(0,i.jsx)(n.p,{children:"Read more about adding new definitions to the Compute Engine."})}),"\n",(0,i.jsx)("div",{className:"symbols-table",style:{"--first-col-width":"23ch"},children:(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Term"})}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Definition"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Function Expression"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["An expression representing a ",(0,i.jsx)(n.strong,{children:"function application"})," where a function (or ",(0,i.jsx)(n.strong,{children:"operator"}),") is evaluated with arguments (the arguments are ",(0,i.jsx)(n.strong,{children:"applied to"})," the function). For example ",(0,i.jsx)(n.code,{children:'["Add", 1, 2]'})," applies the arguments ",(0,i.jsx)(n.code,{children:"1"})," and ",(0,i.jsx)(n.code,{children:"2"})," to the operator ",(0,i.jsx)(n.code,{children:"Add"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Function Signature"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A type describing the function's inputs and outputs, e.g. ",(0,i.jsx)(n.code,{children:"(real, integer) -> boolean"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Function Literal"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A first-class function value, defined using a construct like ",(0,i.jsx)(n.code,{children:'["Function", body, params...]'}),", which may or may not capture variables from its lexical scope."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Shorthand Function Literal"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A compact way to write a function literal using placeholders (e.g. ",(0,i.jsx)(n.code,{children:"_"})," or ",(0,i.jsx)(n.code,{children:"_2"}),") instead of explicitly listing parameters, e.g. ",(0,i.jsx)(n.code,{children:'["Add", "_", 1]'})," desugared to ",(0,i.jsx)(n.code,{children:'["Function", ["Add", "_", 1], "_"]'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Closure"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A function literal that ",(0,i.jsx)(n.strong,{children:"captures"})," one or more free variables from its defining lexical scope, preserving their values at the time of definition. The capture happens by simply referencing the variables in the function body."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Anonymous Function"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"A function that is not bound to a symbol, often used as an argument to other functions."})]})]})]})}),"\n",(0,i.jsx)(n.h2,{id:"function-literals",children:"Function Literals"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"function literal"})," is a first-class function value, defined using a\n",(0,i.jsx)(n.code,{children:'["Function"]'})," expression. It can be passed as an argument to other functions,\nreturned from a function, or assigned to a variable."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:'["Function"]'})," expression takes a body and a list of parameters."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Sum", ["Function", ["Multiply", "x", 2], "x"]]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["To specify a function literal with LaTeX use the ",(0,i.jsx)(n.code,{children:"\\mapsto"})," command:"]}),"\n",(0,i.jsx)(l,{value:"x \\mapsto 2x"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Function", ["Multiply", "x", 2], "x"]\n'})}),"\n",(0,i.jsx)(l,{value:" (x, y) \\mapsto 2x + y"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Function", ["Add", ["Multiply", "x", 2], "y"], "x", "y"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"The examples in this section define functions as a simple expression, but\nfunction literals can include more complex control structures, including blocks,\nlocal variables, loops and conditionals."}),"\n",(0,i.jsxs)(n.p,{children:['For example, here\'s a simple "clamp" function, using a ',(0,i.jsx)(n.code,{children:'["Block"]'})," expression."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Function",\n  ["Block",\n    ["Assign", "x", ["Max", "x", "min"]],\n    ["Min", "x", "max"]\n  ],\n  "x", "min", "max"\n]\n'})}),"\n",(0,i.jsxs)(o,{path:"/compute-engine/reference/control-structures/",children:["Learn more about ",(0,i.jsx)(n.strong,{children:"control structures"}),". "]}),"\n",(0,i.jsx)(n.h2,{id:"shorthand-function-literals",children:"Shorthand Function Literals"}),"\n",(0,i.jsxs)(n.p,{children:["A shorthand function literal is a compact way to write a function literal using\nwildcards (e.g. ",(0,i.jsx)(n.code,{children:"_"})," ,",(0,i.jsx)(n.code,{children:"_2"}),") instead of explicitly listing parameters."]}),"\n",(0,i.jsx)(n.p,{children:"The shorthand function literal is desugared to a function literal."}),"\n",(0,i.jsxs)(n.p,{children:["For example the shorthand function literal ",(0,i.jsx)(n.code,{children:'["Multiply", "_", 2]'})," is desugared to ",(0,i.jsx)(n.code,{children:'["Function", ["Multiply", "_", 2], "_"]'}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If more than one parameter is used, the wildcards are ",(0,i.jsx)(n.code,{children:"_"}),", ",(0,i.jsx)(n.code,{children:"_2"}),", ",(0,i.jsx)(n.code,{children:"_3"}),", etc."]}),"\n",(0,i.jsxs)(n.p,{children:["Wildcard arguments can also be used in LaTeX, but the wildcard arguments\nmust be wrapped with an ",(0,i.jsx)(n.code,{children:"\\operatorname"})," command except for ",(0,i.jsx)(n.code,{children:"\\_"}),"."]}),"\n",(0,i.jsx)(l,{value:" () \\mapsto \\_ + \\operatorname{\\_2}"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Add", "_", "_2"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"A symbol which is the name of an operator is also a valid shorthand for a function literal."}),"\n",(0,i.jsxs)(n.p,{children:["This expression will apply the ",(0,i.jsx)(n.code,{children:"Sin"})," function to the elements of ",(0,i.jsx)(n.code,{children:"xs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Map", "xs", "Sin"]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["It is equivalent to ",(0,i.jsx)(n.code,{children:'["Map", "xs", ["Sin", "_"]]'})," which is desugared to\n",(0,i.jsx)(n.code,{children:'["Map", "xs", ["Function", ["Sin", "_"], "_"]]'}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"anonymous-functions",children:"Anonymous Functions"}),"\n",(0,i.jsxs)(n.p,{children:["A function that is not bound to a symbol is called an ",(0,i.jsx)(n.strong,{children:"anonymous\nfunction"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Anonymous functions are frequently used as arguments to other functions."}),"\n",(0,i.jsxs)(n.p,{children:["In the example below, the second argument of the ",(0,i.jsx)(n.code,{children:"Map"})," function is an\nanonymous function expressed as a function literal that multiplies its argument by ",(0,i.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Map", "xs", ["Function", ["Multiply", "x", 2], "x"]]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The same function can be expressed using a shorthand function literal, which\nuses ",(0,i.jsx)(n.code,{children:"_"})," as a wildcard for the parameter."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Map", "xs", ["Multiply", "_", 2]]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"evaluating-a-function-literal",children:"Evaluating a Function Literal"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To apply a function literal to some arguments"})," use an ",(0,i.jsx)(n.code,{children:'["Apply"]'})," expression."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Apply", ["Function", ["Add", 2, "x"], "x"], 11]\n// \u2794 22\n\n["Apply", ["Add", 2, "_"], 4]\n// \u2794 6\n\n["Apply", "Power", 2, 3]\n// \u2794 8\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The first argument of ",(0,i.jsx)(n.code,{children:"Apply"})," is a function literal. The rest of the arguments are the\narguments that will be applied to the function literal."]}),"\n",(0,i.jsx)(n.h2,{id:"closures",children:"Closures"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"closure"})," is a function literal that ",(0,i.jsx)(n.strong,{children:"captures"})," one or more free variables\nfrom its defining lexical scope, preserving their values at the time of definition.\nThe capture happens by simply referencing the variables in the function body.\nFor example, the following function literal captures the variable ",(0,i.jsx)(n.code,{children:"a"})," from its\nlexical scope:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Function", ["Add", "a", "_"], "_"]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This function literal captures the value of ",(0,i.jsx)(n.code,{children:"a"})," at the time of definition, and\nwhen the function is applied, it will use that value of ",(0,i.jsx)(n.code,{children:"a"})," in the computation."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Block"\n  ["Assign", "f",\n    ["Block",\n      ["Declare", "a", "integer"],\n      ["Assign", "a", 10],\n      ["Function", ["Add", "a", "_"], "_"]\n    ]\n  ]\n  ["Declare", "a", "integer"],\n  ["Assign", "a", 100]\n  ["f", 1]\n]\n// \u2794 1 + 10\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note that the value of ",(0,i.jsx)(n.code,{children:"a"})," is ",(0,i.jsx)(n.code,{children:"3"})," when the function is defined, and it\nis ",(0,i.jsx)(n.code,{children:"10"})," when the function is applied. The function will always use the value of\n",(0,i.jsx)(n.code,{children:"a"})," that was in scope when the function was defined, not the value of ",(0,i.jsx)(n.code,{children:"a"})," at the\ntime the function is applied. In fact, the out ",(0,i.jsx)(n.code,{children:"a"})," is a different variable\nwhich is unrelated to the ",(0,i.jsx)(n.code,{children:"a"})," in the scope of the function, but with the same\nname."]}),"\n",(0,i.jsx)(n.h2,{id:"operating-on-functions",children:"Operating on Functions"}),"\n",(0,i.jsxs)(t,{name:"Function",children:[(0,i.jsx)(a,{name:"Function",children:(0,i.jsx)(n.em,{children:"body"})}),(0,i.jsxs)(a,{name:"Function",children:[(0,i.jsx)(n.em,{children:"body"}),", ",(0,i.jsx)(n.em,{children:"arg-1"}),", ",(0,i.jsx)(n.em,{children:"arg-2"}),", ..."]}),(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.strong,{children:"function literal"})," which can be used as an ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Anonymous_function",children:"anonymous function"}),"."]}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"arg-n"})," arguments are symbols which are the bound variables (parameters) of the\nfunction literal."]}),(0,i.jsx)(n.admonition,{title:"Note",type:"info",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Function"})," operator has the ",(0,i.jsx)(n.code,{children:"lazy"})," flag set to ",(0,i.jsx)(n.code,{children:"true"}),", which means\nthat neither the body nor the parameters are evaluated until the function is\napplied to some arguments."]})}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"body"})," is an expression that is evaluated when the function is\napplied to some arguments."]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To apply some arguments to a function expression"}),", use ",(0,i.jsx)(n.code,{children:'["Apply"]'}),"."]}),(0,i.jsx)(l,{value:" x \\mapsto 2x"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Function", ["Multiply", "x", 2], "x"]\n'})}),(0,i.jsx)(l,{value:" (x, y) \\mapsto 2x + y"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Function", ["Add", ["Multiply", "x", 2], "y"], "x", "y"]\n'})})]}),"\n",(0,i.jsxs)(t,{name:"Assign",children:[(0,i.jsxs)(a,{name:"Assign",children:[(0,i.jsx)(n.em,{children:"symbol"}),", ",(0,i.jsx)(n.em,{children:"fn"})]}),(0,i.jsxs)(n.p,{children:["Assign the function literal ",(0,i.jsx)(n.code,{children:"fn"})," to the symbol ",(0,i.jsx)(n.code,{children:"symbol"}),"."]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Assign"})," is not a ",(0,i.jsx)(n.a,{href:"/compute-engine/guides/expressions#pure-expressions",children:"pure function"}),",\nas it changes the state of the Compute Engine."]}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"fn"})," is a function literal, which can be created using the ",(0,i.jsx)(n.code,{children:'["Function"]'}),"\nexpression or the shorthand function literal."]}),(0,i.jsx)(l,{value:"\\operatorname{double}(x) \\coloneq 2x"}),(0,i.jsx)(l,{value:"\\operatorname{double} \\coloneq x \\mapsto 2x"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Assign", "double", ["Function", ["Multiply", "x", 2], "x"]]\n'})})]}),"\n",(0,i.jsxs)(t,{name:"Apply",children:[(0,i.jsxs)(a,{name:"Apply",children:[(0,i.jsx)(n.em,{children:"function"}),", ",(0,i.jsx)(n.em,{children:"expr-1"}),", ...",(0,i.jsx)(n.em,{children:"expr-n"})]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Apply",children:"Apply"})," a list of arguments to a function.\nThe ",(0,i.jsx)(n.em,{children:"function"})," is a function literal, or a symbol whose value is a function literal."]}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.em,{children:"expr-n"})," arguments are the arguments of the function literal."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Apply", ["Multiply", "_", "_"], 3]\n// \u2794 9\n\n["Apply", ["Function", ["Multiply", "x", "x"], "x"], 3]\n// \u2794 9\n'})}),(0,i.jsxs)(n.p,{children:["With LaTeX, the ",(0,i.jsx)(n.code,{children:"\\lhd"})," and ",(0,i.jsx)(n.code,{children:"\\rhd"})," commands can be used to apply a function to a single\nargument on the left or right respectively."]}),(0,i.jsx)(l,{value:"f\\lhd g \\lhd x"}),(0,i.jsx)(l,{value:"x \\rhd g \\rhd f"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Apply", "f", ["Apply", "g", "x"]]\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);