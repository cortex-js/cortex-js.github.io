"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[7614],{1283:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"mathfield/static","title":"Static Math Formulas","description":"Converting LaTeX to Various Formats","source":"@site/docs/mathfield/20-static.md","sourceDirName":"mathfield","slug":"/mathfield/guides/static/","permalink":"/mathfield/guides/static/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1744999580000,"sidebarPosition":20,"frontMatter":{"date":"Last Modified","title":"Static Math Formulas","slug":"/mathfield/guides/static/"},"sidebar":"docSidebar","previous":{"title":"Speech","permalink":"/mathfield/guides/speech/"},"next":{"title":"Web Component Lifecycle","permalink":"/mathfield/lifecycle/"}}');var r=t(4848),s=t(8453);const i={date:"Last Modified",title:"Static Math Formulas",slug:"/mathfield/guides/static/"},o="Static Math Formulas",l={},c=[{value:"Converting LaTeX to Various Formats",id:"converting-latex-to-various-formats",level:2},{value:"Converting From Various Formats to LaTeX",id:"converting-from-various-formats-to-latex",level:2},{value:"Rendering Static Math Formulas",id:"rendering-static-math-formulas",level:2},{value:"Read-only Mathfield",id:"read-only-mathfield",level:2}];function d(e){const n={a:"a",code:"code","code-playground":"code-playground",div:"div",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},t=n["code-playground"];return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"static-math-formulas",children:"Static Math Formulas"})}),"\n",(0,r.jsx)(n.h2,{id:"converting-latex-to-various-formats",children:"Converting LaTeX to Various Formats"}),"\n",(0,r.jsx)(n.p,{children:"The mathfield library includes some utility functions to convert between\nvarious formats. These utility functions can be used without a mathfield.\nIn fact, they do not require a browser environment at all, and can be used\nin a Node.js environment."}),"\n",(0,r.jsx)(n.p,{children:"They are available as a Service Side Render (SSR) package which can be imported\nas follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import * from 'mathlive/ssr';\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To convert LaTeX to HTML"}),", use the ",(0,r.jsx)(n.a,{href:"/mathfield/api/#q=convertLatexToMarkup",children:(0,r.jsx)(n.code,{children:"convertLatexToMarkup()"})})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { convertLatexToMarkup } from 'mathlive';\nconsole.log(convertLatexToMarkup('x^2 + y^2 = z^2'));\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To convert LaTeX to MathML"}),", use the ",(0,r.jsx)(n.a,{href:"/mathfield/api/#q=latexToMathML",children:(0,r.jsx)(n.code,{children:"latexToMathML()"})})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { convertLatexToMathMl } from 'mathlive';\nconsole.log(convertLatexToMathMl('x^2 + y^2 = z^2'));\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To convert LaTeX to spoken text"}),", use the ",(0,r.jsx)(n.a,{href:"/mathfield/api/#q=convertLatexToSpeakableText",children:(0,r.jsx)(n.code,{children:"convertLatexToSpeakableText()"})})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { convertLatexToSpeakableText } from 'mathlive';\nconsole.log(convertLatexToSpeakableText('x^2 + y^2 = z^2'));\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To convert LaTeX to AsciiMath"}),", use the ",(0,r.jsx)(n.a,{href:"/mathfield/api/#q=convertLatexToAsciiMath",children:(0,r.jsx)(n.code,{children:"convertLatexToAsciiMath()"})})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { convertLatexToAsciiMath } from 'mathlive';\nconsole.log(convertLatexToAsciiMath('x^2 + y^2 = z^2'));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"converting-from-various-formats-to-latex",children:"Converting From Various Formats to LaTeX"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To convert MathJson to LaTeX"}),", use the ",(0,r.jsx)(n.a,{href:"/mathfield/api/#convertmathjsontolatex",children:(0,r.jsx)(n.code,{children:"convertMathJsonToLatex()"})})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { convertMathJsonToLatex } from \'mathlive\';\nconsole.log(convertMathJsonToLatex(["Add", "x", "y"]));\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To convert AsciiMath to LaTeX"}),", use the ",(0,r.jsx)(n.a,{href:"/mathfield/api/#q=convertAsciiMathToLatex",children:(0,r.jsx)(n.code,{children:"convertAsciiMathToLatex()"})})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { asciiMathToLatex } from 'mathlive';\nconsole.log(convertAsciiMathToLatex('x^2 + y^2 = z^2'));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"rendering-static-math-formulas",children:"Rendering Static Math Formulas"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To render math contained in a document as a static (non-editable) formula"}),",\ncall ",(0,r.jsx)(n.a,{href:"/mathfield/api/#q=renderMathInDocument",children:(0,r.jsx)(n.code,{children:"renderMathInDocument()"})})," at the\nend of your document, or in a ",(0,r.jsx)(n.code,{children:"DOMContentLoaded"})," event handler."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<script defer type=\"module\">\n  window.addEventListener('DOMContentLoaded', () => \n    import('https://esm.run/mathlive').then((mathlive) => \n      mathlive.renderMathInDocument()\n    )\n  );\n<\/script>\n"})}),"\n",(0,r.jsx)(n.p,{children:"By default, any LaTeX code in the text element of a DOM element that is\nenclosed with the following delimiters will be rendered as math:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\["}),"...",(0,r.jsx)(n.code,{children:"\\]"})," or ",(0,r.jsx)(n.code,{children:"$$"}),"...",(0,r.jsx)(n.code,{children:"$$"})," -- rendered in Display Style (CSS display block)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\("}),"...",(0,r.jsx)(n.code,{children:"\\)"})," -- rendered in Text Style (CSS display inline)"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<h1>Taxicab Number</h1>\n<p>The second taxicab number \n   is \\\\(1729 = 10^3 + 9^3 = 12^3 + 1^3\\\\)\n</p>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["More complex expressions can be wrapped in a ",(0,r.jsx)(n.code,{children:"<script>"})," tag. One of the\nbenefits of this approach is that the browser will not attempt to display the\ncontent of the ",(0,r.jsx)(n.code,{children:"<script>"})," tag before it is typeset, avoiding an unsightly flash\nof code on screen."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["To render LaTeX code, use ",(0,r.jsx)(n.code,{children:'<script type="math/tex">'})]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["To render MathJSON, use ",(0,r.jsx)(n.code,{children:'<script type="math/json">'})]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To render the formula inline, append"})," ",(0,r.jsx)(n.code,{children:"; mode=text"})," ",(0,r.jsx)(n.strong,{children:"to the type"}),".\nIf no mode is provided, or ",(0,r.jsx)(n.code,{children:"mode=display"}),", the display (block) style is\nused."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<h1>Quadratic roots</h1>\n<script type="math/json"> ["Add", \n    ["Multiply", "a", ["Square", "x"]]], \n    ["Multiply", "b", "x"], \n    "c"\n  ]\n<\/script>\n<script type="math/tex; mode=text">\n  =  a\n  \\left( x - \\frac{-b + \\sqrt {b^2-4ac}}{2a} \\right)\n  \\left( x - \\frac{-b - \\sqrt {b^2-4ac}}{2a} \\right)\n<\/script>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The following DOM elements are ignored for conversion: ",(0,r.jsx)(n.code,{children:"<noscript>"}),",\n",(0,r.jsx)(n.code,{children:"<style>"}),", ",(0,r.jsx)(n.code,{children:"<textarea>"}),", ",(0,r.jsx)(n.code,{children:"<pre>"}),", ",(0,r.jsx)(n.code,{children:"<code>"}),", ",(0,r.jsx)(n.code,{children:"<annotation>"})," and ",(0,r.jsx)(n.code,{children:"<annotation-xml>"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you dynamically generate content, call ",(0,r.jsx)(n.a,{href:"/mathfield/api/#q=renderMathInElement",children:(0,r.jsx)(n.code,{children:"renderMathInElement(element)"})})," to\nrender your element after the page has been loaded. This is a recursive call\nthat will be applied to ",(0,r.jsx)(n.code,{children:"element"})," and all its children."]}),"\n",(0,r.jsxs)(n.p,{children:["To render again elements or a whole document that has already been rendered,\ncall  ",(0,r.jsx)(n.code,{children:"renderMathInElement()"})," and ",(0,r.jsx)(n.code,{children:"renderMathInDocument()"})," again. This is\nuseful when a change in the environment requires the layout to be updated."]}),"\n",(0,r.jsxs)(n.p,{children:["To customize the behavior of the ",(0,r.jsx)(n.code,{children:"renderMathInElement()"})," and ",(0,r.jsx)(n.code,{children:"renderMathInDocument()"}),"\nfunctions pass an optional ",(0,r.jsx)(n.code,{children:"options"})," object literal:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"skipTags"}),": an array of tag names whose content will not be scanned for\ndelimiters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"processScriptType"}),": ",(0,r.jsx)(n.code,{children:"<script>"}),' tags of the indicated type will be processed\nwhile others will be ignored. Default: "math/tex".']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ignoreClass"}),": a string used as a regular expression of class names of\nelements whose content will not be scanned for delimiters (",(0,r.jsx)(n.code,{children:'"tex2jax_ignore"'}),"\nby default)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"processClass"}),": a string used as a regular expression of class names of\nelements whose content ",(0,r.jsx)(n.strong,{children:"will"})," be scanned for delimiters, even if their tag\nname or parent class name would have prevented them from doing so.\n(",(0,r.jsx)(n.code,{children:'"tex2jax_process"'})," by default)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TeX.processEnvironments"}),": if false, math expression that start with ",(0,r.jsx)(n.code,{children:"\\begin{"}),"\nwill not automatically be rendered. (true by default)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TeX.delimiters.inline"})," and ",(0,r.jsx)(n.code,{children:"TeX.delimiters.display"})," arrays of delimiters that\nwill trigger a render of the content in 'textstyle' or 'displaystyle' style,\nrespectively."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"renderMathInElement(document.getElementById('formulas'), {\n  // Elements with a class of \"instruction\" or \"source\"\n  // will be skipped\n  ignoreClass: 'instruction|source',\n  TeX: {\n    delimiters: {\n      // Allow math formulas surrounded by $...$ or \\(...\\)\n      // to be rendered as inline (textstyle) content.\n      inline: [\n        ['$', '$'],\n        ['\\\\(', '\\\\)'],\n      ],\n      display: [],\n    },\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"read-only-mathfield",children:"Read-only Mathfield"}),"\n",(0,r.jsxs)(n.p,{children:["When a math formula is displayed as a static element using\n",(0,r.jsx)(n.code,{children:"renderMathInDocument()"}),", the formula is transformed into some static markup.\nAs a result, only the markup content can be selected, not the underlying\nLaTeX formula. Selection of a portion of the formula may also lead to\nunexpected results."]}),"\n",(0,r.jsx)(n.p,{children:"If preserving the ability to select a formula is important, consider\nusing a read-only mathfield instead."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To create a read-only mathfield"}),", add the ",(0,r.jsx)(n.code,{children:"read-only"})," attribute to a ",(0,r.jsx)(n.code,{children:"<math-field>"}),"\nelement."]}),"\n",(0,r.jsx)(t,{children:(0,r.jsxs)(n.div,{slot:"html",children:["<style>\n","math-field[read-only] {\n","  ","border: none;\n","  ","background-color: transparent;\n","}\n","</style>\n","<p>The solution of the equation is\n",'<math-field read-only style="display:inline-block">\n',"  ","x=\\frac{-b\\pm \\sqrt{b^2-4ac}}{2a}\n","</math-field>\n","</p>\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);