"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[6936],{3600:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"compute-engine/guide-symbols","title":"Symbols","description":"A symbol is an identifier representing a named mathematical object. It","source":"@site/docs/compute-engine/04-guide-symbols.md","sourceDirName":"compute-engine","slug":"/compute-engine/guides/symbols/","permalink":"/compute-engine/guides/symbols/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1737956976000,"sidebarPosition":4,"frontMatter":{"title":"Symbols","slug":"/compute-engine/guides/symbols/","layout":"single","date":"Last Modified","toc":true},"sidebar":"docSidebar","previous":{"title":"Canonical Form","permalink":"/compute-engine/guides/canonical-form/"},"next":{"title":"Custom Functions and Symbols","permalink":"/compute-engine/guides/augmenting/"}}');var t=s(4848),i=s(8453);const a={title:"Symbols",slug:"/compute-engine/guides/symbols/",layout:"single",date:"Last Modified",toc:!0},l=void 0,c={},r=[{value:"Scope",id:"scope",level:2},{value:"Unknowns and Constants",id:"unknowns-and-constants",level:2},{value:"Automatic Declaration",id:"automatic-declaration",level:2},{value:"Forgetting a Symbol",id:"forgetting-a-symbol",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code","code-playground":"code-playground",div:"div",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},s=n["code-playground"],{Icon:o,Intro:a,ReadMore:l}=n;return o||u("Icon",!0),a||u("Intro",!0),l||u("ReadMore",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a,{children:(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"symbol"})," is an identifier representing a named mathematical object. It\nhas a type and may hold a value. A symbol without a value represents a\nmathematical unknown in an expression."]})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"To change the value or type of a symbol"}),", use the ",(0,t.jsx)(n.code,{children:"value"})," and ",(0,t.jsx)(n.code,{children:"type"}),"\nproperties of the symbol."]}),"\n",(0,t.jsx)(n.p,{children:"A symbol does not have to be declared before it can be used. The type of a\nsymbol will be inferred based on its usage or its value."}),"\n",(0,t.jsx)(s,{"show-line-numbers":"",children:(0,t.jsxs)(n.div,{slot:"javascript",children:['const n = ce.box("n");\n',"n.value = 5;\n",'console.log("n =", n.value, ":", n.type);\n']})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"To get a list of all the symbols in an expression"})," use ",(0,t.jsx)(n.code,{children:"expr.symbols"}),"."]}),"\n",(0,t.jsx)(l,{path:"/compute-engine/guides/augmenting/",children:(0,t.jsxs)(n.p,{children:["Read more about ",(0,t.jsx)(n.strong,{children:"adding definitions"})," for symbols and functions",(0,t.jsx)(o,{name:"chevron-right-bold"})]})}),"\n",(0,t.jsx)(n.h2,{id:"scope",children:"Scope"}),"\n",(0,t.jsxs)(n.p,{children:["Symbols are defined within a ",(0,t.jsx)(n.strong,{children:"scope"}),"."]}),"\n",(0,t.jsx)(l,{path:"/compute-engine/guides/evaluate/#scopes",children:(0,t.jsxs)(n.p,{children:["Read more about ",(0,t.jsx)(n.strong,{children:"scopes"}),(0,t.jsx)(o,{name:"chevron-right-bold"})]})}),"\n",(0,t.jsx)(n.h2,{id:"unknowns-and-constants",children:"Unknowns and Constants"}),"\n",(0,t.jsxs)(n.p,{children:["A symbol that has been declared, but has no values associated with it, is said\nto be an ",(0,t.jsx)(n.strong,{children:"unknown"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A symbol whose value cannot be changed is a ",(0,t.jsx)(n.strong,{children:"constant"}),". Constants are\nidentified by a special flag in their definition."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"To check if a symbol is a constant"}),", use the ",(0,t.jsx)(n.code,{children:"expr.isConstant"})," property."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'console.log(ce.box("x").isConstant);\n// \u2794 false\n\nconsole.log(ce.box("Pi").isConstant);\n// \u2794 true\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["The value of constants may depend on settings of the Compute Engine. For\nexample, the value of ",(0,t.jsx)(n.code,{children:"Pi"})," is determined based on the value of the ",(0,t.jsx)(n.code,{children:"precision"}),"\nproperty. The values of constants in scope when the ",(0,t.jsx)(n.code,{children:"precision"})," setting is\nchanged will be updated."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'ce.precision = 4;\nconst smallPi = ce.box("Pi"); // \u03c0 with 4 digits\nconsole.log(smallPi.latex);\n// \u2794 3.1415\n\nce.precision = 10;\nconst bigPi = ce.box("Pi"); // \u03c0 with 10 digits\nconsole.log(bigPi.latex);\n// \u2794 3.1415926535\n\nce.precision = 100; // Future computations will be done with 100 digits\n\nconsole.log("pi = ", smallPi, "=", bigPi);\n// \u2794 pi  = 3.1415 = 3.1415926535\n'})}),"\n",(0,t.jsx)(n.h2,{id:"automatic-declaration",children:"Automatic Declaration"}),"\n",(0,t.jsx)(n.p,{children:"An unknown symbol is automatically declared when it is first used in an\nexpression."}),"\n",(0,t.jsxs)(n.p,{children:["The symbol has a type of ",(0,t.jsx)(n.code,{children:"unknown"})," and no value associated with it,\nso the symbol will be an ",(0,t.jsx)(n.strong,{children:"unknown"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const symbol = ce.box("m"); // m for mystery\nconsole.log(symbol.type);\n// \u2794 "unknown"\n\nsymbol.value = 5;\nconsole.log(symbol.type);\n// \u2794 "finite_integer"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"forgetting-a-symbol",children:"Forgetting a Symbol"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["To ",(0,t.jsx)(n.em,{children:"reset"})," what is known about a symbol"]})," use the ",(0,t.jsx)(n.code,{children:"ce.forget()"})," function."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ce.forget()"})," function will remove any\n",(0,t.jsx)(n.a,{href:"/compute-engine/guides/assumptions",children:"assumptions"})," associated with a symbol, and\nremove its value. Howeve, the symbol will remained declared, since other\nexpressions may depend on it."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"To forget about a specific symbol"}),", pass the name of the symbol as an\nargument to ",(0,t.jsx)(n.code,{children:"ce.forget()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"To forget about all the symbols in the current scope"}),", use ",(0,t.jsx)(n.code,{children:"ce.forget()"}),"\nwithout any arguments."]}),"\n",(0,t.jsx)(n.admonition,{title:"Note",type:"info",children:(0,t.jsx)(n.p,{children:"Note that only symbols in the current scope are forgotten. If assumptions about\nthe symbol existed in a previous scope, those assumptions will be in effect when\nreturning to the previous scope."})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var o=s(6540);const t={},i=o.createContext(t);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);