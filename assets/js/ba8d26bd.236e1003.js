"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[8618],{24:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"compute-engine/reference-collections","title":"Collections","description":"In the Compute Engine, collections group together multiple elements","source":"@site/docs/compute-engine/82-reference-collections.md","sourceDirName":"compute-engine","slug":"/compute-engine/reference/collections/","permalink":"/compute-engine/reference/collections/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1750609454000,"sidebarPosition":82,"frontMatter":{"title":"Collections","slug":"/compute-engine/reference/collections/","date":"Last Modified"},"sidebar":"docSidebar","previous":{"title":"Calculus","permalink":"/compute-engine/reference/calculus/"},"next":{"title":"Complex","permalink":"/compute-engine/reference/complex/"}}');var l=s(4848),t=s(8453);const r={title:"Collections",slug:"/compute-engine/reference/collections/",date:"Last Modified"},c=void 0,o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Ordered and Unordered Collections",id:"ordered-and-unordered-collections",level:3},{value:"Finite and Infinite Collections",id:"finite-and-infinite-collections",level:3},{value:"Lazy and Eager Collections",id:"lazy-and-eager-collections",level:3},{value:"Core Properties of Collections",id:"core-properties-of-collections",level:3},{value:"Eager Collections",id:"eager-collections",level:4},{value:"Lazy Collections",id:"lazy-collections",level:4},{value:"Types",id:"types",level:3},{value:"Operations on Collections",id:"operations-on-collections",level:3},{value:"Creating Eager Collections",id:"creating-eager-collections",level:2},{value:"Sequence",id:"sequence",level:3},{value:"List",id:"list",level:3},{value:"Set",id:"set",level:3},{value:"Creating Lazy Collections",id:"creating-lazy-collections",level:2},{value:"Range",id:"range",level:3},{value:"Linspace",id:"linspace",level:3},{value:"Fill",id:"fill",level:3},{value:"Repeat",id:"repeat",level:3},{value:"Cycle",id:"cycle",level:3},{value:"Iterate",id:"iterate",level:3},{value:"Accessing Elements of Collections",id:"accessing-elements-of-collections",level:2},{value:"At",id:"at",level:3},{value:"First",id:"first",level:3},{value:"Second",id:"second",level:3},{value:"Last",id:"last",level:3},{value:"Most",id:"most",level:3},{value:"Rest",id:"rest",level:3},{value:"Take",id:"take",level:3},{value:"Drop",id:"drop",level:3},{value:"Changing the Order of Elements",id:"changing-the-order-of-elements",level:2},{value:"Reverse",id:"reverse",level:3},{value:"RotateLeft",id:"rotateleft",level:3},{value:"RotateRight",id:"rotateright",level:3},{value:"Shuffle",id:"shuffle",level:3},{value:"Sort",id:"sort",level:3},{value:"Operating On Collections",id:"operating-on-collections",level:2},{value:"Filter",id:"filter",level:3},{value:"Length",id:"length",level:3},{value:"IsEmpty",id:"isempty",level:3},{value:"Map",id:"map",level:3},{value:"Reduce",id:"reduce",level:3},{value:"Tally",id:"tally",level:3},{value:"Zip",id:"zip",level:3},{value:"Transforming Collections",id:"transforming-collections",level:2},{value:"Exclude",id:"exclude",level:3},{value:"Extract",id:"extract",level:3},{value:"Join",id:"join",level:3},{value:"Unique",id:"unique",level:3},{value:"Converting Lazy Collections to Eager Collections",id:"converting-lazy-collections-to-eager-collections",level:2},{value:"ListFrom",id:"listfrom",level:3},{value:"SetFrom",id:"setfrom",level:3},{value:"TupleFrom",id:"tuplefrom",level:3},{value:"RecordFrom",id:"recordfrom",level:3},{value:"MapFrom",id:"mapfrom",level:3}];function a(e){const n={a:"a",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components},{FunctionDefinition:s,Icon:i,Intro:r,Latex:c,ReadMore:o,Signature:d}=n;return s||x("FunctionDefinition",!0),i||x("Icon",!0),r||x("Intro",!0),c||x("Latex",!0),o||x("ReadMore",!0),d||x("Signature",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r,{children:(0,l.jsxs)(n.p,{children:["In the Compute Engine, ",(0,l.jsx)(n.strong,{children:"collections"})," group together multiple elements\ninto one unit. Each element in a collection is a\n",(0,l.jsx)(n.a,{href:"/compute-engine/guides/expressions/",children:(0,l.jsx)(n.strong,{children:"Boxed Expression"})}),"."]})}),"\n",(0,l.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,l.jsx)(n.p,{children:"The most common kind of collection are:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#list",children:(0,l.jsx)(n.strong,{children:"List"})}),(0,l.jsx)(n.code,{children:":list"}),": ordered collection of elements (duplicates allowed)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#set",children:(0,l.jsx)(n.strong,{children:"Set"})}),(0,l.jsx)(n.code,{children:":set"}),": unordered collection of unique elements"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#tuple",children:(0,l.jsx)(n.strong,{children:"Tuple"})}),(0,l.jsx)(n.code,{children:":tuple"}),": ordered, fixed-size collection with optional names"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#record",children:(0,l.jsx)(n.strong,{children:"Record"})}),(0,l.jsx)(n.code,{children:":record"}),": structured data with a fixed set of known string keys"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#dictionary",children:(0,l.jsx)(n.strong,{children:"Dictionary"})}),(0,l.jsx)(n.code,{children:":dictionary"}),": unordered key-value pairs with string keys"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Collections are ",(0,l.jsx)(n.strong,{children:"immutable"}),": they cannot be modified in place.",(0,l.jsx)(n.br,{}),"\n","Instead, operations on collections produce new collections."]}),"\n",(0,l.jsx)(n.p,{children:"Collections can be used to represent vectors, matrices, sets,\nmappings, or records \u2014 in both finite and infinite forms."}),"\n",(0,l.jsx)(o,{path:"/compute-engine/reference/linear-algebra/",children:(0,l.jsxs)(n.p,{children:["See also the ",(0,l.jsx)(n.strong,{children:"Linear Algebra"})," section for operations on vectors, matrices,\ntensors which are a special kind of collection (lists of lists of numbers).",(0,l.jsx)(i,{name:"chevron-right-bold"})]})}),"\n",(0,l.jsx)(n.h3,{id:"ordered-and-unordered-collections",children:"Ordered and Unordered Collections"}),"\n",(0,l.jsx)(n.p,{children:"Collections fall into two broad categories:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Ordered collections"})," (such as ",(0,l.jsx)(n.code,{children:"List"})," and ",(0,l.jsx)(n.code,{children:"Tuple"}),")",(0,l.jsx)(n.br,{}),"\n","\u2192 Elements can be accessed by an ",(0,l.jsx)(n.strong,{children:"index"}),", an integer that indicates the position of the element in the collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Unordered collections"})," (such as ",(0,l.jsx)(n.code,{children:"Set"})," and ",(0,l.jsx)(n.code,{children:"Record"}),")",(0,l.jsx)(n.br,{}),"\n","\u2192 Elements cannot be accessed by index. They can be enumerated or looked up by key."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The first element of an ordered collection has index ",(0,l.jsx)(n.code,{children:"1"}),", the second element\nhas index ",(0,l.jsx)(n.code,{children:"2"}),", and so on. The last element has index equal to the length of the collection."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Negative indexes"})," can also be used to access elements from the end of the\ncollection, if the collection is finite."]}),"\n",(0,l.jsxs)(n.p,{children:["The last element has index ",(0,l.jsx)(n.code,{children:"-1"}),", the second to last element has index ",(0,l.jsx)(n.code,{children:"-2"}),",\nand so on. This is useful for accessing elements without knowing the length of the\ncollection."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["At", ["List", 2, 5, 7, 11], 3]\n// \u2794 7\n\n["At", ["List", 2, 5, 7, 11], -3]\n// \u2794 5\n'})}),"\n",(0,l.jsx)(n.h3,{id:"finite-and-infinite-collections",children:"Finite and Infinite Collections"}),"\n",(0,l.jsx)(n.p,{children:"Collections may be:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Finite"}),": containing a definite number of elements."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Infinite"}),": continuing indefinitely (for example, a sequence of all natural numbers)."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Compute Engine supports ",(0,l.jsx)(n.strong,{children:"lazy evaluation"})," to make working with infinite collections possible."]}),"\n",(0,l.jsx)(n.h3,{id:"lazy-and-eager-collections",children:"Lazy and Eager Collections"}),"\n",(0,l.jsx)(n.p,{children:"Collections can be:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Eager"}),": elements are fully evaluated when the collection is created."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Lazy"}),": elements are evaluated only as they are accessed."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Lazy collections are useful when working with with expensive computations\nand necessary when working with infinite collections."}),"\n",(0,l.jsxs)(n.p,{children:["Some operations like ",(0,l.jsx)(n.code,{children:"Range"}),", ",(0,l.jsx)(n.code,{children:"Cycle"}),", ",(0,l.jsx)(n.code,{children:"Iterate"}),", ",(0,l.jsx)(n.code,{children:"Repeat"})," create ",(0,l.jsx)(n.strong,{children:"lazy collections"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["You can convert a lazy collection to an eager collection using ",(0,l.jsx)(n.a,{href:"#listfrom",children:(0,l.jsx)(n.code,{children:"ListFrom"})}),"\nor ",(0,l.jsx)(n.a,{href:"#setfrom",children:(0,l.jsx)(n.code,{children:"SetFrom"})}),". These functions enumerate all elements of a finite\ncollection and produce a matching eager collection."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["ListFrom", ["Range", 1, 10]]\n// \u2794 ["List", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n'})}),"\n",(0,l.jsx)(n.p,{children:"Lazy infinite collections provide a natural way to model mathematical\nsequences, iterative processes, or cyclic patterns, with minimal memory use."}),"\n",(0,l.jsx)(n.p,{children:"Common examples include:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Natural numbers (",(0,l.jsx)(n.code,{children:"Range"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:["Cyclic patterns (",(0,l.jsx)(n.code,{children:"Cycle"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:["Iterative computations (",(0,l.jsx)(n.code,{children:"Iterate"}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"core-properties-of-collections",children:"Core Properties of Collections"}),"\n",(0,l.jsx)(n.p,{children:"All collections share these basic properties:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Their elements can be ",(0,l.jsx)(n.strong,{children:"enumerated"})]}),"\n",(0,l.jsxs)(n.li,{children:["Their elements can be ",(0,l.jsx)(n.strong,{children:"counted"})]}),"\n",(0,l.jsxs)(n.li,{children:["They can check whether an element is a ",(0,l.jsx)(n.strong,{children:"member"})," of the collection"]}),"\n",(0,l.jsxs)(n.li,{children:["They can check if another collection is a ",(0,l.jsx)(n.strong,{children:"subset"})," of the collection"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," Depending on the type of collection, counting and membership checking\ncan be an expensive operation. See the information on specific collection types for details."]}),"\n",(0,l.jsx)(n.p,{children:"In addition, ordered collections support:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Index-based access"}),": elements can be accessed by their index."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Finding elements"}),": elements can be searched for by a predicate and\ntheir index can be returned."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"eager-collections",children:"Eager Collections"}),"\n",(0,l.jsx)(n.p,{children:"Some of the collections in the Compute Engine include:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#list",children:(0,l.jsx)(n.strong,{children:"List"})}),": ordered collections of elements, which are also used to represent\n",(0,l.jsx)(n.strong,{children:"vectors"})," and ",(0,l.jsx)(n.strong,{children:"matrices"}),". Elements in a list are accessed by their\nindex, which starts at 1. Type: ",(0,l.jsx)(n.code,{children:"list<T>"})," where ",(0,l.jsx)(n.code,{children:"T"})," is the type of the elements."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#set",children:(0,l.jsx)(n.strong,{children:"Set"})}),": unordered collections of unique elements. The elements in a set are\nnot accessed by index, they are enumerated. A set can contain an infinite number\nof elements. Type : ",(0,l.jsx)(n.code,{children:"set<T>"})," where ",(0,l.jsx)(n.code,{children:"T"})," is the type of the elements."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#tuple",children:(0,l.jsx)(n.strong,{children:"Tuple"})}),": ordered collections of elements, but with a fixed number\nof elements that have a specific type and an optional name. Type : ",(0,l.jsx)(n.code,{children:"tuple<T1, T2, ..., Tn>"})," where ",(0,l.jsx)(n.code,{children:"T1"}),", ",(0,l.jsx)(n.code,{children:"T2"}),", ..., ",(0,l.jsx)(n.code,{children:"Tn"})," are the types of the elements."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#dictionary",children:(0,l.jsx)(n.strong,{children:"Dictionary"})}),": unordered collections of key-value pairs,\nwhere each key is unique. Type: ",(0,l.jsx)(n.code,{children:"dictionary<V>"})," where ",(0,l.jsx)(n.code,{children:"V"})," is the type of the values, the keys are strings."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#record",children:(0,l.jsx)(n.strong,{children:"Record"})}),": unordered collections of key-value pairs. Unlike dictionaries, records are used to represent structured data with a fixed set of keys, and the keys are known at compile time.\nType: ",(0,l.jsx)(n.code,{children:"record<K1: T1, K2: T2, ..., Kn: Tn>"})," where ",(0,l.jsx)(n.code,{children:"K1"}),", ",(0,l.jsx)(n.code,{children:"K2"}),", ..., ",(0,l.jsx)(n.code,{children:"Kn"})," are the keys and ",(0,l.jsx)(n.code,{children:"T1"}),", ",(0,l.jsx)(n.code,{children:"T2"}),", ..., ",(0,l.jsx)(n.code,{children:"Tn"})," are the types of the values."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"lazy-collections",children:"Lazy Collections"}),"\n",(0,l.jsx)(n.p,{children:"Some functions evaluate to a lazy collection. This is useful for creating\ninfinite collections or for collections that are expensive to compute."}),"\n",(0,l.jsx)(n.p,{children:"Examples of function evaluating to a lazy collection include:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#range",children:(0,l.jsx)(n.strong,{children:"Range"})})," and ",(0,l.jsx)(n.a,{href:"#linspace",children:(0,l.jsx)(n.strong,{children:"Linspace"})}),": ordered sequences of numbers (integers and reals, respectively) with a specified start, end and step size."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#cycle",children:(0,l.jsx)(n.strong,{children:"Cycle"})}),": infinite collections that repeat a finite collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#iterate",children:(0,l.jsx)(n.strong,{children:"Iterate"})}),": infinite collections that apply a function to an initial value repeatedly."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#repeat",children:(0,l.jsx)(n.strong,{children:"Repeat"})}),": infinite collections that repeat a single value."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#fill",children:(0,l.jsx)(n.strong,{children:"Fill"})}),": collections of a specified size, where each element is computed by a function or set to a specific value."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The type ",(0,l.jsx)(n.code,{children:"collection"})," represents any collection, whether ordered or unordered, finite or infinite."]}),"\n",(0,l.jsxs)(n.li,{children:["The type ",(0,l.jsx)(n.code,{children:"ordered_collection"})," applies to collections that support index-based access (such as ",(0,l.jsx)(n.code,{children:"List"}),", and ",(0,l.jsx)(n.code,{children:"Tuple"}),")."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"operations-on-collections",children:"Operations on Collections"}),"\n",(0,l.jsx)(n.p,{children:"Operations on ordered and unordered collections:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#filter",children:(0,l.jsx)(n.strong,{children:"Filter"})}),", ",(0,l.jsx)(n.a,{href:"#map",children:(0,l.jsx)(n.strong,{children:"Map"})}),", and ",(0,l.jsx)(n.a,{href:"#reduce",children:(0,l.jsx)(n.strong,{children:"Reduce"})}),": operations that create new collections by applying a function to each element of an existing collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#length",children:(0,l.jsx)(n.strong,{children:"Length"})}),", ",(0,l.jsx)(n.a,{href:"#isempty",children:(0,l.jsx)(n.strong,{children:"IsEmpty"})}),": check the number of elements of a collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#filter",children:(0,l.jsx)(n.strong,{children:"Filter"})}),", ",(0,l.jsx)(n.a,{href:"#map",children:(0,l.jsx)(n.strong,{children:"Map"})}),", ",(0,l.jsx)(n.a,{href:"#reduce",children:(0,l.jsx)(n.strong,{children:"Reduce"})}),": apply a function to each element of a collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#join",children:(0,l.jsx)(n.strong,{children:"Join"})}),", ",(0,l.jsx)(n.a,{href:"#zip",children:(0,l.jsx)(n.strong,{children:"Zip"})}),": combine multiple collections into one."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#tally",children:(0,l.jsx)(n.strong,{children:"Tally"})}),": count the number of occurrences of each element in a collection."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Operations on ordered collections:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#at",children:(0,l.jsx)(n.strong,{children:"At"})}),", ",(0,l.jsx)(n.a,{href:"#first",children:(0,l.jsx)(n.strong,{children:"First"})}),", ",(0,l.jsx)(n.a,{href:"#second",children:(0,l.jsx)(n.strong,{children:"Second"})}),", ",(0,l.jsx)(n.a,{href:"#last",children:(0,l.jsx)(n.strong,{children:"Last"})}),": access a specific element of a collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#take",children:(0,l.jsx)(n.strong,{children:"Take"})}),", ",(0,l.jsx)(n.a,{href:"#drop",children:(0,l.jsx)(n.strong,{children:"Drop"})}),", ",(0,l.jsx)(n.a,{href:"#most",children:(0,l.jsx)(n.strong,{children:"Most"})}),", ",(0,l.jsx)(n.a,{href:"#rest",children:(0,l.jsx)(n.strong,{children:"Rest"})}),": access a subset of a collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#indexof",children:(0,l.jsx)(n.strong,{children:"IndexOf"})}),": find the index of an element in a collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#extract",children:(0,l.jsx)(n.strong,{children:"Extract"})}),", ",(0,l.jsx)(n.a,{href:"#exclude",children:(0,l.jsx)(n.strong,{children:"Exclude"})}),": access a collection of elements at specific indexes."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#sort",children:(0,l.jsx)(n.strong,{children:"Sort"})}),", ",(0,l.jsx)(n.a,{href:"#shuffle",children:(0,l.jsx)(n.strong,{children:"Shuffle"})}),", ",(0,l.jsx)(n.a,{href:"#reverse",children:(0,l.jsx)(n.strong,{children:"Reverse"})}),": reorder a collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#unique",children:(0,l.jsx)(n.strong,{children:"Unique"})}),": remove duplicates from a collection."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#rotateleft",children:(0,l.jsx)(n.strong,{children:"RotateLeft"})}),", ",(0,l.jsx)(n.a,{href:"#rotateright",children:(0,l.jsx)(n.strong,{children:"RotateRight"})}),": rotate a collection to the left or right."]}),"\n"]}),"\n",(0,l.jsx)(o,{path:"/compute-engine/reference/linear-algebra/",children:(0,l.jsxs)(n.p,{children:["See also the ",(0,l.jsx)(n.strong,{children:"Linear Algebra"})," section for operations on vectors, matrices, tensors which are a special kind of collection.",(0,l.jsx)(i,{name:"chevron-right-bold"})]})}),"\n",(0,l.jsx)(n.h2,{id:"creating-eager-collections",children:"Creating Eager Collections"}),"\n",(0,l.jsx)(n.p,{children:"This section contains functions that create eager collections from some elements."}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"sequence",children:"Sequence"})}),"\n",(0,l.jsxs)(s,{name:"Sequence",children:[(0,l.jsxs)(d,{name:"Sequence",returns:"collection",children:["...",(0,l.jsx)(n.em,{children:"elements"}),":any"]}),(0,l.jsx)(n.p,{children:"A sequence is a collection of elements. When a sequence is used where an element\nis expected, the elements of the sequence are spliced into the expression."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["List", 1, ["Sequence", 2, 3], 4]\n// \u2794 ["List", 1, 2, 3, 4]\n'})}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Nothing"})," symbol is a synonym for the empty sequence ",(0,l.jsx)(n.code,{children:'["Sequence"]'}),".\nWhen the ",(0,l.jsx)(n.code,{children:"Nothing"})," symbol is used in a context where an element is expected, it is ignored."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["List", 1, "Nothing", 2]\n// \u2794 ["List", 1, 2]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"list",children:"List"})}),"\n",(0,l.jsxs)(s,{name:"List",children:[(0,l.jsxs)(d,{name:"List",returns:"list",children:["...",(0,l.jsx)(n.em,{children:"elements"}),":any"]}),(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.code,{children:"List"})," is an ",(0,l.jsx)(n.strong,{children:"ordered"})," collection of elements. An element in\na list may be repeated."]}),(0,l.jsx)(c,{value:"\\lbrack 42, 3.14, x, y \\rbrack"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["List", 42, 3.14, "x", "y"]\n'})}),(0,l.jsxs)(n.p,{children:["The type of a list is ",(0,l.jsx)(n.code,{children:"list<T>"}),", where ",(0,l.jsx)(n.code,{children:"T"})," is the type of the elements in the list.\nThe type ",(0,l.jsx)(n.code,{children:"list"})," is a shorthand for ",(0,l.jsx)(n.code,{children:"list<any>"}),", meaning the list can contain elements of any type."]}),(0,l.jsxs)(n.p,{children:["The visual presentation of a ",(0,l.jsx)(n.code,{children:"List"})," expression can be customized using the\n",(0,l.jsx)(n.code,{children:"Delimiter"})," function."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",metastring:"example",children:'ce.box(["List", 5, 2, 10, 18]).latex;\n// \u2794 "\\lbrack 5, 2, 10, 18 \\rbrack"\n\nce.box(["Delimiter", ["List", 5, 2, 10, 18], "<;>"]).latex;\n// \u2794 "\\langle5; 2; 10; 18\\rangle"\n'})}),(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.strong,{children:"vector"})," is represented as a ",(0,l.jsx)(n.code,{children:"List"})," of numbers."]}),(0,l.jsx)(c,{value:"\\lbrack 1, 2, 3 \\rbrack"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["List", 1, 2, 3]\n'})}),(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.strong,{children:"matrix"})," is represented using a ",(0,l.jsx)(n.code,{children:"List"})," of rows of numbers, where each row is\na ",(0,l.jsx)(n.code,{children:"List"})," of numbers."]}),(0,l.jsx)(c,{value:"\\lbrack \\lbrack 1, 2, 3 \\rbrack, \\lbrack 4, 5, 6 \\rbrack, \\lbrack 7, 8, 9 \\rbrack \\rbrack"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["List", \n  ["List", 1, 2, 3], \n  ["List", 4, 5, 6], \n  ["List", 7, 8, 9]\n]\n'})}),(0,l.jsxs)(n.p,{children:["In LaTeX, lists of lists can also be represented using a ",(0,l.jsx)(n.code,{children:";"})," separator:"]}),(0,l.jsx)(c,{value:"\\lbrack 1, 2, 3 ; 4, 5, 6 ; 7, 8, 9 \\rbrack"}),(0,l.jsxs)(n.p,{children:["And matrices can be represented using LaTeX environments with the ",(0,l.jsx)(n.code,{children:"\\begin{}"})," and ",(0,l.jsx)(n.code,{children:"\\end{}"})," commands:"]}),(0,l.jsx)(c,{value:"\\begin{pmatrix} 1 & 2 & 3 \\\\ 4 & 5 & 6 \\\\ 7 & 8 & 9 \\end{pmatrix}"}),(0,l.jsx)(o,{path:"/compute-engine/reference/linear-algebra/",children:(0,l.jsxs)(n.p,{children:["See also the ",(0,l.jsx)(n.strong,{children:"Linear Algebra"})," section for operations on vectors, matrices and tensors.",(0,l.jsx)(i,{name:"chevron-right-bold"})]})}),(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"MathJSON"}),(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"LaTeX"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:'["List", "x", "y", 7, 11]'})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{className:"language-math math-inline",children:"\\lbrack x, y, 7, 11\\rbrack"})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:'["List", "x", "Nothing", "y"]'})}),(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{className:"language-math math-inline",children:"\\lbrack x,,y\\rbrack"})})]})]})]})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"set",children:"Set"})}),"\n",(0,l.jsxs)(s,{name:"Set",children:[(0,l.jsxs)(d,{name:"Set",returns:"set",children:["...",(0,l.jsx)(n.em,{children:"elements"}),":any"]}),(0,l.jsxs)(n.p,{children:["An ",(0,l.jsx)(n.strong,{children:"unordered"})," collection of unique elements."]}),(0,l.jsx)(c,{value:"\\lbrace 12, 15, 17 \\rbrace"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Set", 12, 15, 17]\n'})}),(0,l.jsxs)(n.p,{children:["The type of a set is ",(0,l.jsx)(n.code,{children:"set<T>"}),", where ",(0,l.jsx)(n.code,{children:"T"})," is the type of the elements in the set.\nThe type ",(0,l.jsx)(n.code,{children:"set"})," is a shorthand for ",(0,l.jsx)(n.code,{children:"set<any>"}),", meaning the set can contain elements of any type."]}),(0,l.jsxs)(n.p,{children:["If the same element is repeated, it is included only once in the set. The\nelements are compared using the ",(0,l.jsx)(n.code,{children:"IsSame"})," function."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Set", 12, 15, 17, 12, 15]\n// \u2794 ["Set", 12, 15, 17]\n'})}),(0,l.jsx)(n.p,{children:"The elements in a set are not ordered, so the order of the elements in the set may not be the same as the order in which they were added. When enumerating a set, the elements are returned in an arbitrary order,\nand two successive enumerations may return the elements in a different order."}),(0,l.jsx)(n.p,{children:"The elements in a set are counted in constant time."})]}),"\n",(0,l.jsx)(n.h2,{id:"creating-lazy-collections",children:"Creating Lazy Collections"}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"range",children:"Range"})}),"\n",(0,l.jsxs)(s,{name:"Range",children:[(0,l.jsxs)(d,{name:"Range",returns:"collection<integer>",children:[(0,l.jsx)(n.em,{children:"upper"}),":integer"]}),(0,l.jsxs)(d,{name:"Range",returns:"collection<integer>",children:[(0,l.jsx)(n.em,{children:"lower"}),":integer",", ",(0,l.jsx)(n.em,{children:"upper"}),":integer"]}),(0,l.jsxs)(d,{name:"Range",returns:"collection<integer>",children:[(0,l.jsx)(n.em,{children:"lower"}),":integer",", ",(0,l.jsx)(n.em,{children:"upper"}),":integer",", ",(0,l.jsx)(n.em,{children:"step"}),":integer"]}),(0,l.jsxs)(n.p,{children:["A sequence of numbers, starting with ",(0,l.jsx)(n.code,{children:"lower"}),", ending with ",(0,l.jsx)(n.code,{children:"upper"}),", and\nincrementing by ",(0,l.jsx)(n.code,{children:"step"}),"."]}),(0,l.jsxs)(n.p,{children:["If the ",(0,l.jsx)(n.code,{children:"step"})," is not specified, it is assumed to be 1."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Range", 3, 9]\n// \u2794 ["List", 3, 4, 5, 6, 7, 8, 9]\n\n["Range", 1, 10, 2]\n// \u2794 ["List", 1, 3, 5, 7, 9]\n'})}),(0,l.jsxs)(n.p,{children:["If there is a single argument, it is assumed to be the ",(0,l.jsx)(n.code,{children:"upper"})," bound, and the\n",(0,l.jsx)(n.code,{children:"lower"})," bound is assumed to be 1."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Range", 7]\n// \u2794 ["List", 1, 2, 3, 4, 5, 6, 7]\n'})}),(0,l.jsxs)(n.p,{children:["If the ",(0,l.jsx)(n.code,{children:"lower"})," bound is greater than the ",(0,l.jsx)(n.code,{children:"upper"})," bound, the ",(0,l.jsx)(n.code,{children:"step"})," must be\nnegative."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Range", 10, 1, -1]\n// \u2794 ["List", 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"linspace",children:"Linspace"})}),"\n",(0,l.jsxs)(s,{name:"Linspace",children:[(0,l.jsxs)(d,{name:"Linspace",returns:"collection<real>",children:[(0,l.jsx)(n.em,{children:"upper"}),":real"]}),(0,l.jsxs)(d,{name:"Linspace",returns:"collection<real>",children:[(0,l.jsx)(n.em,{children:"lower"}),":real",", ",(0,l.jsx)(n.em,{children:"upper"}),":real"]}),(0,l.jsxs)(d,{name:"Linspace",returns:"collection<real>",children:[(0,l.jsx)(n.em,{children:"lower"}),":real",", ",(0,l.jsx)(n.em,{children:"upper"}),":real",", ",(0,l.jsx)(n.em,{children:"count"}),":integer"]}),(0,l.jsxs)(n.p,{children:['Short for "linearly spaced", from the ',(0,l.jsx)(n.a,{href:"https://mathworks.com/help/matlab/ref/linspace.html",children:"MATLAB function of the same\nname"}),"."]}),(0,l.jsxs)(n.p,{children:["A sequence of numbers evenly spaced between ",(0,l.jsx)(n.code,{children:"lower"})," and ",(0,l.jsx)(n.code,{children:"upper"}),". Similar to ",(0,l.jsx)(n.code,{children:"Range"})," but the number of elements in the collection is specified with ",(0,l.jsx)(n.code,{children:"count"})," instead of a ",(0,l.jsx)(n.code,{children:"step"})," value."]}),(0,l.jsxs)(n.p,{children:["If the ",(0,l.jsx)(n.code,{children:"count"})," is not specified, it is assumed to be ",(0,l.jsx)(n.code,{children:"50"}),"."]}),(0,l.jsxs)(n.p,{children:["If there is a single argument, it is assumed to be the ",(0,l.jsx)(n.code,{children:"upper"})," bound, and the ",(0,l.jsx)(n.code,{children:"lower"})," bound is assumed to be ",(0,l.jsx)(n.code,{children:"1"}),"."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Linspace", 3, 10]\n// \u2794 ["List", 3, 3.142857142857143, 3.2857142857142856, \n// 3.4285714285714284, 3.571428571428571, 3.714285714285714, \n// 3.857142857142857, 4, 4.142857142857143, 4.285714285714286, \n// 4.428571428571429, 4.571428571428571, 4.714285714285714,\n// 4.857142857142857, 5, 5.142857142857143, 5.285714285714286, \n// 5.428571428571429, 5.571428571428571, 5.714285714285714, \n// 5.857142857142857, 6, 6.142857142857143, 6.285714285714286, \n// 6.428571428571429, 6.571428571428571, 6.714285714285714, \n// 6.857142857142857, 7, 7.142857142857143, 7.285714285714286, \n// 7.428571428571429, 7.571428571428571, 7.714285714285714, \n// 7.8979591836734695, 8.061224489795919, 8.224489795918368, \n// 8.387755102040817, 8.551020408163266, 8.714285714285714, \n// 8.877551020408163, 9.040816326530612, 9.204081632653061, \n// 9.36734693877551, 9.53061224489796, 9.693877551020408, \n// 9.857142857142858, 10]\n\n["Linspace", 2]\n// \u2794 ["List", 1, 1.1428571428571428, 1.2857142857142858, \n// 1.4285714285714286, 1.5714285714285714, \n// 1.7142857142857142, 1.8571428571428572, 2]\n\n["Linspace", 1, 10, 5]\n// \u2794 ["List", 1, 3.25, 5.5, 7.75, 10]\n\n["Linspace", 10, 1, 10]\n// \u2794 ["List", 10, 9.11111111111111, 8.222222222222221, \n// 7.333333333333333, 6.444444444444445, \n// 5.555555555555555, 4.666666666666666, 3.7777777777777777, \n// 2.888888888888889, 2]\n\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"fill",children:"Fill"})}),"\n",(0,l.jsxs)(s,{name:"Fill",children:[(0,l.jsxs)(d,{name:"Fill",returns:"list",children:[(0,l.jsx)(n.em,{children:"dimensions"}),", ",(0,l.jsx)(n.em,{children:"value"}),":any"]}),(0,l.jsxs)(d,{name:"Fill",returns:"list",children:[(0,l.jsx)(n.em,{children:"dimensions"}),", ",(0,l.jsx)(n.em,{children:"f"}),":function"]}),(0,l.jsx)(n.p,{children:"Create a list of the specified dimensions."}),(0,l.jsxs)(n.p,{children:["If a ",(0,l.jsx)(n.code,{children:"value"})," is provided, the elements of the list are all set to that value."]}),(0,l.jsxs)(n.p,{children:["If a ",(0,l.jsx)(n.code,{children:"function"})," is provided, the elements of the list are computed by applying\nthe function to the index of the element."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"dimensions"})," is a number, a list of that length is created."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Fill", 3, 0]\n// \u2794 ["List", 0, 0, 0]\n'})}),(0,l.jsx)(n.p,{children:"If dimension is a tuple, a matrix of the specified dimensions is created."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Fill", ["Tuple", 2, 3], 0]\n// \u2794 ["List", ["List", 0, 0, 0], ["List", 0, 0, 0]]\n'})}),(0,l.jsxs)(n.p,{children:["If a ",(0,l.jsx)(n.code,{children:"function"})," is specified, it is applied to the index of the element to\ncompute the value of the element."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Fill", ["Tuple", 2, 3], ["Function", ["Add", "i", "j"], "i", "j"]]\n// \u2794 ["List", ["List", 0, 1, 2], ["List", 1, 2, 3]]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"repeat",children:"Repeat"})}),"\n",(0,l.jsxs)(s,{name:"Repeat",children:[(0,l.jsxs)(d,{name:"Repeat",returns:"list",children:[(0,l.jsx)(n.em,{children:"value"}),": any"]}),(0,l.jsx)(n.p,{children:"An infinite list of the same element."}),(0,l.jsxs)(d,{name:"Repeat",returns:"list",children:[(0,l.jsx)(n.em,{children:"value"}),": any, ",(0,l.jsx)(n.em,{children:"count"}),": integer?"]}),(0,l.jsxs)(n.p,{children:["A list of the same element repeated ",(0,l.jsx)(n.code,{children:"count"})," times."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Repeat", 42, 5]\n'})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," ",(0,l.jsx)(n.code,{children:'["Repeat", n]'})," is equivalent to ",(0,l.jsx)(n.code,{children:'["Cycle", ["List", n]]'}),"."]})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"cycle",children:"Cycle"})}),"\n",(0,l.jsxs)(s,{name:"Cycle",children:[(0,l.jsxs)(d,{name:"Cycle",returns:"list",children:[(0,l.jsx)(n.em,{children:"seed"}),":collection"]}),(0,l.jsxs)(n.p,{children:["A collection that repeats the elements of the ",(0,l.jsx)(n.code,{children:"seed"})," collection. The ",(0,l.jsx)(n.code,{children:"seed"}),"\ncollection must be finite."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Cycle", ["List", 5, 7, 2]]\n// \u2794 ["List", 5, 7, 2, 5, 7, 2, 5, 7, ...]\n\n["Cycle", ["Range", 3]]\n// \u2794 ["List", 1, 2, 3, 1, 2, 3, 1, 2, ...]\n'})}),(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(n.code,{children:"Take"})," to get a finite number of elements."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Take", ["Cycle", ["List", 5, 7, 2]], 5]\n// \u2794 ["List", 5, 7, 2, 5, 7]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"iterate",children:"Iterate"})}),"\n",(0,l.jsxs)(s,{name:"Iterate",children:[(0,l.jsxs)(d,{name:"Iterate",returns:"list",children:[(0,l.jsx)(n.em,{children:"f"}),":function"]}),(0,l.jsxs)(d,{name:"Iterate",returns:"list",children:[(0,l.jsx)(n.em,{children:"f"}),":function",", ",(0,l.jsx)(n.em,{children:"initial"}),":any"]}),(0,l.jsxs)(n.p,{children:["An infinite collection of the results of applying ",(0,l.jsx)(n.code,{children:"f"})," to the initial\nvalue."]}),(0,l.jsxs)(n.p,{children:["If the ",(0,l.jsx)(n.code,{children:"initial"})," value is not specified, it is assumed to be ",(0,l.jsx)(n.code,{children:"0"})]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Iterate", ["Function", ["Multiply", "_", 2]], 1]\n\n\n// \u2794 ["List", 1, 2, 4, 8, 16, ...]\n'})}),(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(n.code,{children:"Take"})," to get a finite number of elements."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Take", ["Iterate", ["Function", ["Add", "_", 2]], 7], 5]\n// \u2794 ["List", 7, 9, 11, 13, 15]\n'})})]}),"\n",(0,l.jsx)(n.h2,{id:"accessing-elements-of-collections",children:"Accessing Elements of Collections"}),"\n",(0,l.jsx)(n.p,{children:"Elements of ordered collections can be accessed using their index."}),"\n",(0,l.jsxs)(n.p,{children:["Indexes start at ",(0,l.jsx)(n.code,{children:"1"})," for the first element. Negative indexes can be used to access elements from the end of the collection, with ",(0,l.jsx)(n.code,{children:"-1"})," being the last element."]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"at",children:"At"})}),"\n",(0,l.jsxs)(s,{name:"At",children:[(0,l.jsxs)(d,{name:"At",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection, ",(0,l.jsx)(n.em,{children:"index"}),": integer"]}),(0,l.jsxs)(d,{name:"At",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection, ...",(0,l.jsx)(n.em,{children:"indexes"}),": integer"]}),(0,l.jsx)(n.p,{children:"Returns the element at the specified index."}),(0,l.jsx)(n.p,{children:"If the collection is nested, the indexes are applied in order."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["At", ["List", 5, 2, 10, 18], 2]\n// \u2794 10\n\n["At", ["List", 5, 2, 10, 18], -2]\n// \u2794 10\n\n["At", ["List", ["List", 1, 2], ["List", 3, 4]], 2, 1]\n// \u2794 3\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"first",children:"First"})}),"\n",(0,l.jsxs)(s,{name:"First",children:[(0,l.jsxs)(d,{name:"First",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection"]}),(0,l.jsx)(n.p,{children:"Return the first element of the collection."}),(0,l.jsxs)(n.p,{children:["It's equivalent to ",(0,l.jsx)(n.code,{children:'["At", _collection_, 1]'}),"."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["First", ["List", 5, 2, 10, 18]]\n// \u2794 5\n\n["First", ["Tuple", "x", "y"]]\n// \u2794 "x"\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"second",children:"Second"})}),"\n",(0,l.jsxs)(s,{name:"Second",children:[(0,l.jsxs)(d,{name:"Second",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection"]}),(0,l.jsx)(n.p,{children:"Return the second element of the collection."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Second", ["Tuple", "x", "y"]]\n// \u2794 "y"\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"last",children:"Last"})}),"\n",(0,l.jsxs)(s,{name:"Last",children:[(0,l.jsxs)(d,{name:"Last",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection"]}),(0,l.jsx)(n.p,{children:"Return the last element of the collection."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Last", ["List", 5, 2, 10, 18]]\n// \u2794 18\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"most",children:"Most"})}),"\n",(0,l.jsxs)(s,{name:"Most",children:[(0,l.jsxs)(d,{name:"Most",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection"]}),(0,l.jsx)(n.p,{children:"Return everything but the last element of the collection."}),(0,l.jsxs)(n.p,{children:["It's equivalent to ",(0,l.jsx)(n.code,{children:'["Drop", _xs_, -1]'}),"."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Most", ["List", 5, 2, 10, 18]]\n// \u2794 ["List", 5, 2, 10]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"rest",children:"Rest"})}),"\n",(0,l.jsxs)(s,{name:"Rest",children:[(0,l.jsxs)(d,{name:"Rest",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection"]}),(0,l.jsx)(n.p,{children:"Return everything but the first element of the collection."}),(0,l.jsxs)(n.p,{children:["It's equivalent to ",(0,l.jsx)(n.code,{children:'["Drop", _xs_, 1]'}),"."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Rest", ["List", 5, 2, 10, 18]]\n// \u2794 ["List", 2, 10, 18]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"take",children:"Take"})}),"\n",(0,l.jsxs)(s,{name:"Take",children:[(0,l.jsxs)(d,{name:"Take",returns:"collection",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection, ",(0,l.jsx)(n.em,{children:"n"}),": integer"]}),(0,l.jsxs)(n.p,{children:["Return a list of the first ",(0,l.jsx)(n.code,{children:"n"})," elements of ",(0,l.jsx)(n.code,{children:"xs"}),". The collection ",(0,l.jsx)(n.em,{children:"xs"})," must be ordered."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"n"})," is negative, it returns the last ",(0,l.jsx)(n.code,{children:"n"})," elements."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Take", ["List", 5, 2, 10, 18], 2]\n// \u2794 ["List", 5, 2]\n\n["Take", ["List", 5, 2, 10, 18], -2]\n// \u2794 ["List", 18, 10]\n'})}),(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"#drop",children:(0,l.jsx)(n.strong,{children:"Drop"})})," for a function that returns everything but the first ",(0,l.jsx)(n.code,{children:"n"})," elements."]})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"drop",children:"Drop"})}),"\n",(0,l.jsxs)(s,{name:"Drop",children:[(0,l.jsxs)(d,{name:"Drop",returns:"collection",children:[(0,l.jsx)(n.em,{children:"xs"}),":collection",", ",(0,l.jsx)(n.em,{children:"n"}),":integer"]}),(0,l.jsxs)(n.p,{children:["Return a list without the first ",(0,l.jsx)(n.code,{children:"n"})," elements."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"n"})," is negative, it returns a list without the last ",(0,l.jsx)(n.code,{children:"n"})," elements."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Drop", ["List", 5, 2, 10, 18], 2]\n// \u2794 ["List", 10, 18]\n\n["Drop", ["List", 5, 2, 10, 18], -2]\n// \u2794 ["List", 5, 2]\n'})}),(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"#take",children:(0,l.jsx)(n.strong,{children:"Take"})})," for a function that returns the first ",(0,l.jsx)(n.code,{children:"n"})," elements."]})]}),"\n",(0,l.jsx)(n.h2,{id:"changing-the-order-of-elements",children:"Changing the Order of Elements"}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"reverse",children:"Reverse"})}),"\n",(0,l.jsxs)(s,{name:"Reverse",children:[(0,l.jsxs)(d,{name:"Reverse",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection"]}),(0,l.jsx)(n.p,{children:"Return the collection in reverse order."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Reverse", ["List", 5, 2, 10, 18]]\n// \u2794 ["List", 18, 10, 2, 5]\n'})}),(0,l.jsxs)(n.p,{children:["It's equivalent to ",(0,l.jsx)(n.code,{children:'["Extract", _xs_, ["Tuple", -1, 1]]'}),"."]})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"rotateleft",children:"RotateLeft"})}),"\n",(0,l.jsxs)(s,{name:"RotateLeft",children:[(0,l.jsxs)(d,{name:"RotateLeft",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection, ",(0,l.jsx)(n.em,{children:"count"}),": integer"]}),(0,l.jsx)(n.p,{children:"Returns a collection where the elements are rotated to the left by the specified\ncount."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["RotateLeft", ["List", 5, 2, 10, 18], 2]\n// \u2794 ["List", 10, 18, 5, 2]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"rotateright",children:"RotateRight"})}),"\n",(0,l.jsxs)(s,{name:"RotateRight",children:[(0,l.jsxs)(d,{name:"RotateRight",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection, ",(0,l.jsx)(n.em,{children:"count"}),": integer"]}),(0,l.jsx)(n.p,{children:"Returns a collection where the elements are rotated to the right by the\nspecified count."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["RotateRight", ["List", 5, 2, 10, 18], 2]\n// \u2794 ["List", 10, 18, 5, 2]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"shuffle",children:"Shuffle"})}),"\n",(0,l.jsxs)(s,{name:"Shuffle",children:[(0,l.jsxs)(d,{name:"Shuffle",returns:"list",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection"]}),(0,l.jsx)(n.p,{children:"Return the collection in random order."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Shuffle", ["List", 5, 2, 10, 18]]\n// \u2794 ["List", 10, 18, 5, 5]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"sort",children:"Sort"})}),"\n",(0,l.jsxs)(s,{name:"Sort",children:[(0,l.jsxs)(d,{name:"Sort",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection"]}),(0,l.jsxs)(d,{name:"Sort",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection, ",(0,l.jsx)(n.em,{children:"order-function"}),": function"]}),(0,l.jsx)(n.p,{children:"Return the collection in sorted order."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Sort", ["List", 5, 2, 10, 18]]\n// \u2794 ["List", 2, 5, 10, 18]\n'})})]}),"\n",(0,l.jsx)(n.h2,{id:"operating-on-collections",children:"Operating On Collections"}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"filter",children:"Filter"})}),"\n",(0,l.jsxs)(s,{name:"Filter",children:[(0,l.jsxs)(d,{name:"Filter",returns:"collection",children:[(0,l.jsx)(n.em,{children:"xs"}),": collection, ",(0,l.jsx)(n.em,{children:"pred"}),": function"]}),(0,l.jsxs)(n.p,{children:["Returns a collection where ",(0,l.jsx)(n.em,{children:"pred"})," is applied to each element of the\ncollection. Only the elements for which the predicate returns ",(0,l.jsx)(n.code,{children:'"True"'})," are kept."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Filter", ["List", 5, 2, 10, 18], ["Function", ["Less", "_", 10]]]\n// \u2794 ["List", 5, 2]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"length",children:"Length"})}),"\n",(0,l.jsxs)(s,{name:"Length",children:[(0,l.jsxs)(d,{name:"Length",returns:"integer",children:[(0,l.jsx)(n.em,{children:"xs"}),": collection"]}),(0,l.jsx)(n.p,{children:"Returns the number of elements in the collection."}),(0,l.jsxs)(n.p,{children:["When the collection is a matrix (list of lists), ",(0,l.jsx)(n.code,{children:"Length"})," returns the number of\nrows."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Length", ["List", 5, 2, 10, 18]]\n// \u2794 4\n'})}),(0,l.jsxs)(n.p,{children:["When the collection is a string, ",(0,l.jsx)(n.code,{children:"Length"})," returns the number of characters in\nthe string."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Length", { "str": "Hello" }]\n// \u2794 5\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"isempty",children:"IsEmpty"})}),"\n",(0,l.jsxs)(s,{name:"IsEmpty",children:[(0,l.jsxs)(d,{name:"IsEmpty",returns:"boolean",children:[(0,l.jsx)(n.em,{children:"xs"}),": collection"]}),(0,l.jsxs)(n.p,{children:["Returns the symbol ",(0,l.jsx)(n.code,{children:"True"})," if the collection has no elements."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["IsEmpty", ["List", 5, 2, 10, 18]]\n// \u2794 "False"\n\n["IsEmpty", ["List"]]\n// \u2794 "True"\n\n["IsEmpty", "x"]\n// \u2794 "True"\n\n["IsEmpty", {str: "Hello"}]\n// \u2794 "False"\n'})})]}),"\n",(0,l.jsxs)(s,{name:"Contains",children:[(0,l.jsxs)(d,{name:"Contains",returns:"boolean",children:[(0,l.jsx)(n.em,{children:"xs"}),": collection, ",(0,l.jsx)(n.em,{children:"value"}),": any"]}),(0,l.jsxs)(n.p,{children:["Returns ",(0,l.jsx)(n.code,{children:"True"})," if the collection contains the given value, ",(0,l.jsx)(n.code,{children:"False"})," otherwise. The value is compared using the ",(0,l.jsx)(n.code,{children:"IsSame"})," function."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Contains", ["List", 5, 2, 10, 18], 10]\n// \u2794 "True"\n\n["Contains", ["List", 5, 2, 10, 18], 42]\n// \u2794 "False"\n'})})]}),"\n",(0,l.jsxs)(s,{name:"IndexWhere",children:[(0,l.jsxs)(d,{name:"IndexWhere",returns:"number",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection, ",(0,l.jsx)(n.em,{children:"predicate"}),":function"]}),(0,l.jsx)(n.p,{children:"Returns the 1-based index of the first element in the collection that satisfies the predicate, or 0 if not found."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["IndexWhere", ["List", 5, 2, 10, 18], ["Greater", "_", 9]]\n// \u2794 3\n'})})]}),"\n",(0,l.jsxs)(s,{name:"Find",children:[(0,l.jsxs)(d,{name:"Find",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection, ",(0,l.jsx)(n.em,{children:"predicate"}),":function"]}),(0,l.jsxs)(n.p,{children:["Returns the first element in the collection that satisfies the predicate, or ",(0,l.jsx)(n.code,{children:"Nothing"})," if none found."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Find", ["List", 5, 2, 10, 18], ["Function", ["Greater", "_", 9]]]\n// \u2794 10\n["Find", ["List", 5, 2, 10, 18], ["Function", ["Greater", "_", 100]]]\n// \u2794 "Nothing"\n'})})]}),"\n",(0,l.jsxs)(s,{name:"CountIf",children:[(0,l.jsxs)(d,{name:"CountIf",returns:"number",children:[(0,l.jsx)(n.em,{children:"xs"}),": ordered_collection, ",(0,l.jsx)(n.em,{children:"predicate"}),":function"]}),(0,l.jsx)(n.p,{children:"Returns the number of elements in the collection that satisfy the predicate."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["CountIf", ["List", 5, 2, 10, 18], ["Greater", "_", 5]]\n// \u2794 2\n'})})]}),"\n",(0,l.jsxs)(s,{name:"Position",children:[(0,l.jsxs)(d,{name:"Position",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"predicate"}),":function"]}),(0,l.jsx)(n.p,{children:"Returns a list of indexes of elements in the collection that satisfy the predicate."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Position", ["List", 5, 2, 10, 18], ["Function", ["Greater", "_", 5]]]\n// \u2794 ["List", 3, 4]\n'})})]}),"\n",(0,l.jsxs)(s,{name:"Exists",children:[(0,l.jsxs)(d,{name:"Exists",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"predicate"}),":function"]}),(0,l.jsxs)(n.p,{children:["Returns ",(0,l.jsx)(n.code,{children:"True"})," if any element of the collection satisfies the predicate, ",(0,l.jsx)(n.code,{children:"False"})," otherwise."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Exists", ["List", 5, 2, 10, 18], ["Function", ["Greater", "_", 15]]]\n// \u2794 "True"\n["Exists", ["List", 5, 2, 10], ["Function", ["Greater", "_", 15]]]\n// \u2794 "False"\n'})})]}),"\n",(0,l.jsxs)(s,{name:"ForAll",children:[(0,l.jsxs)(d,{name:"ForAll",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"predicate"}),":function"]}),(0,l.jsxs)(n.p,{children:["Returns ",(0,l.jsx)(n.code,{children:"True"})," if all elements of the collection satisfy the predicate, ",(0,l.jsx)(n.code,{children:"False"})," otherwise."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["ForAll", ["List", 5, 2, 10, 18], ["Function", ["Greater", "_", 0]]]\n// \u2794 "True"\n["ForAll", ["List", 5, 2, 10, 18], ["Function", ["Greater", "_", 5]]]\n// \u2794 "False"\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"map",children:"Map"})}),"\n",(0,l.jsxs)(s,{name:"Map",children:[(0,l.jsxs)(d,{name:"Map",returns:"collection",children:[(0,l.jsx)(n.em,{children:"xs"}),":collection",", ",(0,l.jsx)(n.em,{children:"f"}),":function"]}),(0,l.jsxs)(n.p,{children:["Returns a collection where ",(0,l.jsx)(n.em,{children:"f"})," is applied to each element of ",(0,l.jsx)(n.em,{children:"xs"}),"."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Map", ["List", 5, 2, 10, 18], ["Function", ["Add", "x", 1], "x"]]\n// \u2794 ["List", 6, 3, 11, 19]\n'})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Map", ["List", 5, 2, 10, 18], ["Multiply", "_", 2]]\n// \u2794 ["List", 10, 4, 20, 36]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"reduce",children:"Reduce"})}),"\n",(0,l.jsxs)(s,{name:"Reduce",children:[(0,l.jsxs)(d,{name:"Reduce",returns:"value",children:[(0,l.jsx)(n.em,{children:"xs"}),":collection",", ",(0,l.jsx)(n.em,{children:"fn"}),":function",", ",(0,l.jsx)(n.em,{children:"initial"}),":value","?"]}),(0,l.jsxs)(n.p,{children:["Returns a value by applying the reducing function ",(0,l.jsx)(n.em,{children:"fn"})," to each element\nof the collection."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Reduce"})," performs a ",(0,l.jsx)(n.em,{children:"left fold"})," operation: the reducing function is applied to the\nfirst two elements, then to the result of the previous application and the next\nelement, etc..."]}),(0,l.jsxs)(n.p,{children:["When an ",(0,l.jsx)(n.code,{children:"initial"})," value is provided, the reducing function is applied to the\ninitial value and the first element of the collection, then to the result of the\nprevious application and the next element, etc..."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'[\n  "Reduce",\n  ["List", 5, 2, 10, 18],\n  ["Function", ["Add", "_1", "_2"]],\n]\n// \u2794 35\n'})}),(0,l.jsx)(n.p,{children:"The name of a function can be used as a shorthand for a function that takes two\narguments."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Reduce", ["List", 5, 2, 10, 18], "Add"]\n// \u2794 35\n'})}),(0,l.jsx)(o,{path:"/compute-engine/reference/control-structures/#FixedPoint",children:(0,l.jsxs)(n.p,{children:["See also the ",(0,l.jsxs)(n.strong,{children:[(0,l.jsx)(n.code,{children:"FixedPoint"})," function"]})," which operates without a collection.",(0,l.jsx)(i,{name:"chevron-right-bold"})]})})]}),"\n",(0,l.jsxs)(s,{name:"Ordering",children:[(0,l.jsx)(d,{name:"Ordering",children:(0,l.jsx)(n.em,{children:"collection"})}),(0,l.jsxs)(d,{name:"Ordering",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"order-function"})]}),(0,l.jsx)(n.p,{children:"Return the indexes of the collection in sorted order."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Ordering", ["List", 5, 2, 10, 18]]\n// \u2794 ["List", 2, 1, 3, 4]\n'})}),(0,l.jsxs)(n.p,{children:["To get the values in sorted order, use ",(0,l.jsx)(n.code,{children:"Extract"}),":"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Assign", "l", ["List", 5, 2, 10, 18]]\n["Extract", "l", ["Ordering", "l"]]\n// \u2794 ["List", 2, 5, 10, 18]\n\n// Same as Sort:\n["Sort", "l"]\n// \u2794 ["List", 2, 5, 10, 18]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"tally",children:"Tally"})}),"\n",(0,l.jsxs)(s,{name:"Tally",children:[(0,l.jsxs)(d,{name:"Tally",returns:"tuple<elements:list, counts:list>",children:[(0,l.jsx)(n.em,{children:"xs"}),":collection"]}),(0,l.jsx)(n.p,{children:"Evaluate to a tuple of two lists:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The first list contains the unique elements of the collection."}),"\n",(0,l.jsx)(n.li,{children:"The second list contains the number of times each element appears in the\ncollection."}),"\n"]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Tally", ["List", 5, 2, 10, 18, 5, 2, 5]]\n// \u2794 ["Tuple", ["List", 5, 2, 10, 18], ["List", 3, 2, 1, 1]]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"zip",children:"Zip"})}),"\n",(0,l.jsxs)(s,{name:"Zip",children:[(0,l.jsxs)(d,{name:"Zip",children:[(0,l.jsx)(n.em,{children:"collection-1"}),", ",(0,l.jsx)(n.em,{children:"collection-2"}),", ..."]}),(0,l.jsx)(n.p,{children:"Returns a collection of tuples where the first element of each tuple is the\nfirst element of the first collection, the second element of each tuple is the\nsecond element of the second collection, etc."}),(0,l.jsx)(n.p,{children:"The length of the resulting collection is the length of the shortest collection."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Zip", ["List", 1, 2, 3], ["List", 4, 5, 6]]\n// \u2794 ["List", ["Tuple", 1, 4], ["Tuple", 2, 5], ["Tuple", 3, 6]]\n'})})]}),"\n",(0,l.jsxs)(s,{name:"Partition",children:[(0,l.jsxs)(d,{name:"Partition",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"count"}),":integer"]}),(0,l.jsxs)(d,{name:"Partition",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"predicate"}),":function"]}),(0,l.jsx)(n.p,{children:"Partitions a collection into groups. If an integer is given, splits into that many groups. If a predicate function is given, splits into two groups: elements for which the predicate is true, and those for which it is false."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Partition", ["List", 1, 2, 3, 4, 5, 6], 2]\n// \u2794 ["List", ["List", 1, 2, 3], ["List", 4, 5, 6]]\n["Partition", ["List", 1, 2, 3, 4, 5, 6], ["Function", ["Even", "_"]]]\n// \u2794 ["List", ["List", 2, 4, 6], ["List", 1, 3, 5]]\n'})})]}),"\n",(0,l.jsxs)(s,{name:"Chunk",children:[(0,l.jsxs)(d,{name:"Chunk",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"count"}),":integer"]}),(0,l.jsxs)(n.p,{children:["Splits the collection into ",(0,l.jsx)(n.code,{children:"count"})," nearly equal-sized chunks."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Chunk", ["List", 1, 2, 3, 4, 5], 2]\n// \u2794 ["List", ["List", 1, 2, 3], ["List", 4, 5]]\n'})})]}),"\n",(0,l.jsxs)(s,{name:"GroupBy",children:[(0,l.jsxs)(d,{name:"GroupBy",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"function"}),":function"]}),(0,l.jsx)(n.p,{children:"Partitions the collection into groups according to the value of the grouping function applied to each element. Returns a dictionary mapping group keys to lists of elements."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["GroupBy", ["List", 1, 2, 3, 4], ["Function", ["Even", "_"]]]\n// \u2794 ["Dictionary", ["Tuple", "True", ["List", 2, 4]], ["Tuple", "False", ["List", 1, 3]]]\n'})})]}),"\n",(0,l.jsx)(n.h2,{id:"transforming-collections",children:"Transforming Collections"}),"\n",(0,l.jsx)(n.p,{children:"This section contains functions whose argument is a collection and which return\na collection made of a subset of the elements of the input."}),"\n",(0,l.jsx)(n.p,{children:"Collections are immutable. These functions do not modify the input collection, but\nreturn a new collection."}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"exclude",children:"Exclude"})}),"\n",(0,l.jsxs)(s,{name:"Exclude",children:[(0,l.jsxs)(d,{name:"Exclude",returns:"collection",children:[(0,l.jsx)(n.em,{children:"xs"}),":collection",",, ",(0,l.jsx)(n.em,{children:"index"}),":integer"]}),(0,l.jsxs)(d,{name:"Exclude",returns:"collection",children:[(0,l.jsx)(n.em,{children:"xs"}),":collection",", ",(0,l.jsx)(n.em,{children:"indexes"}),":collection","<integer>"]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Exclude"})," is the opposite of ",(0,l.jsx)(n.code,{children:"Extract"}),". It returns a list of the elements that\nare not at the specified index."]}),(0,l.jsx)(n.p,{children:"The order of the elements is preserved."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Exclude", ["List", 5, 2, 10, 18], 2]\n// \u2794 ["List", 5, 10, 18]\n\n["Exclude", ["List", 5, 2, 10, 18], -2, 1]\n// \u2794 ["List", 2, 18]\n'})}),(0,l.jsxs)(n.p,{children:["When ",(0,l.jsx)(n.code,{children:"indexes"})," is a list, it is used to specify the indexes of the elements to\nbe dropped."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Exclude", ["List", 5, 2, 10, 18], ["List", 2, 3]]\n// \u2794 ["List", 5, 2]\n\n["Exclude", ["List", 5, 2, 10, 18], ["List", -2, 1]]\n// \u2794 ["List", 2, 18]\n'})}),(0,l.jsx)(n.p,{children:"An index may be repeated, but the corresponding element will only be dropped\nonce."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Exclude", ["List", 5, 2, 10, 18], ["List", 3, 3, 1]]\n// \u2794 ["List", 2, 18]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"extract",children:"Extract"})}),"\n",(0,l.jsxs)(s,{name:"Extract",children:[(0,l.jsxs)(d,{name:"Extract",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"index"})]}),(0,l.jsxs)(d,{name:"Extract",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"index1"}),", ",(0,l.jsx)(n.em,{children:"index2"})]}),(0,l.jsxs)(d,{name:"Extract",children:[(0,l.jsx)(n.em,{children:"collection"}),", ",(0,l.jsx)(n.em,{children:"range"})]}),(0,l.jsx)(n.p,{children:"Returns a list of the elements at the specified indexes."}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Extract"})," is a flexible function that can be used to extract a single element, a\nrange of elements, or a list of elements."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Extract"})," always return a list, even if the result is a single element. If no\nelements match, an empty list is returned."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Extract", ["List", 5, 2, 10, 18], 2]\n// \u2794 ["List", 10]\n\n["Extract", ["List", 5, 2, 10, 18], -2, 1]\n// \u2794 ["List", 10, 5]\n\n\n["Extract", ["List", 5, 2, 10, 18], 17]\n// \u2794 ["List"]\n'})}),(0,l.jsxs)(n.p,{children:["When using a range, it is specified as a ",(0,l.jsx)(n.a,{href:"#Range",children:(0,l.jsx)(n.code,{children:"Range"})})," expression."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'// Elements 2 to 3\n["Extract", ["List", 5, 2, 10, 18], ["Range", 2, 4]]\n// \u2794 ["List", 2, 10, 18]\n\n// From start to end, every other element\n["Extract", ["List", 5, 2, 10, 18], ["Range", 1, -1, 2]]\n// \u2794 ["List", 5, 10]\n'})}),(0,l.jsx)(n.p,{children:"The elements are returned in the order in which they're specified. Using\nnegative indexes (or ranges) reverses the order of the elements."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'// From last to first = reverse\n["Extract", ["List", 5, 2, 10, 18], ["Range", -1, 1]]\n// \u2794 ["List", 18, 10, 2, 5]\n\n// From last to first = reverse\n["Extract", ""desserts"", ["Range", -1, 1]]\n// \u2794 ""stressed""\n'})}),(0,l.jsx)(n.p,{children:"An index can be repeated to extract the same element multiple times."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Extract", ["List", 5, 2, 10, 18], 3, 3, 1]\n// \u2794 ["List", 10, 10, 5]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"join",children:"Join"})}),"\n",(0,l.jsxs)(s,{name:"Join",children:[(0,l.jsxs)(d,{name:"Join",returns:"list",children:["...collections",":collection"]}),(0,l.jsxs)(d,{name:"Join",returns:"set",children:["...sets",":set"]}),(0,l.jsxs)(n.p,{children:["If the collections are of different types, the result is a ",(0,l.jsx)(n.code,{children:"List"}),"\ncontaining the elements of the first collection followed\nby the elements of the second collection."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Join", ["List", 5, 2, 10, 18], ["List", 1, 2, 3]]\n// \u2794 ["List", 5, 2, 10, 18, 1, 2, 3]\n'})}),(0,l.jsxs)(n.p,{children:["If the collections are all sets , the result is a ",(0,l.jsx)(n.code,{children:"Set"})," of the\nelements of the collections."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Join", ["Set", 5, 2, 10, 18], ["Set", 1, 2, 3]]\n// \u2794 ["Set", 5, 2, 10, 18, 1, 3]\n'})})]}),"\n",(0,l.jsx)("nav",{className:"hidden",children:(0,l.jsx)(n.h3,{id:"unique",children:"Unique"})}),"\n",(0,l.jsxs)(s,{name:"Unique",children:[(0,l.jsxs)(d,{name:"Unique",returns:"collection",children:[(0,l.jsx)(n.em,{children:"xs"}),": collection"]}),(0,l.jsxs)(n.p,{children:["Returns a list of the elements in ",(0,l.jsx)(n.code,{children:"xs"})," without duplicates."]}),(0,l.jsxs)(n.p,{children:["This is equivalent to the first element of the result of ",(0,l.jsx)(n.code,{children:"Tally"}),":\n",(0,l.jsx)(n.code,{children:'["First", ["Tally", xs]]'}),"."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Unique", ["List", 5, 2, 10, 18, 5, 2, 5]]\n// \u2794 ["List", 5, 2, 10, 18]\n'})})]}),"\n",(0,l.jsx)(n.h2,{id:"converting-lazy-collections-to-eager-collections",children:"Converting Lazy Collections to Eager Collections"}),"\n",(0,l.jsxs)("nav",{className:"hidden",children:[(0,l.jsx)(n.h3,{id:"listfrom",children:"ListFrom"}),(0,l.jsx)(n.h3,{id:"setfrom",children:"SetFrom"}),(0,l.jsx)(n.h3,{id:"tuplefrom",children:"TupleFrom"})]}),"\n",(0,l.jsxs)(s,{children:[(0,l.jsxs)(d,{name:"ListFrom",returns:"list",children:[(0,l.jsx)(n.em,{children:"xs"}),": collection"]}),(0,l.jsxs)(d,{name:"SetFrom",returns:"set",children:[(0,l.jsx)(n.em,{children:"xs"}),": collection"]}),(0,l.jsxs)(d,{name:"TupleFrom",returns:"tuple",children:[(0,l.jsx)(n.em,{children:"xs"}),": collection"]}),(0,l.jsxs)(n.p,{children:["Returns an eager list, set or tuple containing the elements of the collection ",(0,l.jsx)(n.code,{children:"xs"}),"."]}),(0,l.jsxs)(n.p,{children:["The collection ",(0,l.jsx)(n.code,{children:"xs"})," should be a finite collection."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["ListFrom", ["Range", 1, 3]]\n// \u2794 ["List", 1, 2, 3]\n\n["SetFrom", ["Range", 1, 3]]\n// \u2794 ["Set", 1, 2, 3]\n\n["TupleFrom", ["Range", 1, 3]]\n// \u2794 ["Tuple", 1, 2, 3]\n'})})]}),"\n",(0,l.jsxs)("nav",{className:"hidden",children:[(0,l.jsx)(n.h3,{id:"recordfrom",children:"RecordFrom"}),(0,l.jsx)(n.h3,{id:"mapfrom",children:"MapFrom"})]}),"\n",(0,l.jsxs)(s,{children:[(0,l.jsxs)(d,{name:"RecordFrom",returns:"record",children:[(0,l.jsx)(n.em,{children:"xs"}),": collection"]}),(0,l.jsxs)(d,{name:"MapFrom",returns:"map",children:[(0,l.jsx)(n.em,{children:"xs"}),": collection"]}),(0,l.jsxs)(n.p,{children:["Returns a record or map containing the elements of the collection ",(0,l.jsx)(n.code,{children:"xs"}),"."]}),(0,l.jsxs)(n.p,{children:["The collection ",(0,l.jsx)(n.code,{children:"xs"})," should be a finite collection of key-value pairs, each key being\na string."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",metastring:"example",children:'["RecordFrom", ["List", ["Tuple", "a", 1], ["Tuple", "b", 2]]]\n// \u2794 ["Record", ["Tuple", "a", 1], ["Tuple", "b", 2]]\n\n["MapFrom", ["List", ["Tuple", "a", 1], ["Tuple", "b", 2]]]\n// \u2794 ["Map", ["Tuple", "a", 1], ["Tuple", "b", 2]]\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(6540);const l={},t=i.createContext(l);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);