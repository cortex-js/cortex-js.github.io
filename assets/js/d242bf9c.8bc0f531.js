"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[9627],{1021:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"mathfield/menu","title":"Menu","description":"The Mathfield Context Menu provides a set of commands to perform common","source":"@site/docs/mathfield/13-menu.md","sourceDirName":"mathfield","slug":"/mathfield/guides/menu/","permalink":"/mathfield/guides/menu/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1744999580000,"sidebarPosition":13,"frontMatter":{"title":"Menu","slug":"/mathfield/guides/menu/"},"sidebar":"docSidebar","previous":{"title":"Customize","permalink":"/mathfield/guides/customizing/"},"next":{"title":"Virtual Keyboard","permalink":"/mathfield/guides/virtual-keyboard/"}}');var s=t(4848),l=t(8453);const d={title:"Menu",slug:"/mathfield/guides/menu/"},c="Menu",r={},o=[{value:"Filtering Menu Items",id:"filtering-menu-items",level:2},{value:"Replacing the Menu",id:"replacing-the-menu",level:2},{value:"Adding a Menu Item",id:"adding-a-menu-item",level:2},{value:"Listening to Menu Events",id:"listening-to-menu-events",level:2},{value:"Controling the Menu Visibility",id:"controling-the-menu-visibility",level:2}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components},{Intro:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Intro",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"menu",children:"Menu"})}),"\n",(0,s.jsx)(t,{children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Mathfield Context Menu"})," provides a set of commands to perform common\noperations on a mathfield."]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"To display the context menu:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Right-click on the mathfield"}),"\n",(0,s.jsx)(n.li,{children:"Long press on the mathfield"}),"\n",(0,s.jsx)(n.li,{children:"Tap on the menu toggle (hamburger icon) in the mathfield"}),"\n",(0,s.jsxs)(n.li,{children:["Press the ",(0,s.jsx)("kbd",{children:"ALT/OPTION"}),"+",(0,s.jsx)("kbd",{children:"SPACE"}),",\n",(0,s.jsx)("kbd",{children:"FN"}),"+",(0,s.jsx)("kbd",{children:"F10"})," or ",(0,s.jsx)("kbd",{children:"MENU"})," key on a physical keyboard"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The context menu is fully accessible. It can be navigated using the\nkeyboard, and the menu items are announced by screen readers."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"To navigate the context menu"}),", use the arrow keys."]}),"\n",(0,s.jsx)(n.p,{children:"An item can also be selected by typing some of the letters of its label."}),"\n",(0,s.jsx)(n.p,{children:"The default context menu has a set of commands that are useful for most\napplications, but you can customize the menu by adding or removing commands\nas needed."}),"\n",(0,s.jsx)(n.h2,{id:"filtering-menu-items",children:"Filtering Menu Items"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"To select which menu items are displayed"}),", use the ",(0,s.jsx)(n.code,{children:"filter()"})," method on\nthe ",(0,s.jsx)(n.code,{children:"mf.menuItems"})," property."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, to omit all commands related to the Compute Engine (such as\n",(0,s.jsx)(n.strong,{children:"Evaluate"}),", ",(0,s.jsx)(n.strong,{children:"Simplify"})," and ",(0,s.jsx)(n.strong,{children:"Solve"}),"), you can filter the menu items by\ntheir id:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"example",children:"mf.menuItems = mf.menuItems.filter(item => !item.id.startWith('ce-'));\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"mf.menuItems"})," property is a read-only property. It returns a copy of the\noriginal array of menu items."]}),(0,s.jsxs)(n.p,{children:["Do not modify the value of the elements of ",(0,s.jsx)(n.code,{children:"mf.menuItems"})," directly. This will\nresult in a runtime error."]}),(0,s.jsxs)(n.p,{children:["For example, ",(0,s.jsx)(n.strong,{children:"do not"})," use ",(0,s.jsx)(n.code,{children:"mf.menuItems[0].visible = false"}),"."]})]}),"\n",(0,s.jsx)(n.h2,{id:"replacing-the-menu",children:"Replacing the Menu"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"To replace the context menu with your own"}),", set the ",(0,s.jsx)(n.code,{children:"mf.menuItems"})," property."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"menuItems"})," property is an array of menu items."]}),"\n",(0,s.jsx)(n.p,{children:"Each menu item is an object with the following properties:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"type"}),": one of ",(0,s.jsx)(n.code,{children:'"command"'}),", ",(0,s.jsx)(n.code,{children:'"divider"'}),", ",(0,s.jsx)(n.code,{children:'"submenu"'}),", ",(0,s.jsx)(n.code,{children:'"checkbox"'}),", ",(0,s.jsx)(n.code,{children:'"radio"'}),".\nThe default is ",(0,s.jsx)(n.code,{children:'"command"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"label"}),": The label to display for the menu item. This can be a string\nliteral or a function that returns a string. If a function is provided, it\nwill be called to update the label whenever the menu is displayed or when the\nkeyboard modifiers change. The value of the string is interpreted as HTML markup."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ariaLabel"})," and ",(0,s.jsx)(n.code,{children:"ariaDetails"}),": If provided, these will be used to set\nthe ",(0,s.jsx)(n.code,{children:"aria-label"})," and ",(0,s.jsx)(n.code,{children:"aria-details"})," attributes of the menu item, which can\nbe used by screen readers. Like the ",(0,s.jsx)(n.code,{children:"label"})," property they can be either a\nstring literal or a function that returns a string."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"visible"}),", ",(0,s.jsx)(n.code,{children:"enabled"}),", ",(0,s.jsx)(n.code,{children:"checked"})," are status flags that can be set to\n",(0,s.jsx)(n.code,{children:"true"})," or ",(0,s.jsx)(n.code,{children:"false"})," to control the visibility, enabled state and checked\nstate of the menu item."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the menu item. This is the value that will\nbe passed to the ",(0,s.jsx)(n.code,{children:"menu-select"})," event when the menu item is selected."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"}),": An arbitrary data payload associated with the menu item, if any."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"submenu"}),": If the type is ",(0,s.jsx)(n.code,{children:'"submenu"'}),", an array of menu items to\ndisplay when the menu item is selected."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onMenuSelect"}),": A function handler that is called when the menu item is\nselected."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"example",children:"mf. menuItems = [\n  {\n    label: 'Copy',\n    onMenuSelect: () => console.log('Copy')\n  },\n  {\n    label: 'Paste',\n    onMenuSelect: () => console.log('Paste')\n  },\n  {\n    type: 'divider'\n  },\n  {\n    label: 'Submenu',\n    submenu: [\n      {\n        label: 'Submenu 1',\n        onMenuSelect: () => console.log('Submenu 1')\n      },\n      {\n        label: 'Submenu 2',\n        onMenuSelect: () => console.log('Submenu 2')\n      }\n    ]\n  },\n];\n"})}),"\n",(0,s.jsx)(n.h2,{id:"adding-a-menu-item",children:"Adding a Menu Item"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"To add a menu item"}),", use the spread operator (",(0,s.jsx)(n.code,{children:"..."}),") to create a new array\nof menu items, and add the new menu item to the copy of the original array.:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'mf.menuItems = [\n  {\n    label: "Cancel",\n    visible: () =>\n      mf.isSelectionEditable && !mf.selectionIsCollapsed,\n    onMenuSelect: () => mf.insert("\\\\cancel{#@}"),\n  },\n  ...mf.menuItems,\n];\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, a new menu item for a ",(0,s.jsx)(n.strong,{children:"Cancel"})," command is added at the\nbeginning of the menu."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"visible"})," handler checks that the selection is editable and not collapsed."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"onMenuSelect"})," handler replaces the selection with a ",(0,s.jsx)(n.code,{children:"\\cancel{}"})," command.\nThe ",(0,s.jsx)(n.code,{children:"#@"})," token is replaced with the current selection, effectively wrapping\nthe selection in a ",(0,s.jsx)(n.code,{children:"\\cancel{}"})," command."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"To add a menu item at a specific position"}),", use the ",(0,s.jsx)(n.code,{children:"findIndex()"})," method\nto find the index of the menu item you want to insert relative to."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const isNonEmptySelection = () => mf.getValue(mf.selection).length > 0;\nconst getCancelArgument = () => {\n  const selection = mf.getValue(mf.selection);\n  // Is the selection a \\cancel{...} command?\n  const match = selection.match(/^\\\\cancel{([^}]*)}$/);\n  return match ? match[1] : '';\n};\n\nconst menuItems = mf.menuItems;\n\n// Find the index of the \"Cut\" menu item\nconst index = menuItems.findIndex(item => item.id === 'cut');\nmf.menuItems = [\n  // Add the new menu item before the \"Cut\" menu item\n  ...menuItems.slice(0, index),\n\n  // Add the new commands\n  { type: 'divider' },\n  {\n    label: \"Cancel\",\n    visible: () =>\n      mf.isSelectionEditable && isNonEmptySelection() && !getCancelArgument(),\n    onMenuSelect: () => \n      mf.insert(\"\\\\cancel{#@}\", { selectionMode: 'item' }),\n  },\n  {\n    label: \"Uncancel\",\n    visible: () => mf.isSelectionEditable && getCancelArgument(),\n    onMenuSelect: () => \n      mf.insert(getCancelArgument(), { selectionMode: 'item' }),\n  },\n  { type: 'divider' },\n\n  // Add the rest of the menu items after the \"Cut\" menu item\n  ...menuItems.slice(index)\n];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, new menu items are added after the ",(0,s.jsx)(n.strong,{children:"Cut"})," menu item.\nWe make a new array of menu items by slicing the original array into two parts:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The first part is the menu items before the ",(0,s.jsx)(n.strong,{children:"Cut"})," item."]}),"\n",(0,s.jsxs)(n.li,{children:["The second part is the menu items after the ",(0,s.jsx)(n.strong,{children:"Cut"})," item.\nThe new menu items are added in between the two parts."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We add a divider before and after the new menu items, which can be useful\nto group related menu items together."}),"\n",(0,s.jsxs)(n.p,{children:["We add two new menu items: ",(0,s.jsx)(n.strong,{children:"Cancel"})," and ",(0,s.jsx)(n.strong,{children:"Uncancel"}),". The ",(0,s.jsx)(n.strong,{children:"Cancel"})," item is\nonly visible when the selection is editable, not empty and not already\na cancel command. The ",(0,s.jsx)(n.strong,{children:"Uncancel"})," item is only visible when the selection\nis editable and is a cancel command. At most one of the two commands will\nbe visible, allowing the user to either cancel or uncancel the selection."]}),"\n",(0,s.jsx)(n.h2,{id:"listening-to-menu-events",children:"Listening to Menu Events"}),"\n",(0,s.jsxs)(n.p,{children:["When a menu item is selected, its ",(0,s.jsx)(n.code,{children:"onMenuSelect"})," handler is invoked and\na ",(0,s.jsx)(n.code,{children:"menu-select"}),"  custom event is dispatched."]}),"\n",(0,s.jsxs)(n.p,{children:["It is generally simpler to provide a ",(0,s.jsx)(n.code,{children:"onMenuSelect"})," handler for each\nmenu item, but you can also listen to the ",(0,s.jsx)(n.code,{children:"menu-select"})," event to handle\nall menu item selections in a single event handler."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"detail"})," property of the ",(0,s.jsx)(n.code,{children:"menu-select"})," event contains the following properties:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": The id of the menu item that was selected."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"label"}),": The label of the menu item that was selected."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"}),": The data payload associated with the menu item, if any."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"modifiers"}),": An object containing the state of the modifier keys when the\nmenu item was selected. The following properties are defined:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"altKey"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ctrlKey"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"metaKey"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"shiftKey"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The example above which use ",(0,s.jsx)(n.code,{children:"onMenuSelect"})," can be rewritten to use the\n",(0,s.jsx)(n.code,{children:"menu-select"})," event instead. Note that in this case, the menu items have an\n",(0,s.jsx)(n.code,{children:"id"})," property, which is used to identify the menu item that was selected."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:"example",children:"mf. menuItems = [\n  {\n    label: 'Copy',\n    id: 'copy'\n  },\n  {\n    label: 'Paste',\n    id: 'paste'\n  },\n  {\n    type: 'divider'\n  },\n  {\n    label: 'Submenu',\n    submenu: [\n      {\n        label: 'Submenu 1',\n        id: 'submenu-1'\n      },\n      {\n        label: 'Submenu 2',\n        id: 'submenu-2'\n      }\n    ]\n  },\n];\n\nmf.addEventListener('menu-select', (event) => \n  console.log('Menu item selected:', event.detail.id)\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"controling-the-menu-visibility",children:"Controling the Menu Visibility"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"To hide the menu toggle button"})," use the following CSS:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",metastring:"example",children:"math-field::part(menu-toggle) {\n  display: none;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Even when the menu toggle button is hidden, the context menu is still accessible\nwith a keyboard shortcut, right-click or long press."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"To prevent the menu from being displayed"}),", set the\n",(0,s.jsx)(n.code,{children:"mf.menuItems"})," property to an empty array:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:"example",children:"mf.menuItems = [];\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>c});var i=t(6540);const s={},l=i.createContext(s);function d(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);