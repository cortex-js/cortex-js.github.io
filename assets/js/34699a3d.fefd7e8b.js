"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[1354],{6256:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"compute-engine/api","title":"Compute Engine API Reference","description":"Modules","source":"@site/docs/compute-engine/api.md","sourceDirName":"compute-engine","slug":"/compute-engine/api/","permalink":"/compute-engine/api/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1738944332000,"frontMatter":{"title":"Compute Engine API Reference","sidebar_label":"API Reference","slug":"/compute-engine/api/","toc_max_heading_level":3},"sidebar":"docSidebar","previous":{"title":"MathJSON Format","permalink":"/math-json/"},"next":{"title":"MathJSON Standard Library","permalink":"/compute-engine/standard-library/"}}');var l=i(4848),d=i(8453),r=i(7471);const o={title:"Compute Engine API Reference",sidebar_label:"API Reference",slug:"/compute-engine/api/",toc_max_heading_level:3},a=void 0,c={},t=[{value:"Modules",id:"modules",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"RuntimeSignalCode",id:"runtimesignalcode",level:3},{value:"SignalCode",id:"signalcode",level:3},{value:"SignalMessage",id:"signalmessage",level:3},{value:"SignalOrigin",id:"signalorigin",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"url?",id:"url",level:5},{value:"SignalOrigin.url?",id:"signaloriginurl",level:5},{value:"source?",id:"source",level:5},{value:"SignalOrigin.source?",id:"signaloriginsource",level:5},{value:"offset?",id:"offset",level:5},{value:"SignalOrigin.offset?",id:"signaloriginoffset",level:5},{value:"line?",id:"line",level:5},{value:"SignalOrigin.line?",id:"signaloriginline",level:5},{value:"column?",id:"column",level:5},{value:"SignalOrigin.column?",id:"signalorigincolumn",level:5},{value:"around?",id:"around",level:5},{value:"SignalOrigin.around?",id:"signaloriginaround",level:5},{value:"Signal",id:"signal",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"severity?",id:"severity",level:5},{value:"Signal.severity?",id:"signalseverity",level:5},{value:"message",id:"message",level:5},{value:"Signal.message",id:"signalmessage-1",level:5},{value:"head?",id:"head",level:5},{value:"Signal.head?",id:"signalhead",level:5},{value:"origin?",id:"origin",level:5},{value:"Signal.origin?",id:"signalorigin-1",level:5},{value:"ErrorSignal",id:"errorsignal",level:3},{value:"Type declaration",id:"type-declaration-2",level:4},{value:"severity",id:"severity-1",level:5},{value:"ErrorSignal.severity",id:"errorsignalseverity",level:5},{value:"WarningSignal",id:"warningsignal",level:3},{value:"Type declaration",id:"type-declaration-3",level:4},{value:"severity",id:"severity-2",level:5},{value:"WarningSignal.severity",id:"warningsignalseverity",level:5},{value:"WarningSignalHandler()",id:"warningsignalhandler",level:3},{value:"warnings",id:"warnings",level:5},{value:"ErrorCode",id:"errorcode",level:3},{value:"Compute Engine",id:"compute-engine",level:2},{value:"SimplifyOptions",id:"simplifyoptions",level:3},{value:"Type declaration",id:"type-declaration-4",level:4},{value:"rules?",id:"rules",level:5},{value:"SimplifyOptions.rules?",id:"simplifyoptionsrules",level:5},{value:"costFunction()?",id:"costfunction",level:5},{value:"SimplifyOptions.costFunction()?",id:"simplifyoptionscostfunction",level:5},{value:"expr",id:"expr",level:6},{value:"AngularUnit",id:"angularunit",level:3},{value:"ArrayValue",id:"arrayvalue",level:3},{value:"AssignValue",id:"assignvalue",level:3},{value:"JsonSerializationOptions",id:"jsonserializationoptions",level:3},{value:"Type declaration",id:"type-declaration-5",level:4},{value:"prettify",id:"prettify",level:5},{value:"JsonSerializationOptions.prettify",id:"jsonserializationoptionsprettify",level:5},{value:"exclude",id:"exclude",level:5},{value:"JsonSerializationOptions.exclude",id:"jsonserializationoptionsexclude",level:5},{value:"shorthands",id:"shorthands",level:5},{value:"JsonSerializationOptions.shorthands",id:"jsonserializationoptionsshorthands",level:5},{value:"metadata",id:"metadata",level:5},{value:"JsonSerializationOptions.metadata",id:"jsonserializationoptionsmetadata",level:5},{value:"repeatingDecimal",id:"repeatingdecimal",level:5},{value:"JsonSerializationOptions.repeatingDecimal",id:"jsonserializationoptionsrepeatingdecimal",level:5},{value:"fractionalDigits",id:"fractionaldigits",level:5},{value:"JsonSerializationOptions.fractionalDigits",id:"jsonserializationoptionsfractionaldigits",level:5},{value:"Scope",id:"scope",level:3},{value:"RuntimeScope",id:"runtimescope",level:3},{value:"Type declaration",id:"type-declaration-6",level:4},{value:"parentScope?",id:"parentscope",level:5},{value:"RuntimeScope.parentScope?",id:"runtimescopeparentscope",level:5},{value:"ids?",id:"ids",level:5},{value:"RuntimeScope.ids?",id:"runtimescopeids",level:5},{value:"assumptions",id:"assumptions",level:5},{value:"RuntimeScope.assumptions",id:"runtimescopeassumptions",level:5},{value:"Boxed Expression",id:"boxed-expression",level:2},{value:"BoxedExpression",id:"boxedexpression",level:3},{value:"Function Expression",id:"function-expression",level:4},{value:"BoxedExpression.ops",id:"boxedexpressionops",level:5},{value:"BoxedExpression.nops",id:"boxedexpressionnops",level:5},{value:"BoxedExpression.op1",id:"boxedexpressionop1",level:5},{value:"BoxedExpression.op2",id:"boxedexpressionop2",level:5},{value:"BoxedExpression.op3",id:"boxedexpressionop3",level:5},{value:"Numeric Expression",id:"numeric-expression",level:4},{value:"BoxedExpression.isNaN",id:"boxedexpressionisnan",level:5},{value:"BoxedExpression.isInfinity",id:"boxedexpressionisinfinity",level:5},{value:"BoxedExpression.isFinite",id:"boxedexpressionisfinite",level:5},{value:"BoxedExpression.isEven",id:"boxedexpressioniseven",level:5},{value:"BoxedExpression.isOdd",id:"boxedexpressionisodd",level:5},{value:"BoxedExpression.numericValue",id:"boxedexpressionnumericvalue",level:5},{value:"BoxedExpression.isNumberLiteral",id:"boxedexpressionisnumberliteral",level:5},{value:"BoxedExpression.re",id:"boxedexpressionre",level:5},{value:"BoxedExpression.im",id:"boxedexpressionim",level:5},{value:"BoxedExpression.bignumRe",id:"boxedexpressionbignumre",level:5},{value:"BoxedExpression.bignumIm",id:"boxedexpressionbignumim",level:5},{value:"BoxedExpression.sgn",id:"boxedexpressionsgn",level:5},{value:"BoxedExpression.isPositive",id:"boxedexpressionispositive",level:5},{value:"BoxedExpression.isNonNegative",id:"boxedexpressionisnonnegative",level:5},{value:"BoxedExpression.isNegative",id:"boxedexpressionisnegative",level:5},{value:"BoxedExpression.isNonPositive",id:"boxedexpressionisnonpositive",level:5},{value:"Other",id:"other",level:4},{value:"BoxedExpression.engine",id:"boxedexpressionengine",level:5},{value:"BoxedExpression.toMathJson()",id:"boxedexpressiontomathjson",level:5},{value:"options?",id:"options",level:6},{value:"BoxedExpression.toLatex()",id:"boxedexpressiontolatex",level:5},{value:"options?",id:"options-1",level:6},{value:"BoxedExpression.verbatimLatex?",id:"boxedexpressionverbatimlatex",level:5},{value:"BoxedExpression.isCanonical",id:"boxedexpressioniscanonical",level:5},{value:"Get Signature",id:"get-signature",level:6},{value:"BoxedExpression.isStructural",id:"boxedexpressionisstructural",level:5},{value:"Get Signature",id:"get-signature-1",level:6},{value:"BoxedExpression.json",id:"boxedexpressionjson",level:5},{value:"BoxedExpression.scope",id:"boxedexpressionscope",level:5},{value:"parentScope?",id:"parentscope-1",level:6},{value:"scope.parentScope?",id:"scopeparentscope",level:6},{value:"ids?",id:"ids-1",level:6},{value:"scope.ids?",id:"scopeids",level:6},{value:"assumptions",id:"assumptions-1",level:6},{value:"scope.assumptions",id:"scopeassumptions",level:6},{value:"BoxedExpression.latex",id:"boxedexpressionlatex",level:5},{value:"Get Signature",id:"get-signature-2",level:6},{value:"BoxedExpression.getSubexpressions()",id:"boxedexpressiongetsubexpressions",level:5},{value:"name",id:"name",level:6},{value:"BoxedExpression.subexpressions",id:"boxedexpressionsubexpressions",level:5},{value:"BoxedExpression.symbols",id:"boxedexpressionsymbols",level:5},{value:"BoxedExpression.unknowns",id:"boxedexpressionunknowns",level:5},{value:"BoxedExpression.freeVariables",id:"boxedexpressionfreevariables",level:5},{value:"BoxedExpression.errors",id:"boxedexpressionerrors",level:5},{value:"BoxedExpression.operator",id:"boxedexpressionoperator",level:5},{value:"BoxedExpression.isPure",id:"boxedexpressionispure",level:5},{value:"BoxedExpression.isConstant",id:"boxedexpressionisconstant",level:5},{value:"BoxedExpression.canonical",id:"boxedexpressioncanonical",level:5},{value:"Get Signature",id:"get-signature-3",level:6},{value:"BoxedExpression.structural",id:"boxedexpressionstructural",level:5},{value:"Get Signature",id:"get-signature-4",level:6},{value:"BoxedExpression.subs()",id:"boxedexpressionsubs",level:5},{value:"sub",id:"sub",level:6},{value:"options?",id:"options-2",level:6},{value:"canonical",id:"canonical",level:6},{value:"BoxedExpression.map()",id:"boxedexpressionmap",level:5},{value:"fn",id:"fn",level:6},{value:"options?",id:"options-3",level:6},{value:"canonical",id:"canonical-1",level:6},{value:"recursive",id:"recursive",level:6},{value:"BoxedExpression.replace()",id:"boxedexpressionreplace",level:5},{value:"rules",id:"rules-1",level:6},{value:"options?",id:"options-4",level:6},{value:"BoxedExpression.has()",id:"boxedexpressionhas",level:5},{value:"v",id:"v",level:6},{value:"BoxedExpression.numerator",id:"boxedexpressionnumerator",level:5},{value:"Get Signature",id:"get-signature-5",level:6},{value:"BoxedExpression.denominator",id:"boxedexpressiondenominator",level:5},{value:"Get Signature",id:"get-signature-6",level:6},{value:"BoxedExpression.numeratorDenominator",id:"boxedexpressionnumeratordenominator",level:5},{value:"Get Signature",id:"get-signature-7",level:6},{value:"BoxedExpression.match()",id:"boxedexpressionmatch",level:5},{value:"pattern",id:"pattern",level:6},{value:"options?",id:"options-5",level:6},{value:"BoxedExpression.isFunctionExpression",id:"boxedexpressionisfunctionexpression",level:5},{value:"BoxedExpression.toNumericValue()",id:"boxedexpressiontonumericvalue",level:5},{value:"BoxedExpression.neg()",id:"boxedexpressionneg",level:5},{value:"BoxedExpression.inv()",id:"boxedexpressioninv",level:5},{value:"BoxedExpression.abs()",id:"boxedexpressionabs",level:5},{value:"BoxedExpression.add()",id:"boxedexpressionadd",level:5},{value:"rhs",id:"rhs",level:6},{value:"BoxedExpression.sub()",id:"boxedexpressionsub",level:5},{value:"rhs",id:"rhs-1",level:6},{value:"BoxedExpression.mul()",id:"boxedexpressionmul",level:5},{value:"rhs",id:"rhs-2",level:6},{value:"BoxedExpression.div()",id:"boxedexpressiondiv",level:5},{value:"rhs",id:"rhs-3",level:6},{value:"BoxedExpression.pow()",id:"boxedexpressionpow",level:5},{value:"exp",id:"exp",level:6},{value:"BoxedExpression.root()",id:"boxedexpressionroot",level:5},{value:"exp",id:"exp-1",level:6},{value:"BoxedExpression.sqrt()",id:"boxedexpressionsqrt",level:5},{value:"BoxedExpression.ln()",id:"boxedexpressionln",level:5},{value:"base?",id:"base",level:6},{value:"BoxedExpression.shape",id:"boxedexpressionshape",level:5},{value:"BoxedExpression.rank",id:"boxedexpressionrank",level:5},{value:"BoxedExpression.wikidata",id:"boxedexpressionwikidata",level:5},{value:"BoxedExpression.description",id:"boxedexpressiondescription",level:5},{value:"BoxedExpression.url",id:"boxedexpressionurl",level:5},{value:"BoxedExpression.complexity",id:"boxedexpressioncomplexity",level:5},{value:"BoxedExpression.baseDefinition",id:"boxedexpressionbasedefinition",level:5},{value:"BoxedExpression.functionDefinition",id:"boxedexpressionfunctiondefinition",level:5},{value:"BoxedExpression.symbolDefinition",id:"boxedexpressionsymboldefinition",level:5},{value:"BoxedExpression.simplify()",id:"boxedexpressionsimplify",level:5},{value:"options?",id:"options-6",level:6},{value:"BoxedExpression.expand()",id:"boxedexpressionexpand",level:5},{value:"BoxedExpression.evaluate()",id:"boxedexpressionevaluate",level:5},{value:"options?",id:"options-7",level:6},{value:"BoxedExpression.evaluateAsync()",id:"boxedexpressionevaluateasync",level:5},{value:"options?",id:"options-8",level:6},{value:"BoxedExpression.N()",id:"boxedexpressionn",level:5},{value:"BoxedExpression.compile()",id:"boxedexpressioncompile",level:5},{value:"options?",id:"options-9",level:6},{value:"to",id:"to",level:6},{value:"optimize",id:"optimize",level:6},{value:"functions",id:"functions",level:6},{value:"vars",id:"vars",level:6},{value:"imports",id:"imports",level:6},{value:"preamble",id:"preamble",level:6},{value:"args?",id:"args",level:6},{value:"BoxedExpression.solve()",id:"boxedexpressionsolve",level:5},{value:"vars?",id:"vars-1",level:6},{value:"BoxedExpression.value",id:"boxedexpressionvalue",level:5},{value:"Get Signature",id:"get-signature-8",level:6},{value:"Parameters",id:"parameters",level:6},{value:"value",id:"value",level:6},{value:"BoxedExpression.type",id:"boxedexpressiontype",level:5},{value:"Get Signature",id:"get-signature-9",level:6},{value:"Parameters",id:"parameters-1",level:6},{value:"type",id:"type",level:6},{value:"BoxedExpression.isCollection",id:"boxedexpressioniscollection",level:5},{value:"BoxedExpression.contains()",id:"boxedexpressioncontains",level:5},{value:"rhs",id:"rhs-4",level:6},{value:"BoxedExpression.size",id:"boxedexpressionsize",level:5},{value:"Get Signature",id:"get-signature-10",level:6},{value:"BoxedExpression.each()",id:"boxedexpressioneach",level:5},{value:"start?",id:"start",level:6},{value:"count?",id:"count",level:6},{value:"BoxedExpression.at()",id:"boxedexpressionat",level:5},{value:"index",id:"index",level:6},{value:"BoxedExpression.get()",id:"boxedexpressionget",level:5},{value:"key",id:"key",level:6},{value:"BoxedExpression.indexOf()",id:"boxedexpressionindexof",level:5},{value:"expr",id:"expr-1",level:6},{value:"Primitive Methods",id:"primitive-methods",level:4},{value:"BoxedExpression.valueOf()",id:"boxedexpressionvalueof",level:5},{value:"BoxedExpression.toString()",id:"boxedexpressiontostring",level:5},{value:"BoxedExpression.print()",id:"boxedexpressionprint",level:5},{value:"BoxedExpression.[toPrimitive]()",id:"boxedexpressiontoprimitive",level:5},{value:"hint",id:"hint",level:6},{value:"BoxedExpression.toJSON()",id:"boxedexpressiontojson",level:5},{value:"BoxedExpression.is()",id:"boxedexpressionis",level:5},{value:"rhs",id:"rhs-5",level:6},{value:"Relational Operator",id:"relational-operator",level:4},{value:"BoxedExpression.isSame()",id:"boxedexpressionissame",level:5},{value:"rhs",id:"rhs-6",level:6},{value:"BoxedExpression.isLess()",id:"boxedexpressionisless",level:5},{value:"other",id:"other-1",level:6},{value:"BoxedExpression.isLessEqual()",id:"boxedexpressionislessequal",level:5},{value:"other",id:"other-2",level:6},{value:"BoxedExpression.isGreater()",id:"boxedexpressionisgreater",level:5},{value:"other",id:"other-3",level:6},{value:"BoxedExpression.isGreaterEqual()",id:"boxedexpressionisgreaterequal",level:5},{value:"other",id:"other-4",level:6},{value:"BoxedExpression.isEqual()",id:"boxedexpressionisequal",level:5},{value:"Examples",id:"examples",level:2},{value:"other",id:"other-5",level:6},{value:"String Expression",id:"string-expression",level:4},{value:"BoxedExpression.string",id:"boxedexpressionstring",level:5},{value:"Symbol Expression",id:"symbol-expression",level:4},{value:"BoxedExpression.symbol",id:"boxedexpressionsymbol",level:5},{value:"BoxedExpression.tensor",id:"boxedexpressiontensor",level:5},{value:"BoxedExpression.isValid",id:"boxedexpressionisvalid",level:5},{value:"Type Properties",id:"type-properties",level:4},{value:"BoxedExpression.isNumber",id:"boxedexpressionisnumber",level:5},{value:"BoxedExpression.isInteger",id:"boxedexpressionisinteger",level:5},{value:"BoxedExpression.isRational",id:"boxedexpressionisrational",level:5},{value:"BoxedExpression.isReal",id:"boxedexpressionisreal",level:5},{value:"SemiBoxedExpression",id:"semiboxedexpression",level:3},{value:"BoxedSubstitution",id:"boxedsubstitution",level:3},{value:"CanonicalForm",id:"canonicalform",level:3},{value:"EvaluateOptions",id:"evaluateoptions",level:3},{value:"Type declaration",id:"type-declaration-7",level:4},{value:"numericApproximation",id:"numericapproximation",level:5},{value:"EvaluateOptions.numericApproximation",id:"evaluateoptionsnumericapproximation",level:5},{value:"signal",id:"signal-1",level:5},{value:"EvaluateOptions.signal",id:"evaluateoptionssignal",level:5},{value:"Metadata",id:"metadata-1",level:3},{value:"Type declaration",id:"type-declaration-8",level:4},{value:"latex?",id:"latex",level:5},{value:"Metadata.latex?",id:"metadatalatex",level:5},{value:"wikidata?",id:"wikidata",level:5},{value:"Metadata.wikidata?",id:"metadatawikidata",level:5},{value:"ReplaceOptions",id:"replaceoptions",level:3},{value:"Type declaration",id:"type-declaration-9",level:4},{value:"recursive",id:"recursive-1",level:5},{value:"ReplaceOptions.recursive",id:"replaceoptionsrecursive",level:5},{value:"once",id:"once",level:5},{value:"ReplaceOptions.once",id:"replaceoptionsonce",level:5},{value:"useVariations",id:"usevariations",level:5},{value:"ReplaceOptions.useVariations",id:"replaceoptionsusevariations",level:5},{value:"iterationLimit",id:"iterationlimit",level:5},{value:"ReplaceOptions.iterationLimit",id:"replaceoptionsiterationlimit",level:5},{value:"canonical",id:"canonical-2",level:5},{value:"ReplaceOptions.canonical",id:"replaceoptionscanonical",level:5},{value:"Substitution&lt;T&gt;",id:"substitutiont",level:3},{value:"Type Parameters",id:"type-parameters",level:4},{value:"Index Signature",id:"index-signature",level:4},{value:"Pattern Matching",id:"pattern-matching",level:2},{value:"Pattern",id:"pattern-1",level:3},{value:"No Inherit Doc",id:"no-inherit-doc",level:4},{value:"PatternMatchOptions",id:"patternmatchoptions",level:3},{value:"Type declaration",id:"type-declaration-10",level:4},{value:"substitution?",id:"substitution",level:5},{value:"PatternMatchOptions.substitution?",id:"patternmatchoptionssubstitution",level:5},{value:"recursive?",id:"recursive-2",level:5},{value:"PatternMatchOptions.recursive?",id:"patternmatchoptionsrecursive",level:5},{value:"useVariations?",id:"usevariations-1",level:5},{value:"PatternMatchOptions.useVariations?",id:"patternmatchoptionsusevariations",level:5},{value:"Rules",id:"rules-2",level:2},{value:"RuleReplaceFunction()",id:"rulereplacefunction",level:3},{value:"expr",id:"expr-2",level:5},{value:"wildcards",id:"wildcards",level:5},{value:"RuleConditionFunction()",id:"ruleconditionfunction",level:3},{value:"wildcards",id:"wildcards-1",level:5},{value:"ce",id:"ce",level:5},{value:"RuleFunction()",id:"rulefunction",level:3},{value:"expr",id:"expr-3",level:5},{value:"Rule",id:"rule",level:3},{value:"BoxedRule",id:"boxedrule",level:3},{value:"Type declaration",id:"type-declaration-11",level:4},{value:"match",id:"match",level:5},{value:"BoxedRule.match",id:"boxedrulematch",level:5},{value:"replace",id:"replace",level:5},{value:"BoxedRule.replace",id:"boxedrulereplace",level:5},{value:"condition",id:"condition",level:5},{value:"BoxedRule.condition",id:"boxedrulecondition",level:5},{value:"useVariations?",id:"usevariations-2",level:5},{value:"BoxedRule.useVariations?",id:"boxedruleusevariations",level:5},{value:"id?",id:"id",level:5},{value:"BoxedRule.id?",id:"boxedruleid",level:5},{value:"BoxedRuleSet",id:"boxedruleset",level:3},{value:"Type declaration",id:"type-declaration-12",level:4},{value:"rules",id:"rules-3",level:5},{value:"BoxedRuleSet.rules",id:"boxedrulesetrules",level:5},{value:"Assumptions",id:"assumptions-2",level:2},{value:"AssumeResult",id:"assumeresult",level:3},{value:"ExpressionMapInterface&lt;U&gt;",id:"expressionmapinterfaceu",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"ExpressionMapInterface.has()",id:"expressionmapinterfacehas",level:5},{value:"expr",id:"expr-4",level:6},{value:"ExpressionMapInterface.get()",id:"expressionmapinterfaceget",level:5},{value:"expr",id:"expr-5",level:6},{value:"ExpressionMapInterface.set()",id:"expressionmapinterfaceset",level:5},{value:"expr",id:"expr-6",level:6},{value:"value",id:"value-1",level:6},{value:"ExpressionMapInterface.delete()",id:"expressionmapinterfacedelete",level:5},{value:"expr",id:"expr-7",level:6},{value:"ExpressionMapInterface.clear()",id:"expressionmapinterfaceclear",level:5},{value:"ExpressionMapInterface.[iterator]()",id:"expressionmapinterfaceiterator",level:5},{value:"ExpressionMapInterface.entries()",id:"expressionmapinterfaceentries",level:5},{value:"Compiling",id:"compiling",level:2},{value:"CompiledExpression",id:"compiledexpression",level:3},{value:"Type declaration",id:"type-declaration-13",level:4},{value:"evaluate()?",id:"evaluate",level:5},{value:"CompiledExpression.evaluate()?",id:"compiledexpressionevaluate",level:5},{value:"scope",id:"scope-1",level:6},{value:"Definitions",id:"definitions",level:2},{value:"BoxedBaseDefinition",id:"boxedbasedefinition",level:3},{value:"Extended by",id:"extended-by",level:4},{value:"BoxedBaseDefinition.name",id:"boxedbasedefinitionname",level:5},{value:"BoxedBaseDefinition.wikidata?",id:"boxedbasedefinitionwikidata",level:5},{value:"BoxedBaseDefinition.description?",id:"boxedbasedefinitiondescription",level:5},{value:"BoxedBaseDefinition.url?",id:"boxedbasedefinitionurl",level:5},{value:"BoxedBaseDefinition.scope",id:"boxedbasedefinitionscope",level:5},{value:"parentScope?",id:"parentscope-2",level:6},{value:"scope.parentScope?",id:"scopeparentscope-1",level:6},{value:"ids?",id:"ids-2",level:6},{value:"scope.ids?",id:"scopeids-1",level:6},{value:"assumptions",id:"assumptions-3",level:6},{value:"scope.assumptions",id:"scopeassumptions-1",level:6},{value:"BoxedBaseDefinition.collection?",id:"boxedbasedefinitioncollection",level:5},{value:"BoxedBaseDefinition.reset()",id:"boxedbasedefinitionreset",level:5},{value:"EqHandlers",id:"eqhandlers",level:3},{value:"Type declaration",id:"type-declaration-14",level:4},{value:"eq()",id:"eq",level:5},{value:"EqHandlers.eq()",id:"eqhandlerseq",level:5},{value:"a",id:"a",level:6},{value:"b",id:"b",level:6},{value:"neq()",id:"neq",level:5},{value:"EqHandlers.neq()",id:"eqhandlersneq",level:5},{value:"a",id:"a-1",level:6},{value:"b",id:"b-1",level:6},{value:"CollectionHandlers",id:"collectionhandlers",level:3},{value:"Type declaration",id:"type-declaration-15",level:4},{value:"Definitions",id:"definitions-1",level:4},{value:"iterator()",id:"iterator",level:6},{value:"CollectionHandlers.iterator()",id:"collectionhandlersiterator",level:6},{value:"collection",id:"collection",level:6},{value:"start?",id:"start-1",level:6},{value:"count?",id:"count-1",level:6},{value:"Other",id:"other-6",level:4},{value:"size()",id:"size",level:6},{value:"CollectionHandlers.size()",id:"collectionhandlerssize",level:6},{value:"collection",id:"collection-1",level:6},{value:"contains()",id:"contains",level:6},{value:"CollectionHandlers.contains()",id:"collectionhandlerscontains",level:6},{value:"collection",id:"collection-2",level:6},{value:"target",id:"target",level:6},{value:"at()",id:"at",level:6},{value:"CollectionHandlers.at()",id:"collectionhandlersat",level:6},{value:"collection",id:"collection-3",level:6},{value:"index",id:"index-1",level:6},{value:"keys()",id:"keys",level:6},{value:"CollectionHandlers.keys()",id:"collectionhandlerskeys",level:6},{value:"collection",id:"collection-4",level:6},{value:"indexOf()",id:"indexof",level:6},{value:"CollectionHandlers.indexOf()",id:"collectionhandlersindexof",level:6},{value:"collection",id:"collection-5",level:6},{value:"target",id:"target-1",level:6},{value:"from?",id:"from",level:6},{value:"subsetOf()",id:"subsetof",level:6},{value:"CollectionHandlers.subsetOf()",id:"collectionhandlerssubsetof",level:6},{value:"collection",id:"collection-6",level:6},{value:"target",id:"target-2",level:6},{value:"strict",id:"strict",level:6},{value:"eltsgn()",id:"eltsgn",level:6},{value:"CollectionHandlers.eltsgn()",id:"collectionhandlerseltsgn",level:6},{value:"collection",id:"collection-7",level:6},{value:"elttype()",id:"elttype",level:6},{value:"CollectionHandlers.elttype()",id:"collectionhandlerselttype",level:6},{value:"collection",id:"collection-8",level:6},{value:"FunctionDefinitionFlags",id:"functiondefinitionflags",level:3},{value:"Type declaration",id:"type-declaration-16",level:4},{value:"lazy",id:"lazy",level:5},{value:"FunctionDefinitionFlags.lazy",id:"functiondefinitionflagslazy",level:5},{value:"threadable",id:"threadable",level:5},{value:"FunctionDefinitionFlags.threadable",id:"functiondefinitionflagsthreadable",level:5},{value:"associative",id:"associative",level:5},{value:"FunctionDefinitionFlags.associative",id:"functiondefinitionflagsassociative",level:5},{value:"commutative",id:"commutative",level:5},{value:"FunctionDefinitionFlags.commutative",id:"functiondefinitionflagscommutative",level:5},{value:"commutativeOrder",id:"commutativeorder",level:5},{value:"FunctionDefinitionFlags.commutativeOrder",id:"functiondefinitionflagscommutativeorder",level:5},{value:"idempotent",id:"idempotent",level:5},{value:"FunctionDefinitionFlags.idempotent",id:"functiondefinitionflagsidempotent",level:5},{value:"involution",id:"involution",level:5},{value:"FunctionDefinitionFlags.involution",id:"functiondefinitionflagsinvolution",level:5},{value:"pure",id:"pure",level:5},{value:"FunctionDefinitionFlags.pure",id:"functiondefinitionflagspure",level:5},{value:"Hold",id:"hold",level:3},{value:"BoxedFunctionDefinition",id:"boxedfunctiondefinition",level:3},{value:"Type declaration",id:"type-declaration-17",level:4},{value:"complexity",id:"complexity",level:5},{value:"BoxedFunctionDefinition.complexity",id:"boxedfunctiondefinitioncomplexity",level:5},{value:"inferredSignature",id:"inferredsignature",level:5},{value:"BoxedFunctionDefinition.inferredSignature",id:"boxedfunctiondefinitioninferredsignature",level:5},{value:"signature",id:"signature",level:5},{value:"BoxedFunctionDefinition.signature",id:"boxedfunctiondefinitionsignature",level:5},{value:"type()?",id:"type-1",level:5},{value:"BoxedFunctionDefinition.type()?",id:"boxedfunctiondefinitiontype",level:5},{value:"ops",id:"ops",level:6},{value:"options",id:"options-10",level:6},{value:"engine",id:"engine",level:6},{value:"sgn()?",id:"sgn",level:5},{value:"BoxedFunctionDefinition.sgn()?",id:"boxedfunctiondefinitionsgn",level:5},{value:"ops",id:"ops-1",level:6},{value:"options",id:"options-11",level:6},{value:"engine",id:"engine-1",level:6},{value:"eq()?",id:"eq-1",level:5},{value:"BoxedFunctionDefinition.eq()?",id:"boxedfunctiondefinitioneq",level:5},{value:"a",id:"a-2",level:6},{value:"b",id:"b-2",level:6},{value:"neq()?",id:"neq-1",level:5},{value:"BoxedFunctionDefinition.neq()?",id:"boxedfunctiondefinitionneq",level:5},{value:"a",id:"a-3",level:6},{value:"b",id:"b-3",level:6},{value:"canonical()?",id:"canonical-3",level:5},{value:"BoxedFunctionDefinition.canonical()?",id:"boxedfunctiondefinitioncanonical",level:5},{value:"ops",id:"ops-2",level:6},{value:"options",id:"options-12",level:6},{value:"engine",id:"engine-2",level:6},{value:"evaluate()?",id:"evaluate-1",level:5},{value:"BoxedFunctionDefinition.evaluate()?",id:"boxedfunctiondefinitionevaluate",level:5},{value:"ops",id:"ops-3",level:6},{value:"options",id:"options-13",level:6},{value:"evaluateAsync()?",id:"evaluateasync",level:5},{value:"BoxedFunctionDefinition.evaluateAsync()?",id:"boxedfunctiondefinitionevaluateasync",level:5},{value:"ops",id:"ops-4",level:6},{value:"options?",id:"options-14",level:6},{value:"evalDimension()?",id:"evaldimension",level:5},{value:"BoxedFunctionDefinition.evalDimension()?",id:"boxedfunctiondefinitionevaldimension",level:5},{value:"ops",id:"ops-5",level:6},{value:"options",id:"options-15",level:6},{value:"engine",id:"engine-3",level:6},{value:"compile()?",id:"compile",level:5},{value:"BoxedFunctionDefinition.compile()?",id:"boxedfunctiondefinitioncompile",level:5},{value:"expr",id:"expr-8",level:6},{value:"SymbolAttributes",id:"symbolattributes",level:3},{value:"Type declaration",id:"type-declaration-18",level:4},{value:"constant",id:"constant",level:5},{value:"SymbolAttributes.constant",id:"symbolattributesconstant",level:5},{value:"holdUntil",id:"holduntil",level:5},{value:"SymbolAttributes.holdUntil",id:"symbolattributesholduntil",level:5},{value:"NumericFlags",id:"numericflags",level:3},{value:"Type declaration",id:"type-declaration-19",level:4},{value:"sgn",id:"sgn-1",level:5},{value:"NumericFlags.sgn",id:"numericflagssgn",level:5},{value:"even",id:"even",level:5},{value:"NumericFlags.even",id:"numericflagseven",level:5},{value:"odd",id:"odd",level:5},{value:"NumericFlags.odd",id:"numericflagsodd",level:5},{value:"BoxedSymbolDefinition",id:"boxedsymboldefinition",level:3},{value:"Extends",id:"extends",level:4},{value:"BoxedSymbolDefinition.isFunction",id:"boxedsymboldefinitionisfunction",level:5},{value:"BoxedSymbolDefinition.isConstant",id:"boxedsymboldefinitionisconstant",level:5},{value:"BoxedSymbolDefinition.eq()?",id:"boxedsymboldefinitioneq",level:5},{value:"a",id:"a-4",level:6},{value:"BoxedSymbolDefinition.neq()?",id:"boxedsymboldefinitionneq",level:5},{value:"a",id:"a-5",level:6},{value:"BoxedSymbolDefinition.cmp()?",id:"boxedsymboldefinitioncmp",level:5},{value:"a",id:"a-6",level:6},{value:"BoxedSymbolDefinition.inferredType",id:"boxedsymboldefinitioninferredtype",level:5},{value:"BoxedSymbolDefinition.type",id:"boxedsymboldefinitiontype",level:5},{value:"BoxedSymbolDefinition.value",id:"boxedsymboldefinitionvalue",level:5},{value:"Get Signature",id:"get-signature-11",level:6},{value:"Parameters",id:"parameters-2",level:6},{value:"val",id:"val",level:6},{value:"RuntimeIdentifierDefinitions",id:"runtimeidentifierdefinitions",level:3},{value:"SymbolDefinition",id:"symboldefinition",level:3},{value:"Type declaration",id:"type-declaration-20",level:4},{value:"type?",id:"type-2",level:5},{value:"SymbolDefinition.type?",id:"symboldefinitiontype",level:5},{value:"inferred?",id:"inferred",level:5},{value:"SymbolDefinition.inferred?",id:"symboldefinitioninferred",level:5},{value:"value?",id:"value-2",level:5},{value:"SymbolDefinition.value?",id:"symboldefinitionvalue",level:5},{value:"flags?",id:"flags",level:5},{value:"SymbolDefinition.flags?",id:"symboldefinitionflags",level:5},{value:"eq()?",id:"eq-2",level:5},{value:"SymbolDefinition.eq()?",id:"symboldefinitioneq",level:5},{value:"a",id:"a-7",level:6},{value:"neq()?",id:"neq-2",level:5},{value:"SymbolDefinition.neq()?",id:"symboldefinitionneq",level:5},{value:"a",id:"a-8",level:6},{value:"cmp()?",id:"cmp",level:5},{value:"SymbolDefinition.cmp()?",id:"symboldefinitioncmp",level:5},{value:"a",id:"a-9",level:6},{value:"collection?",id:"collection-9",level:5},{value:"SymbolDefinition.collection?",id:"symboldefinitioncollection",level:5},{value:"FunctionDefinition",id:"functiondefinition",level:3},{value:"Type declaration",id:"type-declaration-21",level:4},{value:"signature?",id:"signature-1",level:5},{value:"FunctionDefinition.signature?",id:"functiondefinitionsignature",level:5},{value:"type()?",id:"type-3",level:5},{value:"FunctionDefinition.type()?",id:"functiondefinitiontype",level:5},{value:"ops",id:"ops-6",level:6},{value:"options",id:"options-16",level:6},{value:"engine",id:"engine-4",level:6},{value:"sgn()?",id:"sgn-2",level:5},{value:"FunctionDefinition.sgn()?",id:"functiondefinitionsgn",level:5},{value:"ops",id:"ops-7",level:6},{value:"options",id:"options-17",level:6},{value:"engine",id:"engine-5",level:6},{value:"even()?",id:"even-1",level:5},{value:"FunctionDefinition.even()?",id:"functiondefinitioneven",level:5},{value:"ops",id:"ops-8",level:6},{value:"options",id:"options-18",level:6},{value:"engine",id:"engine-6",level:6},{value:"complexity?",id:"complexity-1",level:5},{value:"FunctionDefinition.complexity?",id:"functiondefinitioncomplexity",level:5},{value:"canonical()?",id:"canonical-4",level:5},{value:"FunctionDefinition.canonical()?",id:"functiondefinitioncanonical",level:5},{value:"ops",id:"ops-9",level:6},{value:"options",id:"options-19",level:6},{value:"engine",id:"engine-7",level:6},{value:"evaluate?",id:"evaluate-2",level:5},{value:"FunctionDefinition.evaluate?",id:"functiondefinitionevaluate",level:5},{value:"evaluateAsync()?",id:"evaluateasync-1",level:5},{value:"FunctionDefinition.evaluateAsync()?",id:"functiondefinitionevaluateasync",level:5},{value:"ops",id:"ops-10",level:6},{value:"options",id:"options-20",level:6},{value:"evalDimension()?",id:"evaldimension-1",level:5},{value:"FunctionDefinition.evalDimension()?",id:"functiondefinitionevaldimension",level:5},{value:"args",id:"args-1",level:6},{value:"options",id:"options-21",level:6},{value:"compile()?",id:"compile-1",level:5},{value:"FunctionDefinition.compile()?",id:"functiondefinitioncompile",level:5},{value:"expr",id:"expr-9",level:6},{value:"eq()?",id:"eq-3",level:5},{value:"FunctionDefinition.eq()?",id:"functiondefinitioneq",level:5},{value:"a",id:"a-10",level:6},{value:"b",id:"b-4",level:6},{value:"neq()?",id:"neq-3",level:5},{value:"FunctionDefinition.neq()?",id:"functiondefinitionneq",level:5},{value:"a",id:"a-11",level:6},{value:"b",id:"b-5",level:6},{value:"collection?",id:"collection-10",level:5},{value:"FunctionDefinition.collection?",id:"functiondefinitioncollection",level:5},{value:"BaseDefinition",id:"basedefinition",level:3},{value:"Type declaration",id:"type-declaration-22",level:4},{value:"description?",id:"description",level:5},{value:"BaseDefinition.description?",id:"basedefinitiondescription",level:5},{value:"url?",id:"url-1",level:5},{value:"BaseDefinition.url?",id:"basedefinitionurl",level:5},{value:"wikidata?",id:"wikidata-1",level:5},{value:"BaseDefinition.wikidata?",id:"basedefinitionwikidata",level:5},{value:"IdentifierDefinition",id:"identifierdefinition",level:3},{value:"IdentifierDefinitions",id:"identifierdefinitions",level:3},{value:"Latex Parsing and Serialization",id:"latex-parsing-and-serialization",level:2},{value:"LatexString",id:"latexstring",level:3},{value:"Other",id:"other-7",level:2},{value:"Sign",id:"sign",level:3},{value:"<code>ce.box()</code> and <code>ce.parse()</code>",id:"cebox-and-ceparse",level:3},{value:"Algebraic methods (expr.add(), expr.mul(), etc...)",id:"algebraic-methods-expradd-exprmul-etc",level:3},{value:"<code>ce._fn()</code>",id:"ce_fn",level:3},{value:"<code>ce.function()</code>",id:"cefunction",level:3},{value:"Canonical Handlers",id:"canonical-handlers",level:3},{value:"isRuleStep()",id:"isrulestep",level:3},{value:"x",id:"x",level:5},{value:"isBoxedRule()",id:"isboxedrule",level:3},{value:"x",id:"x-1",level:5},{value:"RuleStep",id:"rulestep",level:3},{value:"Type declaration",id:"type-declaration-23",level:4},{value:"value",id:"value-3",level:5},{value:"RuleStep.value",id:"rulestepvalue",level:5},{value:"because",id:"because",level:5},{value:"RuleStep.because",id:"rulestepbecause",level:5},{value:"RuleSteps",id:"rulesteps",level:3},{value:"CanonicalOptions",id:"canonicaloptions",level:3}];function x(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)("a",{name:"readmemd"}),"\n",(0,l.jsx)(n.h2,{id:"modules",children:"Modules"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#commonmd",children:'"common"'})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#compute-enginemd",children:'"compute-engine"'})}),"\n"]}),"\n",(0,l.jsx)("a",{name:"commonmd"}),"\n",(0,l.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,l.jsx)("a",{id:"runtimesignalcode",name:"runtimesignalcode"}),"\n",(0,l.jsx)(n.h3,{id:"runtimesignalcode",children:"RuntimeSignalCode"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'type RuntimeSignalCode = \n  | "timeout"\n  | "out-of-memory"\n  | "recursion-depth-exceeded"\n  | "iteration-limit-exceeded";\n'})}),"\n",(0,l.jsx)("a",{id:"signalcode",name:"signalcode"}),"\n",(0,l.jsx)(n.h3,{id:"signalcode",children:"SignalCode"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'type SignalCode = \n  | RuntimeSignalCode\n  | \n  | "invalid-name"\n  | "expected-predicate"\n  | "expected-symbol"\n  | "operator-requires-one-operand"\n  | "postfix-operator-requires-one-operand"\n  | "prefix-operator-requires-one-operand"\n  | "unbalanced-symbols"\n  | "expected-argument"\n  | "unexpected-command"\n  | "cyclic-definition"\n  | "invalid-supersets"\n  | "expected-supersets"\n  | "unknown-domain"\n  | "duplicate-wikidata"\n  | "invalid-dictionary-entry"\n  | "syntax-error";\n'})}),"\n",(0,l.jsx)("a",{id:"signalmessage",name:"signalmessage"}),"\n",(0,l.jsx)(n.h3,{id:"signalmessage",children:"SignalMessage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type SignalMessage = \n  | SignalCode\n  | [SignalCode, ...any[]];\n"})}),"\n",(0,l.jsx)("a",{id:"signalorigin",name:"signalorigin"}),"\n",(0,l.jsx)(n.h3,{id:"signalorigin",children:"SignalOrigin"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type SignalOrigin = object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"url"}),"\n",(0,l.jsx)(n.h5,{id:"url",children:"url?"}),"\n",(0,l.jsx)("a",{id:"url",name:"url"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"signaloriginurl",children:"SignalOrigin.url?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional url: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"source"}),"\n",(0,l.jsx)(n.h5,{id:"source",children:"source?"}),"\n",(0,l.jsx)("a",{id:"source",name:"source"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"signaloriginsource",children:"SignalOrigin.source?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional source: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"offset"}),"\n",(0,l.jsx)(n.h5,{id:"offset",children:"offset?"}),"\n",(0,l.jsx)("a",{id:"offset",name:"offset"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"signaloriginoffset",children:"SignalOrigin.offset?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional offset: number;\n"})})]}),"\n",(0,l.jsx)("a",{id:"line"}),"\n",(0,l.jsx)(n.h5,{id:"line",children:"line?"}),"\n",(0,l.jsx)("a",{id:"line",name:"line"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"signaloriginline",children:"SignalOrigin.line?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional line: number;\n"})})]}),"\n",(0,l.jsx)("a",{id:"column"}),"\n",(0,l.jsx)(n.h5,{id:"column",children:"column?"}),"\n",(0,l.jsx)("a",{id:"column",name:"column"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"signalorigincolumn",children:"SignalOrigin.column?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional column: number;\n"})})]}),"\n",(0,l.jsx)("a",{id:"around"}),"\n",(0,l.jsx)(n.h5,{id:"around",children:"around?"}),"\n",(0,l.jsx)("a",{id:"around",name:"around"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"signaloriginaround",children:"SignalOrigin.around?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional around: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"signal",name:"signal"}),"\n",(0,l.jsx)(n.h3,{id:"signal",children:"Signal"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Signal = object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-1",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"severity"}),"\n",(0,l.jsx)(n.h5,{id:"severity",children:"severity?"}),"\n",(0,l.jsx)("a",{id:"severity",name:"severity"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"signalseverity",children:"Signal.severity?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'optional severity: "warning" | "error";\n'})})]}),"\n",(0,l.jsx)("a",{id:"message"}),"\n",(0,l.jsx)(n.h5,{id:"message",children:"message"}),"\n",(0,l.jsx)("a",{id:"message",name:"message"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"signalmessage-1",children:"Signal.message"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"message: SignalMessage;\n"})}),(0,l.jsx)(n.p,{children:"An error/warning code or, a code with one or more arguments specific to\nthe signal code."})]}),"\n",(0,l.jsx)("a",{id:"head"}),"\n",(0,l.jsx)(n.h5,{id:"head",children:"head?"}),"\n",(0,l.jsx)("a",{id:"head",name:"head"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"signalhead",children:"Signal.head?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional head: string;\n"})}),(0,l.jsx)(n.p,{children:"If applicable, the head of the function about which the\nsignal was raised"})]}),"\n",(0,l.jsx)("a",{id:"origin"}),"\n",(0,l.jsx)(n.h5,{id:"origin",children:"origin?"}),"\n",(0,l.jsx)("a",{id:"origin",name:"origin"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"signalorigin-1",children:"Signal.origin?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional origin: SignalOrigin;\n"})}),(0,l.jsx)(n.p,{children:"Location where the signal was raised."})]}),"\n",(0,l.jsx)("a",{id:"errorsignal",name:"errorsignal"}),"\n",(0,l.jsx)(n.h3,{id:"errorsignal",children:"ErrorSignal"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type ErrorSignal = Signal & object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-2",children:"Type declaration"}),"\n",(0,l.jsx)(n.h5,{id:"severity-1",children:"severity"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"errorsignalseverity",children:"ErrorSignal.severity"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'severity: "error";\n'})})]}),"\n",(0,l.jsx)("a",{id:"warningsignal",name:"warningsignal"}),"\n",(0,l.jsx)(n.h3,{id:"warningsignal",children:"WarningSignal"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type WarningSignal = Signal & object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-3",children:"Type declaration"}),"\n",(0,l.jsx)(n.h5,{id:"severity-2",children:"severity"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"warningsignalseverity",children:"WarningSignal.severity"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'severity: "warning";\n'})})]}),"\n",(0,l.jsx)("a",{id:"warningsignalhandler",name:"warningsignalhandler"}),"\n",(0,l.jsx)(n.h3,{id:"warningsignalhandler",children:"WarningSignalHandler()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type WarningSignalHandler = (warnings) => void;\n"})}),"\n",(0,l.jsx)(n.h5,{id:"warnings",children:"warnings"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#warningsignal",children:(0,l.jsx)(n.code,{children:"WarningSignal"})}),"[]"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})}),"\n",(0,l.jsx)("a",{id:"errorcode",name:"errorcode"}),"\n",(0,l.jsx)(n.h3,{id:"errorcode",children:"ErrorCode"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'type ErrorCode = \n  | "expected-argument"\n  | "unexpected-argument"\n  | "expected-operator"\n  | "expected-operand"\n  | "invalid-name"\n  | "invalid-dictionary-entry"\n  | "unknown-symbol"\n  | "unknown-operator"\n  | "unknown-function"\n  | "unknown-command"\n  | "unexpected-command"\n  | "unbalanced-symbols"\n  | "unexpected-superscript"\n  | "unexpected-subscript"\n  | "unexpected-sequence"\n  | "non-associative-operator"\n  | "function-has-too-many-arguments"\n  | "function-has-too-few-arguments"\n  | "operator-requires-one-operand"\n  | "infix-operator-requires-two-operands"\n  | "prefix-operator-requires-one-operand"\n  | "postfix-operator-requires-one-operand"\n  | "associative-function-has-too-few-arguments"\n  | "commutative-function-has-too-few-arguments"\n  | "threadable-function-has-too-few-arguments"\n  | "hold-first-function-has-too-few-arguments"\n  | "hold-rest-function-has-too-few-arguments"\n  | "base-out-of-range"\n  | "syntax-error";\n'})}),"\n",(0,l.jsxs)(n.p,{children:["The error codes can be used in an ",(0,l.jsx)(n.code,{children:"ErrorCode"})," expression:"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:'["ErrorCode", "\'syntax-error\'", arg1]'})}),"\n",(0,l.jsx)(n.p,{children:"It evaluates to a localized, human-readable string."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unknown-symbol"}),": a symbol was encountered which does not have a\ndefinition."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unknown-operator"}),": a presumed operator was encountered which does not\nhave a definition."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unknown-function"}),": a LaTeX command was encountered which does not\nhave a definition."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unexpected-command"}),": a LaTeX command was encountered when only a string\nwas expected"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unexpected-superscript"}),": a superscript was encountered in an unexpected\ncontext, or no ",(0,l.jsx)(n.code,{children:"powerFunction"})," was defined. By default, superscript can\nbe applied to numbers, symbols or expressions, but not to operators (e.g.\n",(0,l.jsx)(n.code,{children:"2+^34"}),") or to punctuation."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unexpected-subscript"}),": a subscript was encountered in an unexpected\ncontext or no 'subscriptFunction",(0,l.jsx)(n.code,{children:"was defined. By default, subscripts are not expected on numbers, operators or symbols. Some commands (e.g."}),"\\sum`)\ndo expected a subscript."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unexpected-sequence"}),": some adjacent elements were encountered (for\nexample ",(0,l.jsx)(n.code,{children:"xy"}),"), but the elements could not be combined. By default, adjacent\nsymbols are combined with ",(0,l.jsx)(n.code,{children:"Multiply"}),", but adjacent numbers or adjacent\noperators are not combined."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"expected-argument"}),": a LaTeX command that requires one or more argument\nwas encountered without the required arguments."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"expected-operand"}),": an operator was encountered without its required\noperands."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"non-associative-operator"}),": an operator which is not associative was\nencountered in an associative context, for example: ",(0,l.jsx)(n.code,{children:"a < b < c"})," (assuming\n",(0,l.jsx)(n.code,{children:"<"})," is defined as non-associative)"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"postfix-operator-requires-one-operand"}),": a postfix operator which requires\na single argument was encountered with no arguments or more than one argument"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"prefix-operator-requires-one-operand"}),": a prefix operator which requires\na single argument was encountered with no arguments or more than one argument"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"base-out-of-range"}),":  The base is expected to be between 2 and 36."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)("a",{name:"compute-enginemd"}),"\n",(0,l.jsx)(n.p,{children:"The Compute Engine is a symbolic computation engine that can be used to\nmanipulate and evaluate mathematical expressions."}),"\n",(0,l.jsx)(n.p,{children:"Use an instance of ComputeEngine to create boxed expressions\nwith ComputeEngine.parse and ComputeEngine.box."}),"\n",(0,l.jsxs)(n.p,{children:["Use a ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})," object to manipulate and evaluate\nmathematical expressions."]}),"\n",(0,l.jsx)(n.h2,{id:"compute-engine",children:"Compute Engine"}),"\n",(0,l.jsx)("a",{id:"simplifyoptions",name:"simplifyoptions"}),"\n",(0,l.jsx)(n.h3,{id:"simplifyoptions",children:"SimplifyOptions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type SimplifyOptions = object;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Options for ",(0,l.jsx)(n.code,{children:"BoxedExpression.simplify()"})]}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-4",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"rules-1"}),"\n",(0,l.jsx)(n.h5,{id:"rules",children:"rules?"}),"\n",(0,l.jsx)("a",{id:"rules-1",name:"rules-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"simplifyoptionsrules",children:"SimplifyOptions.rules?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional rules: \n  | null\n  | Rule\n  | ReadonlyArray<\n  | BoxedRule\n  | Rule>\n  | BoxedRuleSet;\n"})}),(0,l.jsxs)(n.p,{children:["The set of rules to apply. If ",(0,l.jsx)(n.code,{children:"null"}),", use no rules. If not provided,\nuse the default simplification rules."]})]}),"\n",(0,l.jsx)("a",{id:"costfunction"}),"\n",(0,l.jsx)(n.h5,{id:"costfunction",children:"costFunction()?"}),"\n",(0,l.jsx)("a",{id:"costfunction",name:"costfunction"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"simplifyoptionscostfunction",children:"SimplifyOptions.costFunction()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional costFunction: (expr) => number;\n"})}),(0,l.jsx)(n.p,{children:"Use this cost function to determine if a simplification is worth it."}),(0,l.jsxs)(n.p,{children:["If not provided, ",(0,l.jsx)(n.code,{children:"ce.costFunction"}),", the cost function of the engine is\nused."]}),(0,l.jsx)(n.h6,{id:"expr",children:"expr"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})})]}),"\n",(0,l.jsx)("a",{id:"angularunit",name:"angularunit"}),"\n",(0,l.jsx)(n.h3,{id:"angularunit",children:"AngularUnit"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'type AngularUnit = "rad" | "deg" | "grad" | "turn";\n'})}),"\n",(0,l.jsx)(n.p,{children:"When a unitless value is passed to or returned from a trigonometric function,\nthe angular unit of the value."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"rad"}),": radians, 2\u03c0 radians is a full circle"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"deg"}),": degrees, 360 degrees is a full circle"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"grad"}),": gradians, 400 gradians is a full circle"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"turn"}),": turns, 1 turn is a full circle"]}),"\n"]}),"\n",(0,l.jsx)("a",{id:"arrayvalue",name:"arrayvalue"}),"\n",(0,l.jsx)(n.h3,{id:"arrayvalue",children:"ArrayValue"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type ArrayValue = \n  | boolean\n  | number\n  | string\n  | BigNum\n  | BoxedExpression\n  | undefined;\n"})}),"\n",(0,l.jsx)("a",{id:"assignvalue",name:"assignvalue"}),"\n",(0,l.jsx)(n.h3,{id:"assignvalue",children:"AssignValue"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type AssignValue = \n  | boolean\n  | number\n  | SemiBoxedExpression\n  | (args, options) => BoxedExpression\n  | undefined;\n"})}),"\n",(0,l.jsx)("a",{id:"jsonserializationoptions",name:"jsonserializationoptions"}),"\n",(0,l.jsx)(n.h3,{id:"jsonserializationoptions",children:"JsonSerializationOptions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type JsonSerializationOptions = object;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Options to control the serialization to MathJSON when using ",(0,l.jsx)(n.code,{children:"BoxedExpression.toMathJson()"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-5",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"prettify"}),"\n",(0,l.jsx)(n.h5,{id:"prettify",children:"prettify"}),"\n",(0,l.jsx)("a",{id:"prettify",name:"prettify"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"jsonserializationoptionsprettify",children:"JsonSerializationOptions.prettify"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"prettify: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If true, the serialization applies some transformations to make\nthe JSON more readable. For example, ",(0,l.jsx)(n.code,{children:'["Power", "x", 2]'})," is serialized\nas ",(0,l.jsx)(n.code,{children:'["Square", "x"]'}),"."]})]}),"\n",(0,l.jsx)("a",{id:"exclude"}),"\n",(0,l.jsx)(n.h5,{id:"exclude",children:"exclude"}),"\n",(0,l.jsx)("a",{id:"exclude",name:"exclude"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"jsonserializationoptionsexclude",children:"JsonSerializationOptions.exclude"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"exclude: string[];\n"})}),(0,l.jsx)(n.p,{children:"A list of space separated function names that should be excluded from\nthe JSON output."}),(0,l.jsxs)(n.p,{children:["Those functions are replaced with an equivalent, for example, ",(0,l.jsx)(n.code,{children:"Square"})," with\n",(0,l.jsx)(n.code,{children:"Power"}),", etc..."]}),(0,l.jsxs)(n.p,{children:["Possible values include ",(0,l.jsx)(n.code,{children:"Sqrt"}),", ",(0,l.jsx)(n.code,{children:"Root"}),", ",(0,l.jsx)(n.code,{children:"Square"}),", ",(0,l.jsx)(n.code,{children:"Exp"}),", ",(0,l.jsx)(n.code,{children:"Subtract"}),",\n",(0,l.jsx)(n.code,{children:"Rational"}),", ",(0,l.jsx)(n.code,{children:"Complex"})]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"[]"})," (none)"]})]}),"\n",(0,l.jsx)("a",{id:"shorthands"}),"\n",(0,l.jsx)(n.h5,{id:"shorthands",children:"shorthands"}),"\n",(0,l.jsx)("a",{id:"shorthands",name:"shorthands"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"jsonserializationoptionsshorthands",children:"JsonSerializationOptions.shorthands"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'shorthands: ("all" | "number" | "symbol" | "function" | "string")[];\n'})}),(0,l.jsx)(n.p,{children:"A list of space separated keywords indicating which MathJSON expressions\ncan use a shorthand."}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:'["all"]'})]})]}),"\n",(0,l.jsx)("a",{id:"metadata-1"}),"\n",(0,l.jsx)(n.h5,{id:"metadata",children:"metadata"}),"\n",(0,l.jsx)("a",{id:"metadata-1",name:"metadata-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"jsonserializationoptionsmetadata",children:"JsonSerializationOptions.metadata"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'metadata: ("all" | "wikidata" | "latex")[];\n'})}),(0,l.jsx)(n.p,{children:"A list of space separated keywords indicating which metadata should be\nincluded in the MathJSON. If metadata is included, shorthand notation\nis not used."}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"[]"}),"  (none)"]})]}),"\n",(0,l.jsx)("a",{id:"repeatingdecimal"}),"\n",(0,l.jsx)(n.h5,{id:"repeatingdecimal",children:"repeatingDecimal"}),"\n",(0,l.jsx)("a",{id:"repeatingdecimal",name:"repeatingdecimal"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"jsonserializationoptionsrepeatingdecimal",children:"JsonSerializationOptions.repeatingDecimal"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"repeatingDecimal: boolean;\n"})}),(0,l.jsx)(n.p,{children:"If true, repeating decimals are detected and serialized accordingly\nFor example:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"1.3333333333333333"})," ( \\to ) ",(0,l.jsx)(n.code,{children:"1.(3)"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"0.142857142857142857142857142857142857142857142857142"})," ( \\to ) ",(0,l.jsx)(n.code,{children:"0.(1428571)"})]}),"\n"]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"true"})]})]}),"\n",(0,l.jsx)("a",{id:"fractionaldigits"}),"\n",(0,l.jsx)(n.h5,{id:"fractionaldigits",children:"fractionalDigits"}),"\n",(0,l.jsx)("a",{id:"fractionaldigits",name:"fractionaldigits"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"jsonserializationoptionsfractionaldigits",children:"JsonSerializationOptions.fractionalDigits"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'fractionalDigits: "auto" | "max" | number;\n'})}),(0,l.jsx)(n.p,{children:"The maximum number of significant digits in serialized numbers."}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"max"'}),": all availabe digits are serialized."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'"auto"'}),": use the same precision as the compute engine."]}),"\n"]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:'"auto"'})]})]}),"\n",(0,l.jsx)("a",{id:"scope-2",name:"scope-2"}),"\n",(0,l.jsx)(n.h3,{id:"scope",children:"Scope"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Scope = object;\n"})}),"\n",(0,l.jsx)(n.p,{children:"A scope is a set of names in a dictionary that are bound (defined) in\na MathJSON expression."}),"\n",(0,l.jsx)(n.p,{children:"Scopes are arranged in a stack structure. When an expression that defined\na new scope is evaluated, the new scope is added to the scope stack.\nOutside of the expression, the scope is removed from the scope stack."}),"\n",(0,l.jsx)(n.p,{children:"The scope stack is used to resolve symbols, and it is possible for\na scope to 'mask' definitions from previous scopes."}),"\n",(0,l.jsx)(n.p,{children:"Scopes are lexical (also called a static scope): they are defined based on\nwhere they are in an expression, they are not determined at runtime."}),"\n",(0,l.jsx)("a",{id:"runtimescope",name:"runtimescope"}),"\n",(0,l.jsx)(n.h3,{id:"runtimescope",children:"RuntimeScope"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type RuntimeScope = Scope & object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-6",children:"Type declaration"}),"\n",(0,l.jsx)(n.h5,{id:"parentscope",children:"parentScope?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"runtimescopeparentscope",children:"RuntimeScope.parentScope?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional parentScope: RuntimeScope;\n"})})]}),"\n",(0,l.jsx)(n.h5,{id:"ids",children:"ids?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"runtimescopeids",children:"RuntimeScope.ids?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional ids: RuntimeIdentifierDefinitions;\n"})})]}),"\n",(0,l.jsx)(n.h5,{id:"assumptions",children:"assumptions"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"runtimescopeassumptions",children:"RuntimeScope.assumptions"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"assumptions: \n  | undefined\n| ExpressionMapInterface<boolean>;\n"})})]}),"\n",(0,l.jsx)(n.h2,{id:"boxed-expression",children:"Boxed Expression"}),"\n",(0,l.jsx)("a",{id:"boxedexpression",name:"boxedexpression"}),"\n",(0,l.jsx)(n.h3,{id:"boxedexpression",children:"BoxedExpression"}),"\n",(0,l.jsxs)(n.admonition,{title:"THEORY OF OPERATIONS",type:"info",children:[(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"BoxedExpression"})," interface includes most of the member functions\napplicable to any kind of expression, for example ",(0,l.jsx)(n.code,{children:"get symbol()"})," or\n",(0,l.jsx)(n.code,{children:"get ops()"}),"."]}),(0,l.jsxs)(n.p,{children:["When a member function is not applicable to this ",(0,l.jsx)(n.code,{children:"BoxedExpression"}),",\nfor example ",(0,l.jsx)(n.code,{children:"get symbol()"})," on a ",(0,l.jsx)(n.code,{children:"BoxedNumber"}),", it returns ",(0,l.jsx)(n.code,{children:"null"}),"."]}),(0,l.jsx)(n.p,{children:"This convention makes it convenient to manipulate expressions without\nhaving to check what kind of instance they are before manipulating them."})]}),"\n",(0,l.jsxs)(n.p,{children:["To get a boxed expression from a LaTeX string use ",(0,l.jsx)(n.code,{children:"ce.parse()"}),", or to\nget a boxed expression from a MathJSON expression use ",(0,l.jsx)(n.code,{children:"ce.box()"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"function-expression",children:"Function Expression"}),"\n",(0,l.jsx)("a",{id:"ops",name:"ops"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionops",children:"BoxedExpression.ops"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly ops: readonly BoxedExpression[];\n"})}),(0,l.jsx)(n.p,{children:"The list of operands of the function."}),(0,l.jsxs)(n.p,{children:["If the expression is not a function, return ",(0,l.jsx)(n.code,{children:"null"}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)("a",{id:"nops",name:"nops"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionnops",children:"BoxedExpression.nops"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly nops: number;\n"})}),(0,l.jsx)(n.p,{children:"If this expression is a function, the number of operands, otherwise 0."}),(0,l.jsxs)(n.p,{children:["Note that a function can have 0 operands, so to check if this expression\nis a function, check if ",(0,l.jsx)(n.code,{children:"this.ops !== null"})," instead."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)("a",{id:"op1",name:"op1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionop1",children:"BoxedExpression.op1"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly op1: BoxedExpression;\n"})}),(0,l.jsxs)(n.p,{children:["First operand, i.e.",(0,l.jsx)(n.code,{children:"this.ops[0]"}),"."]}),(0,l.jsxs)(n.p,{children:["If there is no first operand, return the symbol ",(0,l.jsx)(n.code,{children:"Nothing"}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)("a",{id:"op2",name:"op2"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionop2",children:"BoxedExpression.op2"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly op2: BoxedExpression;\n"})}),(0,l.jsxs)(n.p,{children:["Second operand, i.e.",(0,l.jsx)(n.code,{children:"this.ops[1]"})]}),(0,l.jsxs)(n.p,{children:["If there is no second operand, return the symbol ",(0,l.jsx)(n.code,{children:"Nothing"}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)("a",{id:"op3",name:"op3"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionop3",children:"BoxedExpression.op3"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly op3: BoxedExpression;\n"})}),(0,l.jsxs)(n.p,{children:["Third operand, i.e. ",(0,l.jsx)(n.code,{children:"this.ops[2]"})]}),(0,l.jsxs)(n.p,{children:["If there is no third operand, return the symbol ",(0,l.jsx)(n.code,{children:"Nothing"}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)(n.h4,{id:"numeric-expression",children:"Numeric Expression"}),"\n",(0,l.jsx)("a",{id:"isnan",name:"isnan"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisnan",children:"BoxedExpression.isNaN"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isNaN: boolean;\n"})}),(0,l.jsx)(n.p,{children:'"Not a Number".'}),(0,l.jsxs)(n.p,{children:["A value representing undefined result of computations, such as ",(0,l.jsx)(n.code,{children:"0/0"}),",\nas per the floating point format standard IEEE-754."]}),(0,l.jsxs)(n.p,{children:["Note that if ",(0,l.jsx)(n.code,{children:"isNaN"})," is true, ",(0,l.jsx)(n.code,{children:"isNumber"})," is also true (yes, ",(0,l.jsx)(n.code,{children:"NaN"})," is a\nnumber)."]})]}),"\n",(0,l.jsx)("a",{id:"isinfinity",name:"isinfinity"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisinfinity",children:"BoxedExpression.isInfinity"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isInfinity: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["The numeric value of this expression is ",(0,l.jsx)(n.code,{children:"\xb1Infinity"})," or Complex Infinity"]})]}),"\n",(0,l.jsx)("a",{id:"isfinite",name:"isfinite"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisfinite",children:"BoxedExpression.isFinite"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isFinite: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["This expression is a number, but not ",(0,l.jsx)(n.code,{children:"\xb1Infinity"}),", 'ComplexInfinity",(0,l.jsx)(n.code,{children:"or "}),"NaN`"]})]}),"\n",(0,l.jsx)("a",{id:"iseven",name:"iseven"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressioniseven",children:"BoxedExpression.isEven"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isEven: boolean;\n"})})]}),"\n",(0,l.jsx)("a",{id:"isodd",name:"isodd"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisodd",children:"BoxedExpression.isOdd"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isOdd: boolean;\n"})})]}),"\n",(0,l.jsx)("a",{id:"numericvalue",name:"numericvalue"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionnumericvalue",children:"BoxedExpression.numericValue"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly numericValue: number | NumericValue;\n"})}),(0,l.jsx)(n.p,{children:"Return the value of this expression, if a number literal."}),(0,l.jsxs)(n.p,{children:["Note it is possible for ",(0,l.jsx)(n.code,{children:"this.numericValue"})," to be ",(0,l.jsx)(n.code,{children:"null"}),", and for\n",(0,l.jsx)(n.code,{children:"this.isNotZero"})," to be true. For example, when a symbol has been\ndefined with an assumption."]}),(0,l.jsxs)(n.p,{children:["Conversely, ",(0,l.jsx)(n.code,{children:"this.isNumber"})," may be true even if ",(0,l.jsx)(n.code,{children:"numericValue"})," is ",(0,l.jsx)(n.code,{children:"null"}),",\nexample the symbol ",(0,l.jsx)(n.code,{children:"Pi"})," return ",(0,l.jsx)(n.code,{children:"true"})," for ",(0,l.jsx)(n.code,{children:"isNumber"})," but ",(0,l.jsx)(n.code,{children:"numericValue"})," is\n",(0,l.jsx)(n.code,{children:"null"}),". Its value can be accessed with ",(0,l.jsx)(n.code,{children:".N().numericValue"}),"."]}),(0,l.jsxs)(n.p,{children:["To check if an expression is a number literal, use ",(0,l.jsx)(n.code,{children:"this.isNumberLiteral"}),".\nIf ",(0,l.jsx)(n.code,{children:"this.isNumberLiteral"})," is ",(0,l.jsx)(n.code,{children:"true"}),", ",(0,l.jsx)(n.code,{children:"this.numericValue"})," is not ",(0,l.jsx)(n.code,{children:"null"})]})]}),"\n",(0,l.jsx)("a",{id:"isnumberliteral",name:"isnumberliteral"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisnumberliteral",children:"BoxedExpression.isNumberLiteral"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isNumberLiteral: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["Return ",(0,l.jsx)(n.code,{children:"true"})," if this expression is a number literal, for example\n",(0,l.jsx)(n.code,{children:"2"}),", ",(0,l.jsx)(n.code,{children:"3.14"}),", ",(0,l.jsx)(n.code,{children:"1/2"}),", ",(0,l.jsx)(n.code,{children:"\u221a2"})," etc."]}),(0,l.jsxs)(n.p,{children:["This is equivalent to checking if ",(0,l.jsx)(n.code,{children:"this.numericValue"})," is not ",(0,l.jsx)(n.code,{children:"null"}),"."]})]}),"\n",(0,l.jsx)("a",{id:"re",name:"re"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionre",children:"BoxedExpression.re"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly re: number;\n"})}),(0,l.jsx)(n.p,{children:"If this expression is a number literal or a symbol with a value that\nis a number literal, return the real part of the value."}),(0,l.jsxs)(n.p,{children:["If the expression is not a number literal, or a symbol with a value\nthat is a number literal, return ",(0,l.jsx)(n.code,{children:"NaN"})," (not a number)."]})]}),"\n",(0,l.jsx)("a",{id:"im",name:"im"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionim",children:"BoxedExpression.im"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly im: number;\n"})}),(0,l.jsx)(n.p,{children:"If this expression is a number literal or a symbol with a value that\nis a number literal, return the imaginary part of the value. If the value\nis a real number, the imaginary part is 0."}),(0,l.jsxs)(n.p,{children:["If the expression is not a number literal, or a symbol with a value\nthat is a number literal, return ",(0,l.jsx)(n.code,{children:"NaN"})," (not a number)."]})]}),"\n",(0,l.jsx)("a",{id:"bignumre",name:"bignumre"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionbignumre",children:"BoxedExpression.bignumRe"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly bignumRe: Decimal;\n"})}),(0,l.jsxs)(n.p,{children:["If this expression is a number literal or a symbol with a value that\nis a number literal, return the real part of the value as a ",(0,l.jsx)(n.code,{children:"BigNum"}),"."]}),(0,l.jsxs)(n.p,{children:["If the value is not available as a bignum return ",(0,l.jsx)(n.code,{children:"undefined"}),". That is,\nthe value is not upconverted to a bignum."]}),(0,l.jsxs)(n.p,{children:["To get the real value either as a bignum or a number, use\n",(0,l.jsx)(n.code,{children:"this.bignumRe ?? this.re"}),". When using this pattern, the value is\nreturned as a bignum if available, otherwise as a number or NaN if\nthe value is not a number literal or a symbol with a value that is a\nnumber literal."]})]}),"\n",(0,l.jsx)("a",{id:"bignumim",name:"bignumim"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionbignumim",children:"BoxedExpression.bignumIm"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly bignumIm: Decimal;\n"})}),(0,l.jsxs)(n.p,{children:["If this expression is a number literal, return the imaginary part as a\n",(0,l.jsx)(n.code,{children:"BigNum"}),"."]}),(0,l.jsx)(n.p,{children:"It may be 0 if the number is real."}),(0,l.jsxs)(n.p,{children:["If the expression is not a number literal or the value is not available\nas a bignum return ",(0,l.jsx)(n.code,{children:"undefined"}),". That is, the value is not upconverted\nto a bignum."]}),(0,l.jsxs)(n.p,{children:["To get the imaginary value either as a bignum or a number, use\n",(0,l.jsx)(n.code,{children:"this.bignumIm ?? this.im"}),". When using this pattern, the value is\nreturned as a bignum if available, otherwise as a number or NaN if\nthe value is not a number literal or a symbol with a value that is a\nnumber literal."]})]}),"\n",(0,l.jsx)("a",{id:"sgn",name:"sgn"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsgn",children:"BoxedExpression.sgn"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly sgn: Sign;\n"})}),(0,l.jsx)(n.p,{children:"Return the sign of the expression."}),(0,l.jsxs)(n.p,{children:["Note that complex numbers have no natural ordering,\nso if the value is an imaginary number (a complex number with a non-zero\nimaginary part), ",(0,l.jsx)(n.code,{children:"this.sgn"})," will return ",(0,l.jsx)(n.code,{children:"unsigned"}),"."]}),(0,l.jsxs)(n.p,{children:["If a symbol, this does take assumptions into account, that is ",(0,l.jsx)(n.code,{children:"this.sgn"}),"\nwill return ",(0,l.jsx)(n.code,{children:"positive"})," if the symbol is assumed to be positive\n(using ",(0,l.jsx)(n.code,{children:"ce.assume()"}),")."]})]}),"\n",(0,l.jsx)("a",{id:"ispositive",name:"ispositive"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionispositive",children:"BoxedExpression.isPositive"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isPositive: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["The numeric value of this expression is > 0, same as ",(0,l.jsx)(n.code,{children:"isGreater(0)"})]})]}),"\n",(0,l.jsx)("a",{id:"isnonnegative",name:"isnonnegative"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisnonnegative",children:"BoxedExpression.isNonNegative"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isNonNegative: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["The numeric value of this expression is >= 0, same as ",(0,l.jsx)(n.code,{children:"isGreaterEqual(0)"})]})]}),"\n",(0,l.jsx)("a",{id:"isnegative",name:"isnegative"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisnegative",children:"BoxedExpression.isNegative"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isNegative: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["The numeric value of this expression is < 0, same as ",(0,l.jsx)(n.code,{children:"isLess(0)"})]})]}),"\n",(0,l.jsx)("a",{id:"isnonpositive",name:"isnonpositive"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisnonpositive",children:"BoxedExpression.isNonPositive"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isNonPositive: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["The numeric value of this expression is <= 0, same as ",(0,l.jsx)(n.code,{children:"isLessEqual(0)"})]})]}),"\n",(0,l.jsx)(n.h4,{id:"other",children:"Other"}),"\n",(0,l.jsx)("a",{id:"engine",name:"engine"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionengine",children:"BoxedExpression.engine"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly engine: IComputeEngine;\n"})}),(0,l.jsx)(n.p,{children:"The Compute Engine associated with this expression provides\na context in which to interpret it, such as definition of symbols\nand functions."})]}),"\n",(0,l.jsx)("a",{id:"tomathjson",name:"tomathjson"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiontomathjson",children:"BoxedExpression.toMathJson()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"toMathJson(options?): Expression\n"})}),(0,l.jsx)(n.p,{children:"Serialize to a MathJSON expression with specified options"}),(0,l.jsx)(n.h6,{id:"options",children:"options?"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Readonly"}),"<",(0,l.jsx)(n.code,{children:"Partial"}),"<",(0,l.jsx)(n.a,{href:"#jsonserializationoptions",children:(0,l.jsx)(n.code,{children:"JsonSerializationOptions"})}),">>"]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"Expression"})})]}),"\n",(0,l.jsx)("a",{id:"tolatex",name:"tolatex"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiontolatex",children:"BoxedExpression.toLatex()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"toLatex(options?): string\n"})}),(0,l.jsx)(n.p,{children:"Serialize to a LaTeX string."}),(0,l.jsx)(n.p,{children:"Will ignore any LaTeX metadata."}),(0,l.jsx)(n.h6,{id:"options-1",children:"options?"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Partial"}),"<",(0,l.jsx)(n.code,{children:"SerializeLatexOptions"}),">"]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"string"})})]}),"\n",(0,l.jsx)("a",{id:"verbatimlatex",name:"verbatimlatex"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionverbatimlatex",children:"BoxedExpression.verbatimLatex?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional verbatimLatex: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"iscanonical",name:"iscanonical"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressioniscanonical",children:"BoxedExpression.isCanonical"}),(0,l.jsx)(n.h6,{id:"get-signature",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get isCanonical(): boolean\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", this expression is in a canonical form."]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"isstructural",name:"isstructural"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisstructural",children:"BoxedExpression.isStructural"}),(0,l.jsx)(n.h6,{id:"get-signature-1",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get isStructural(): boolean\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", this expression is in a structural form."]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"json",name:"json"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionjson",children:"BoxedExpression.json"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly json: Expression;\n"})}),(0,l.jsx)(n.p,{children:"MathJSON representation of this expression."}),(0,l.jsx)(n.p,{children:"This representation always use shorthands when possible. Metadata is not\nincluded."}),(0,l.jsx)(n.p,{children:"Numbers are converted to JavaScript numbers and may lose precision."}),(0,l.jsxs)(n.p,{children:["The expression is represented exactly and no sugaring is applied. For\nexample, ",(0,l.jsx)(n.code,{children:'["Power", "x", 2]'})," is not represented as ",(0,l.jsx)(n.code,{children:'["Square", "x"]'}),"."]}),(0,l.jsxs)(n.p,{children:["For more control over the serialization, use ",(0,l.jsx)(n.code,{children:"expr.toMathJson()"}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)("a",{id:"scope",name:"scope"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionscope",children:"BoxedExpression.scope"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly scope: object;\n"})}),(0,l.jsx)(n.p,{children:"The scope in which this expression has been defined."}),(0,l.jsxs)(n.p,{children:["Is ",(0,l.jsx)(n.code,{children:"null"})," when the expression is not canonical."]}),(0,l.jsx)("a",{id:""}),(0,l.jsx)(n.h6,{id:"parentscope-1",children:"parentScope?"}),(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"scopeparentscope",children:"scope.parentScope?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional parentScope: { parentScope?: ...; ids?: RuntimeIdentifierDefinitions; assumptions: ExpressionMapInterface<boolean>; };\n"})})]}),(0,l.jsx)("a",{id:""}),(0,l.jsx)(n.h6,{id:"ids-1",children:"ids?"}),(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"scopeids",children:"scope.ids?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional ids: RuntimeIdentifierDefinitions;\n"})})]}),(0,l.jsx)("a",{id:""}),(0,l.jsx)(n.h6,{id:"assumptions-1",children:"assumptions"}),(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"scopeassumptions",children:"scope.assumptions"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"assumptions: ExpressionMapInterface<boolean>;\n"})})]})]}),"\n",(0,l.jsx)("a",{id:"latex",name:"latex"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionlatex",children:"BoxedExpression.latex"}),(0,l.jsx)(n.h6,{id:"get-signature-2",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get latex(): string\n"})}),(0,l.jsx)(n.p,{children:"LaTeX representation of this expression."}),(0,l.jsx)(n.p,{children:"If the expression was parsed from LaTeX, the LaTeX representation is\nthe same as the input LaTeX."}),(0,l.jsxs)(n.p,{children:["To customize the serialization, use ",(0,l.jsx)(n.code,{children:"expr.toLatex()"}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"string"})})]}),"\n",(0,l.jsx)("a",{id:"getsubexpressions",name:"getsubexpressions"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiongetsubexpressions",children:"BoxedExpression.getSubexpressions()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"getSubexpressions(name): readonly BoxedExpression[]\n"})}),(0,l.jsx)(n.p,{children:"All the subexpressions matching the named operator, recursively."}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})}),(0,l.jsx)(n.h6,{id:"name",children:"name"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"string"})}),(0,l.jsxs)(n.p,{children:["readonly ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),"[]"]})]}),"\n",(0,l.jsx)("a",{id:"subexpressions",name:"subexpressions"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsubexpressions",children:"BoxedExpression.subexpressions"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly subexpressions: readonly BoxedExpression[];\n"})}),(0,l.jsx)(n.p,{children:"All the subexpressions in this expression, recursively"}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)("a",{id:"symbols",name:"symbols"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsymbols",children:"BoxedExpression.symbols"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly symbols: readonly string[];\n"})}),(0,l.jsx)(n.p,{children:"All the symbols in the expression, recursively"}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)("a",{id:"unknowns",name:"unknowns"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionunknowns",children:"BoxedExpression.unknowns"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly unknowns: readonly string[];\n"})}),(0,l.jsx)(n.p,{children:"All the identifiers used in the expression that do not have a value\nassociated with them, i.e. they are declared but not defined."})]}),"\n",(0,l.jsx)("a",{id:"freevariables",name:"freevariables"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionfreevariables",children:"BoxedExpression.freeVariables"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly freeVariables: readonly string[];\n"})}),(0,l.jsx)(n.p,{children:"All the identifiers (symbols and functions) in the expression that are\nnot a local variable or a parameter of that function."})]}),"\n",(0,l.jsx)("a",{id:"errors",name:"errors"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionerrors",children:"BoxedExpression.errors"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly errors: readonly BoxedExpression[];\n"})}),(0,l.jsxs)(n.p,{children:["All the ",(0,l.jsx)(n.code,{children:'["Error"]'})," subexpressions."]}),(0,l.jsxs)(n.p,{children:["If an expression includes an error, the expression is also an error.\nIn that case, the ",(0,l.jsx)(n.code,{children:"this.isValid"})," property is ",(0,l.jsx)(n.code,{children:"false"}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)("a",{id:"operator",name:"operator"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionoperator",children:"BoxedExpression.operator"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly operator: string;\n"})}),(0,l.jsx)(n.p,{children:"The name of the operator of the expression."}),(0,l.jsxs)(n.p,{children:["For example, the name of the operator of ",(0,l.jsx)(n.code,{children:'["Add", 2, 3]'})," is ",(0,l.jsx)(n.code,{children:'"Add"'}),"."]}),(0,l.jsxs)(n.p,{children:["A string literal has a ",(0,l.jsx)(n.code,{children:'"String"'})," operator."]}),(0,l.jsxs)(n.p,{children:["A symbol has a ",(0,l.jsx)(n.code,{children:'"Symbol"'})," operator."]}),(0,l.jsxs)(n.p,{children:["A number has a ",(0,l.jsx)(n.code,{children:'"Number"'}),", ",(0,l.jsx)(n.code,{children:'"Real"'}),", ",(0,l.jsx)(n.code,{children:'"Rational"'})," or ",(0,l.jsx)(n.code,{children:'"Integer"'})," operator."]})]}),"\n",(0,l.jsx)("a",{id:"ispure",name:"ispure"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionispure",children:"BoxedExpression.isPure"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isPure: boolean;\n"})}),(0,l.jsx)(n.p,{children:"If true, the value of the expression never changes and evaluating it has\nno side-effects."}),(0,l.jsx)(n.p,{children:"If false, the value of the expression may change, if the\nvalue of other expression changes or for other reasons."}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"this.isPure"})," is ",(0,l.jsx)(n.code,{children:"false"}),", ",(0,l.jsx)(n.code,{children:"this.value"})," is undefined. Call\n",(0,l.jsx)(n.code,{children:"this.evaluate()"})," to determine the value of the expression instead."]}),(0,l.jsxs)(n.p,{children:["As an example, the ",(0,l.jsx)(n.code,{children:"Random"})," function is not pure."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)("a",{id:"isconstant",name:"isconstant"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisconstant",children:"BoxedExpression.isConstant"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isConstant: boolean;\n"})}),(0,l.jsx)(n.p,{children:"True if the the value of the expression does not depend on the value of\nany other expression."}),(0,l.jsx)(n.p,{children:"For example, a number literal, a symbol with a constant value."}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"2"})," is constant"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Pi"})," is constant"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'["Add", "Pi", 2]'})," is constant"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"x"})," is not constant"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'["Add", "x", 2]'})," is not constant"]}),"\n"]})]}),"\n",(0,l.jsx)("a",{id:"canonical",name:"canonical"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressioncanonical",children:"BoxedExpression.canonical"}),(0,l.jsx)(n.h6,{id:"get-signature-3",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get canonical(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"Return the canonical form of this expression."}),(0,l.jsx)(n.p,{children:"If this is a function expression, a definition is associated with the\ncanonical expression."}),(0,l.jsx)(n.p,{children:"When determining the canonical form the following function definition\nflags are applied:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"associative"}),": \\( f(a, f(b), c) \\longrightarrow f(a, b, c) \\)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"idempotent"}),": \\( f(f(a)) \\longrightarrow f(a) \\)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"involution"}),": \\( f(f(a)) \\longrightarrow a \\)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"commutative"}),": sort the arguments."]}),"\n"]}),(0,l.jsxs)(n.p,{children:["If this expression is already canonical, the value of canonical is\n",(0,l.jsx)(n.code,{children:"this"}),"."]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"structural",name:"structural"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionstructural",children:"BoxedExpression.structural"}),(0,l.jsx)(n.h6,{id:"get-signature-4",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get structural(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"Return the structural form of this expression."}),(0,l.jsxs)(n.p,{children:["Some expressions, such as rational numbers, are represented with\na ",(0,l.jsx)(n.code,{children:"BoxedExpression"})," object. In some cases, for example when doing a\nstructural comparison of two expressions, it is useful to have a\nstructural representation of the expression where the rational numbers\nis represented by a function expression instead."]}),(0,l.jsxs)(n.p,{children:["If there is a structural representation of the expression, return it,\notherwise return ",(0,l.jsx)(n.code,{children:"this"}),"."]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"subs",name:"subs"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsubs",children:"BoxedExpression.subs()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"subs(sub, options?): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"Replace all the symbols in the expression as indicated."}),(0,l.jsxs)(n.p,{children:["Note the same effect can be achieved with ",(0,l.jsx)(n.code,{children:"this.replace()"}),", but\nusing ",(0,l.jsx)(n.code,{children:"this.subs()"})," is more efficient, and simpler, but limited\nto replacing symbols."]}),(0,l.jsxs)(n.p,{children:["The result is bound to the current scope, not to ",(0,l.jsx)(n.code,{children:"this.scope"}),"."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"options.canonical"})," is not set, the result is canonical if ",(0,l.jsx)(n.code,{children:"this"}),"\nis canonical."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})}),(0,l.jsx)(n.h6,{id:"sub",children:"sub"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#substitutiont",children:(0,l.jsx)(n.code,{children:"Substitution"})}),"<",(0,l.jsx)(n.a,{href:"#semiboxedexpression",children:(0,l.jsx)(n.code,{children:"SemiBoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-2",children:"options?"}),(0,l.jsx)(n.h6,{id:"canonical",children:"canonical"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#canonicaloptions",children:(0,l.jsx)(n.code,{children:"CanonicalOptions"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"map",name:"map"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionmap",children:"BoxedExpression.map()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"map(fn, options?): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"Recursively replace all the subexpressions in the expression as indicated."}),(0,l.jsxs)(n.p,{children:["To remove a subexpression, return an empty ",(0,l.jsx)(n.code,{children:'["Sequence"]'})," expression."]}),(0,l.jsx)(n.p,{children:"The canonical option is applied to each function subexpression after\nthe substitution is applied."}),(0,l.jsxs)(n.p,{children:["If no ",(0,l.jsx)(n.code,{children:"options.canonical"})," is set, the result is canonical if ",(0,l.jsx)(n.code,{children:"this"}),"\nis canonical."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"{ canonical: this.isCanonical, recursive: true }"})]}),(0,l.jsx)(n.h6,{id:"fn",children:"fn"}),(0,l.jsxs)(n.p,{children:["(",(0,l.jsx)(n.code,{children:"expr"}),") => ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.h6,{id:"options-3",children:"options?"}),(0,l.jsx)(n.h6,{id:"canonical-1",children:"canonical"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#canonicaloptions",children:(0,l.jsx)(n.code,{children:"CanonicalOptions"})})}),(0,l.jsx)(n.h6,{id:"recursive",children:"recursive"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"replace",name:"replace"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionreplace",children:"BoxedExpression.replace()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"replace(rules, options?): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"Transform the expression by applying one or more replacement rules:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["If the expression matches the ",(0,l.jsx)(n.code,{children:"match"})," pattern and the ",(0,l.jsx)(n.code,{children:"condition"}),"\npredicate is true, replace it with the ",(0,l.jsx)(n.code,{children:"replace"})," pattern."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["If no rules apply, return ",(0,l.jsx)(n.code,{children:"null"}),"."]}),"\n"]}),"\n"]}),(0,l.jsxs)(n.p,{children:["See also ",(0,l.jsx)(n.code,{children:"expr.subs()"})," for a simple substitution of symbols."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"options.canonical"})," is not set, the result is canonical if ",(0,l.jsx)(n.code,{children:"this"}),"\nis canonical."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})}),(0,l.jsx)(n.h6,{id:"rules-1",children:"rules"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#rule",children:(0,l.jsx)(n.code,{children:"Rule"})})," | ",(0,l.jsx)(n.a,{href:"#boxedruleset",children:(0,l.jsx)(n.code,{children:"BoxedRuleSet"})})," | ",(0,l.jsx)(n.a,{href:"#rule",children:(0,l.jsx)(n.code,{children:"Rule"})}),"[]"]}),(0,l.jsx)(n.h6,{id:"options-4",children:"options?"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Partial"}),"<",(0,l.jsx)(n.a,{href:"#replaceoptions",children:(0,l.jsx)(n.code,{children:"ReplaceOptions"})}),">"]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"has",name:"has"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionhas",children:"BoxedExpression.has()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"has(v): boolean\n"})}),(0,l.jsxs)(n.p,{children:["True if the expression includes a symbol ",(0,l.jsx)(n.code,{children:"v"})," or a function operator ",(0,l.jsx)(n.code,{children:"v"}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})}),(0,l.jsx)(n.h6,{id:"v",children:"v"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"string"})," | ",(0,l.jsx)(n.code,{children:"string"}),"[]"]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"numerator",name:"numerator"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionnumerator",children:"BoxedExpression.numerator"}),(0,l.jsx)(n.h6,{id:"get-signature-5",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get numerator(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"Return this expression expressed as a numerator and denominator."}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"denominator",name:"denominator"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiondenominator",children:"BoxedExpression.denominator"}),(0,l.jsx)(n.h6,{id:"get-signature-6",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get denominator(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"numeratordenominator",name:"numeratordenominator"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionnumeratordenominator",children:"BoxedExpression.numeratorDenominator"}),(0,l.jsx)(n.h6,{id:"get-signature-7",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get numeratorDenominator(): [BoxedExpression, BoxedExpression]\n"})}),(0,l.jsxs)(n.p,{children:["[",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),", ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),"]"]})]}),"\n",(0,l.jsx)("a",{id:"match",name:"match"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionmatch",children:"BoxedExpression.match()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"match(pattern, options?): BoxedSubstitution\n"})}),(0,l.jsxs)(n.p,{children:["If this expression matches ",(0,l.jsx)(n.code,{children:"pattern"}),", return a substitution that makes\n",(0,l.jsx)(n.code,{children:"pattern"})," equal to ",(0,l.jsx)(n.code,{children:"this"}),". Otherwise return ",(0,l.jsx)(n.code,{children:"null"}),"."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"pattern"})," includes wildcards (identifiers that start\nwith ",(0,l.jsx)(n.code,{children:"_"}),"), the substitution will include a prop for each matching named\nwildcard."]}),(0,l.jsxs)(n.p,{children:["If this expression matches ",(0,l.jsx)(n.code,{children:"pattern"})," but there are no named wildcards,\nreturn the empty substitution, ",(0,l.jsx)(n.code,{children:"{}"}),"."]}),(0,l.jsxs)(n.p,{children:["Read more about ",(0,l.jsx)(n.a,{href:"/compute-engine/guides/patterns-and-rules/",children:(0,l.jsx)(n.strong,{children:"patterns and rules"})}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})}),(0,l.jsx)(n.h6,{id:"pattern",children:"pattern"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"options-5",children:"options?"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#patternmatchoptions",children:(0,l.jsx)(n.code,{children:"PatternMatchOptions"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedsubstitution",children:(0,l.jsx)(n.code,{children:"BoxedSubstitution"})})})]}),"\n",(0,l.jsx)("a",{id:"isfunctionexpression",name:"isfunctionexpression"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisfunctionexpression",children:"BoxedExpression.isFunctionExpression"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isFunctionExpression: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["Return ",(0,l.jsx)(n.code,{children:"true"})," if this expression is a function expression."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", ",(0,l.jsx)(n.code,{children:"this.ops"})," is not ",(0,l.jsx)(n.code,{children:"null"}),", and ",(0,l.jsx)(n.code,{children:"this.operator"})," is the name\nof the function."]})]}),"\n",(0,l.jsx)("a",{id:"tonumericvalue",name:"tonumericvalue"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiontonumericvalue",children:"BoxedExpression.toNumericValue()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"toNumericValue(): [NumericValue, BoxedExpression]\n"})}),(0,l.jsxs)(n.p,{children:["Attempt to factor a numeric coefficient ",(0,l.jsx)(n.code,{children:"c"})," and a ",(0,l.jsx)(n.code,{children:"rest"})," out of a\ncanonical expression such that ",(0,l.jsx)(n.code,{children:"rest.mul(c)"})," is equal to ",(0,l.jsx)(n.code,{children:"this"}),"."]}),(0,l.jsxs)(n.p,{children:["Attempts to make ",(0,l.jsx)(n.code,{children:"rest"})," a positive value (i.e. pulls out negative sign)."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:"['Multiply', 2, 'x', 3, 'a']\n   -> [NumericValue(6), ['Multiply', 'x', 'a']]\n\n['Divide', ['Multiply', 2, 'x'], ['Multiply', 3, 'y', 'a']]\n   -> [NumericValue({rational: [2, 3]}), ['Divide', 'x', ['Multiply, 'y', 'a']]]\n"})}),(0,l.jsxs)(n.p,{children:["[",(0,l.jsx)(n.code,{children:"NumericValue"}),", ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),"]"]})]}),"\n",(0,l.jsx)("a",{id:"neg",name:"neg"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionneg",children:"BoxedExpression.neg()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"neg(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"inv",name:"inv"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressioninv",children:"BoxedExpression.inv()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"inv(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"abs",name:"abs"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionabs",children:"BoxedExpression.abs()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"abs(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"add",name:"add"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionadd",children:"BoxedExpression.add()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"add(rhs): BoxedExpression\n"})}),(0,l.jsx)(n.h6,{id:"rhs",children:"rhs"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"sub",name:"sub"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsub",children:"BoxedExpression.sub()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"sub(rhs): BoxedExpression\n"})}),(0,l.jsx)(n.h6,{id:"rhs-1",children:"rhs"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"mul",name:"mul"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionmul",children:"BoxedExpression.mul()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"mul(rhs): BoxedExpression\n"})}),(0,l.jsx)(n.h6,{id:"rhs-2",children:"rhs"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})," | ",(0,l.jsx)(n.code,{children:"NumericValue"})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"div",name:"div"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiondiv",children:"BoxedExpression.div()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"div(rhs): BoxedExpression\n"})}),(0,l.jsx)(n.h6,{id:"rhs-3",children:"rhs"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"pow",name:"pow"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionpow",children:"BoxedExpression.pow()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"pow(exp): BoxedExpression\n"})}),(0,l.jsx)(n.h6,{id:"exp",children:"exp"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"root",name:"root"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionroot",children:"BoxedExpression.root()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"root(exp): BoxedExpression\n"})}),(0,l.jsx)(n.h6,{id:"exp-1",children:"exp"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"sqrt",name:"sqrt"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsqrt",children:"BoxedExpression.sqrt()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"sqrt(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"ln",name:"ln"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionln",children:"BoxedExpression.ln()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"ln(base?): BoxedExpression\n"})}),(0,l.jsx)(n.h6,{id:"base",children:"base?"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"shape",name:"shape"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionshape",children:"BoxedExpression.shape"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly shape: number[];\n"})}),(0,l.jsx)(n.p,{children:"The shape describes the axis of the expression."}),(0,l.jsxs)(n.p,{children:["When the expression is a scalar (number), the shape is ",(0,l.jsx)(n.code,{children:"[]"}),"."]}),(0,l.jsxs)(n.p,{children:["When the expression is a vector of length ",(0,l.jsx)(n.code,{children:"n"}),", the shape is ",(0,l.jsx)(n.code,{children:"[n]"}),"."]}),(0,l.jsxs)(n.p,{children:["When the expression is a ",(0,l.jsx)(n.code,{children:"n"})," by ",(0,l.jsx)(n.code,{children:"m"})," matrix, the shape is ",(0,l.jsx)(n.code,{children:"[n, m]"}),"."]})]}),"\n",(0,l.jsx)("a",{id:"rank",name:"rank"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionrank",children:"BoxedExpression.rank"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly rank: number;\n"})}),(0,l.jsx)(n.p,{children:"Return 0 for a scalar, 1 for a vector, 2 for a matrix, > 2 for\na multidimensional matrix."}),(0,l.jsxs)(n.p,{children:["The rank is equivalent to the length of ",(0,l.jsx)(n.code,{children:"expr.shape"})]})]}),"\n",(0,l.jsx)("a",{id:"wikidata",name:"wikidata"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionwikidata",children:"BoxedExpression.wikidata"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly wikidata: string;\n"})}),(0,l.jsx)(n.p,{children:"Wikidata identifier."}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"undefined"})," if not a canonical expression."]})})]}),"\n",(0,l.jsx)("a",{id:"description",name:"description"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiondescription",children:"BoxedExpression.description"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly description: string[];\n"})}),(0,l.jsx)(n.p,{children:"An optional short description if a symbol or function expression."}),(0,l.jsx)(n.p,{children:"May include markdown. Each string is a paragraph."}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"undefined"})," if not a canonical expression."]})})]}),"\n",(0,l.jsx)("a",{id:"url",name:"url"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionurl",children:"BoxedExpression.url"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly url: string;\n"})}),(0,l.jsx)(n.p,{children:"An optional URL pointing to more information about the symbol or\nfunction operator."}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"undefined"})," if not a canonical expression."]})})]}),"\n",(0,l.jsx)("a",{id:"complexity",name:"complexity"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressioncomplexity",children:"BoxedExpression.complexity"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly complexity: number;\n"})}),(0,l.jsx)(n.p,{children:"Expressions with a higher complexity score are sorted\nfirst in commutative functions"}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"undefined"})," if not a canonical expression."]})})]}),"\n",(0,l.jsx)("a",{id:"basedefinition",name:"basedefinition"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionbasedefinition",children:"BoxedExpression.baseDefinition"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly baseDefinition: BoxedBaseDefinition;\n"})}),(0,l.jsxs)(n.p,{children:["For symbols and functions, a definition associated with the\nexpression. ",(0,l.jsx)(n.code,{children:"this.baseDefinition"})," is the base class of symbol and function\ndefinition."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"undefined"})," if not a canonical expression."]})})]}),"\n",(0,l.jsx)("a",{id:"functiondefinition",name:"functiondefinition"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionfunctiondefinition",children:"BoxedExpression.functionDefinition"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly functionDefinition: BoxedFunctionDefinition;\n"})}),(0,l.jsx)(n.p,{children:"For functions, a definition associated with the expression."}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"undefined"})," if not a canonical expression or not a function."]})})]}),"\n",(0,l.jsx)("a",{id:"symboldefinition",name:"symboldefinition"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsymboldefinition",children:"BoxedExpression.symbolDefinition"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly symbolDefinition: BoxedSymbolDefinition;\n"})}),(0,l.jsx)(n.p,{children:"For symbols, a definition associated with the expression."}),(0,l.jsxs)(n.p,{children:["Return ",(0,l.jsx)(n.code,{children:"undefined"})," if not a symbol"]})]}),"\n",(0,l.jsx)("a",{id:"simplify",name:"simplify"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsimplify",children:"BoxedExpression.simplify()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"simplify(options?): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"Return a simpler form of this expression."}),(0,l.jsx)(n.p,{children:"A series of rewriting rules are applied repeatedly, until no more rules\napply."}),(0,l.jsxs)(n.p,{children:["The values assigned to symbols and the assumptions about symbols may be\nused, for example ",(0,l.jsx)(n.code,{children:"expr.isInteger"})," or ",(0,l.jsx)(n.code,{children:"expr.isPositive"}),"."]}),(0,l.jsx)(n.p,{children:"No calculations involving decimal numbers (numbers that are not\nintegers) are performed but exact calculations may be performed,\nfor example:"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{className:"language-math math-inline",children:"\\sin(\\frac{\\pi}{4}) \\longrightarrow \\frac{\\sqrt{2}}{2}"}),"."]}),(0,l.jsx)(n.p,{children:"The result is canonical."}),(0,l.jsxs)(n.p,{children:["To manipulate symbolically non-canonical expressions, use ",(0,l.jsx)(n.code,{children:"expr.replace()"}),"."]}),(0,l.jsx)(n.h6,{id:"options-6",children:"options?"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Partial"}),"<",(0,l.jsx)(n.a,{href:"#simplifyoptions",children:(0,l.jsx)(n.code,{children:"SimplifyOptions"})}),">"]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"expand",name:"expand"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionexpand",children:"BoxedExpression.expand()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"expand(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"Expand the expression: distribute multiplications over additions,\nand expand powers."}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"evaluate",name:"evaluate"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionevaluate",children:"BoxedExpression.evaluate()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"evaluate(options?): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"Return the value of the canonical form of this expression."}),(0,l.jsxs)(n.p,{children:["A pure expression always return the same value and has no side effects.\nIf ",(0,l.jsx)(n.code,{children:"expr.isPure"})," is ",(0,l.jsx)(n.code,{children:"true"}),", ",(0,l.jsx)(n.code,{children:"expr.value"})," and ",(0,l.jsx)(n.code,{children:"expr.evaluate()"})," are\nsynonyms."]}),(0,l.jsxs)(n.p,{children:["For an impure expression, ",(0,l.jsx)(n.code,{children:"expr.value"})," is undefined."]}),(0,l.jsxs)(n.p,{children:["Evaluating an impure expression may have some side effects, for\nexample modifying the ",(0,l.jsx)(n.code,{children:"ComputeEngine"})," environment, such as its set of\nassumptions."]}),(0,l.jsx)(n.p,{children:"The result may be a rational number or the product of a rational number\nand the square root of an integer."}),(0,l.jsxs)(n.p,{children:["To perform approximate calculations, use ",(0,l.jsx)(n.code,{children:"expr.N()"})," instead,\nor set ",(0,l.jsx)(n.code,{children:"options.numericApproximation"})," to ",(0,l.jsx)(n.code,{children:"true"}),"."]}),(0,l.jsxs)(n.p,{children:["The result of ",(0,l.jsx)(n.code,{children:"expr.evaluate()"})," may be the same as ",(0,l.jsx)(n.code,{children:"expr.simplify()"}),"."]}),(0,l.jsx)(n.p,{children:"The result is in canonical form."}),(0,l.jsx)(n.h6,{id:"options-7",children:"options?"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Partial"}),"<",(0,l.jsx)(n.a,{href:"#evaluateoptions",children:(0,l.jsx)(n.code,{children:"EvaluateOptions"})}),">"]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"evaluateasync",name:"evaluateasync"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionevaluateasync",children:"BoxedExpression.evaluateAsync()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"evaluateAsync(options?): Promise<BoxedExpression>\n"})}),(0,l.jsxs)(n.p,{children:["Asynchronous version of ",(0,l.jsx)(n.code,{children:"evaluate()"}),"."]}),(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"options"})," argument can include a ",(0,l.jsx)(n.code,{children:"signal"})," property, which is an\n",(0,l.jsx)(n.code,{children:"AbortSignal"})," object. If the signal is aborted, a ",(0,l.jsx)(n.code,{children:"CancellationError"})," is thrown."]}),(0,l.jsx)(n.h6,{id:"options-8",children:"options?"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Partial"}),"<",(0,l.jsx)(n.a,{href:"#evaluateoptions",children:(0,l.jsx)(n.code,{children:"EvaluateOptions"})}),">"]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Promise"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]})]}),"\n",(0,l.jsx)("a",{id:"n",name:"n"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionn",children:"BoxedExpression.N()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"N(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"Return a numeric approximation of the canonical form of this expression."}),(0,l.jsx)(n.p,{children:"Any necessary calculations, including on decimal numbers (non-integers),\nare performed."}),(0,l.jsxs)(n.p,{children:["The calculations are performed according to the\n",(0,l.jsx)(n.code,{children:"precision"})," property of the ",(0,l.jsx)(n.code,{children:"ComputeEngine"}),"."]}),(0,l.jsxs)(n.p,{children:["To only perform exact calculations, use ",(0,l.jsx)(n.code,{children:"this.evaluate()"})," instead."]}),(0,l.jsxs)(n.p,{children:["If the function is not numeric, the result of ",(0,l.jsx)(n.code,{children:"this.N()"})," is the same as\n",(0,l.jsx)(n.code,{children:"this.evaluate()"}),"."]}),(0,l.jsx)(n.p,{children:"The result is in canonical form."}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"compile",name:"compile"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressioncompile",children:"BoxedExpression.compile()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"compile(options?): (args?) => CompiledType\n"})}),(0,l.jsx)(n.p,{children:"Compile the expression to a JavaScript function."}),(0,l.jsx)(n.p,{children:"The function takes an object as argument, with the keys being the\nsymbols in the expression, and returns the value of the expression."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"const expr = ce.parse('x^2 + y^2');\nconst f = expr.compile();\nconsole.log(f({x: 2, y: 3}));\n"})}),(0,l.jsx)(n.h6,{id:"options-9",children:"options?"}),(0,l.jsx)(n.h6,{id:"to",children:"to"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:'"javascript"'})}),(0,l.jsx)(n.h6,{id:"optimize",children:"optimize"}),(0,l.jsxs)(n.p,{children:["(",(0,l.jsx)(n.code,{children:'"evaluate"'})," | ",(0,l.jsx)(n.code,{children:'"simplify"'}),")[]"]}),(0,l.jsx)(n.h6,{id:"functions",children:"functions"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Record"}),"<",(0,l.jsx)(n.code,{children:"string"}),", ",(0,l.jsx)(n.code,{children:"string"})," | (...",(0,l.jsx)(n.code,{children:"any"}),") => ",(0,l.jsx)(n.code,{children:"any"}),">"]}),(0,l.jsx)(n.h6,{id:"vars",children:"vars"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Record"}),"<",(0,l.jsx)(n.code,{children:"string"}),", ",(0,l.jsx)(n.code,{children:"CompiledType"}),">"]}),(0,l.jsx)(n.h6,{id:"imports",children:"imports"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unknown"}),"[]"]}),(0,l.jsx)(n.h6,{id:"preamble",children:"preamble"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"string"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"Function"})}),(0,l.jsx)(n.h6,{id:"args",children:"args?"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Record"}),"<",(0,l.jsx)(n.code,{children:"string"}),", ",(0,l.jsx)(n.code,{children:"CompiledType"}),">"]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"CompiledType"})})]}),"\n",(0,l.jsx)("a",{id:"solve",name:"solve"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsolve",children:"BoxedExpression.solve()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"solve(vars?): readonly BoxedExpression[]\n"})}),(0,l.jsxs)(n.p,{children:["If this is an equation, solve the equation for the variables in vars.\nOtherwise, solve the equation ",(0,l.jsx)(n.code,{children:"this = 0"})," for the variables in vars."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"const expr = ce.parse('x^2 + 2*x + 1 = 0');\nconsole.log(expr.solve('x'));\n"})}),(0,l.jsx)(n.h6,{id:"vars-1",children:"vars?"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"string"})," | ",(0,l.jsx)(n.code,{children:"Iterable"}),"<",(0,l.jsx)(n.code,{children:"string"}),"> | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})," | ",(0,l.jsx)(n.code,{children:"Iterable"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsxs)(n.p,{children:["readonly ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),"[]"]})]}),"\n",(0,l.jsx)("a",{id:"value",name:"value"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionvalue",children:"BoxedExpression.value"}),(0,l.jsx)(n.h6,{id:"get-signature-8",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get value(): string | number | boolean | object\n"})}),(0,l.jsx)(n.p,{children:"Return a JavaScript primitive representing the value of this expression."}),(0,l.jsxs)(n.p,{children:["Equivalent to ",(0,l.jsx)(n.code,{children:"expr.N().valueOf()"}),"."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"string"})," | ",(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"object"})]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"set value(value): void\n"})}),(0,l.jsx)(n.p,{children:"Only the value of variables can be changed (symbols that are not\nconstants)."}),(0,l.jsx)(n.p,{children:"Throws a runtime error if a constant."}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"If non-canonical, does nothing"})}),(0,l.jsx)(n.h6,{id:"parameters",children:"Parameters"}),(0,l.jsx)(n.h6,{id:"value",children:"value"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"string"})," | ",(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"number"}),"[] | ",(0,l.jsx)(n.code,{children:"Decimal"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})," | {\n",(0,l.jsx)(n.code,{children:"re"}),": ",(0,l.jsx)(n.code,{children:"number"}),";\n",(0,l.jsx)(n.code,{children:"im"}),": ",(0,l.jsx)(n.code,{children:"number"}),";\n} | {\n",(0,l.jsx)(n.code,{children:"num"}),": ",(0,l.jsx)(n.code,{children:"number"}),";\n",(0,l.jsx)(n.code,{children:"denom"}),": ",(0,l.jsx)(n.code,{children:"number"}),";\n}"]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})})]}),"\n",(0,l.jsx)("a",{id:"type",name:"type"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiontype",children:"BoxedExpression.type"}),(0,l.jsx)(n.h6,{id:"get-signature-9",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get type(): BoxedType\n"})}),(0,l.jsx)(n.p,{children:"The type of the value of this expression."}),(0,l.jsx)(n.p,{children:"If a function expression, the type of the value of the function\n(the result type)."}),(0,l.jsx)(n.p,{children:"If a symbol the type of the value of the symbol."}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsxs)(n.p,{children:["If not valid, return ",(0,l.jsx)(n.code,{children:'"error"'}),".\nIf non-canonical, return ",(0,l.jsx)(n.code,{children:"undefined"}),".\nIf the type is not known, return ",(0,l.jsx)(n.code,{children:'"unknown"'}),"."]})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"BoxedType"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"set type(type): void\n"})}),(0,l.jsx)(n.h6,{id:"parameters-1",children:"Parameters"}),(0,l.jsx)(n.h6,{id:"type",children:"type"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"string"})," | ",(0,l.jsx)(n.code,{children:"AlgebraicType"})," | ",(0,l.jsx)(n.code,{children:"NegationType"})," | ",(0,l.jsx)(n.code,{children:"CollectionType"})," | ",(0,l.jsx)(n.code,{children:"ListType"})," | ",(0,l.jsx)(n.code,{children:"SetType"})," | ",(0,l.jsx)(n.code,{children:"MapType"})," | ",(0,l.jsx)(n.code,{children:"TupleType"})," | ",(0,l.jsx)(n.code,{children:"FunctionSignature"})," | ",(0,l.jsx)(n.code,{children:"ValueType"})," | ",(0,l.jsx)(n.code,{children:"TypeReference"})," | ",(0,l.jsx)(n.code,{children:"BoxedType"})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})})]}),"\n",(0,l.jsx)("a",{id:"iscollection",name:"iscollection"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressioniscollection",children:"BoxedExpression.isCollection"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"isCollection: boolean;\n"})}),(0,l.jsx)(n.p,{children:"Return true if the expression is a collection: a list, a vector, a matrix, a map, a tuple, etc..."})]}),"\n",(0,l.jsx)("a",{id:"contains",name:"contains"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressioncontains",children:"BoxedExpression.contains()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"contains(rhs): boolean\n"})}),(0,l.jsxs)(n.p,{children:["If this is a collection, return true if the ",(0,l.jsx)(n.code,{children:"rhs"})," expression is in the\ncollection."]}),(0,l.jsxs)(n.p,{children:["Return ",(0,l.jsx)(n.code,{children:"undefined"})," if the membership cannot be determined."]}),(0,l.jsx)(n.h6,{id:"rhs-4",children:"rhs"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"size",name:"size"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsize",children:"BoxedExpression.size"}),(0,l.jsx)(n.h6,{id:"get-signature-10",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get size(): number\n"})}),(0,l.jsx)(n.p,{children:"If this is a collection, return the number of elements in the collection."}),(0,l.jsxs)(n.p,{children:["If the collection is infinite, return ",(0,l.jsx)(n.code,{children:"Infinity"}),"."]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})})]}),"\n",(0,l.jsx)("a",{id:"each",name:"each"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressioneach",children:"BoxedExpression.each()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"each: (start?, count?) => Iterator<BoxedExpression, undefined>;\n"})}),(0,l.jsx)(n.p,{children:"If this is a collection, return an iterator over the elements of the collection."}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"start"})," is not specified, start from the first element."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"count"})," is not specified or negative, return all the elements from ",(0,l.jsx)(n.code,{children:"start"})," to the end."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"const expr = ce.parse('[1, 2, 3, 4]');\nfor (const e of expr.each()) {\n console.log(e);\n}\n"})}),(0,l.jsx)(n.h6,{id:"start",children:"start?"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.h6,{id:"count",children:"count?"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Iterator"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),", ",(0,l.jsx)(n.code,{children:"undefined"}),">"]})]}),"\n",(0,l.jsx)("a",{id:"at",name:"at"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionat",children:"BoxedExpression.at()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"at(index): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"If this is an indexable collection, return the element at the specified\nindex."}),(0,l.jsxs)(n.p,{children:["If the index is negative, return the element at index ",(0,l.jsx)(n.code,{children:"size() + index + 1"}),"."]}),(0,l.jsx)(n.h6,{id:"index",children:"index"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"get",name:"get"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionget",children:"BoxedExpression.get()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get(key): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:"If this is a map or a tuple, return the value of the corresponding key."}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"key"})," is a ",(0,l.jsx)(n.code,{children:"BoxedExpression"}),", it should be a string."]}),(0,l.jsx)(n.h6,{id:"key",children:"key"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"string"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"indexof",name:"indexof"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionindexof",children:"BoxedExpression.indexOf()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"indexOf(expr): number\n"})}),(0,l.jsx)(n.p,{children:"If this is an indexable collection, return the index of the first element\nthat matches the target expression."}),(0,l.jsx)(n.h6,{id:"expr-1",children:"expr"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})})]}),"\n",(0,l.jsx)(n.h4,{id:"primitive-methods",children:"Primitive Methods"}),"\n",(0,l.jsx)("a",{id:"valueof",name:"valueof"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionvalueof",children:"BoxedExpression.valueOf()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"valueOf(): any\n"})}),(0,l.jsxs)(n.p,{children:["From ",(0,l.jsx)(n.code,{children:"Object.valueOf()"}),", return a primitive value for the expression."]}),(0,l.jsxs)(n.p,{children:["If the expression is a machine number, or bignum or rational that can be\nconverted to a machine number, return a JavaScript ",(0,l.jsx)(n.code,{children:"number"}),"."]}),(0,l.jsxs)(n.p,{children:["If the expression is a symbol, return the name of the symbol as a ",(0,l.jsx)(n.code,{children:"string"}),"."]}),(0,l.jsx)(n.p,{children:"Otherwise return a JavaScript primitive representation of the expression."}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"any"})})]}),"\n",(0,l.jsx)("a",{id:"tostring",name:"tostring"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiontostring",children:"BoxedExpression.toString()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"toString(): string\n"})}),(0,l.jsxs)(n.p,{children:["From ",(0,l.jsx)(n.code,{children:"Object.toString()"}),", return a string representation of the\nexpression. This string is suitable to be output to the console\nfor debugging, for example. It is formatted as a ASCIIMath expression."]}),(0,l.jsxs)(n.p,{children:["To get a LaTeX representation of the expression, use ",(0,l.jsx)(n.code,{children:"expr.latex"}),"."]}),(0,l.jsxs)(n.p,{children:["Used when coercing a ",(0,l.jsx)(n.code,{children:"BoxedExpression"})," to a ",(0,l.jsx)(n.code,{children:"String"}),"."]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"string"})})]}),"\n",(0,l.jsx)("a",{id:"print",name:"print"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionprint",children:"BoxedExpression.print()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"print(): void\n"})}),(0,l.jsx)(n.p,{children:"Output to the console a string representation of the expression."}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})})]}),"\n",(0,l.jsx)("a",{id:"toprimitive",name:"toprimitive"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiontoprimitive",children:"BoxedExpression.[toPrimitive]()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"toPrimitive: string | number\n"})}),(0,l.jsxs)(n.p,{children:["Similar to",(0,l.jsx)(n.code,{children:"expr.valueOf()"})," but includes a hint."]}),(0,l.jsx)(n.h6,{id:"hint",children:"hint"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"string"'})," | ",(0,l.jsx)(n.code,{children:'"number"'})," | ",(0,l.jsx)(n.code,{children:'"default"'})]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"string"})," | ",(0,l.jsx)(n.code,{children:"number"})]})]}),"\n",(0,l.jsx)("a",{id:"tojson",name:"tojson"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiontojson",children:"BoxedExpression.toJSON()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"toJSON(): Expression\n"})}),(0,l.jsxs)(n.p,{children:["Used by ",(0,l.jsx)(n.code,{children:"JSON.stringify()"})," to serialize this object to JSON."]}),(0,l.jsxs)(n.p,{children:["Method version of ",(0,l.jsx)(n.code,{children:"expr.json"}),"."]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"Expression"})})]}),"\n",(0,l.jsx)("a",{id:"is",name:"is"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionis",children:"BoxedExpression.is()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"is(rhs): boolean\n"})}),(0,l.jsxs)(n.p,{children:["Equivalent to ",(0,l.jsx)(n.code,{children:"BoxedExpression.isSame()"})," but the argument can be\na JavaScript primitive. For example, ",(0,l.jsx)(n.code,{children:"expr.is(2)"})," is equivalent to\n",(0,l.jsx)(n.code,{children:"expr.isSame(ce.number(2))"}),"."]}),(0,l.jsx)(n.h6,{id:"rhs-5",children:"rhs"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"any"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)(n.h4,{id:"relational-operator",children:"Relational Operator"}),"\n",(0,l.jsx)("a",{id:"issame",name:"issame"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionissame",children:"BoxedExpression.isSame()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"isSame(rhs): boolean\n"})}),(0,l.jsx)(n.p,{children:"Structural/symbolic equality (weak equality)."}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ce.parse('1+x').isSame(ce.parse('x+1'))"})," is ",(0,l.jsx)(n.code,{children:"false"}),"."]}),(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.code,{children:"expr.isEqual()"})," for mathematical equality."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})}),(0,l.jsx)(n.h6,{id:"rhs-6",children:"rhs"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"isless",name:"isless"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisless",children:"BoxedExpression.isLess()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"isLess(other): boolean\n"})}),(0,l.jsxs)(n.p,{children:["If the expressions cannot be compared, return ",(0,l.jsx)(n.code,{children:"undefined"})]}),(0,l.jsx)(n.p,{children:"The numeric value of both expressions are compared."}),(0,l.jsx)(n.p,{children:"The expressions are evaluated before being compared, which may be\nexpensive."}),(0,l.jsx)(n.h6,{id:"other-1",children:"other"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"islessequal",name:"islessequal"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionislessequal",children:"BoxedExpression.isLessEqual()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"isLessEqual(other): boolean\n"})}),(0,l.jsx)(n.p,{children:"The numeric value of both expressions are compared."}),(0,l.jsx)(n.h6,{id:"other-2",children:"other"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"isgreater",name:"isgreater"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisgreater",children:"BoxedExpression.isGreater()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"isGreater(other): boolean\n"})}),(0,l.jsx)(n.p,{children:"The numeric value of both expressions are compared."}),(0,l.jsx)(n.h6,{id:"other-3",children:"other"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"isgreaterequal",name:"isgreaterequal"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisgreaterequal",children:"BoxedExpression.isGreaterEqual()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"isGreaterEqual(other): boolean\n"})}),(0,l.jsx)(n.p,{children:"The numeric value of both expressions are compared."}),(0,l.jsx)(n.h6,{id:"other-4",children:"other"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"isequal",name:"isequal"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisequal",children:"BoxedExpression.isEqual()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"isEqual(other): boolean\n"})}),(0,l.jsxs)(n.p,{children:["Mathematical equality (strong equality), that is the value\nof this expression and the value of ",(0,l.jsx)(n.code,{children:"other"})," are numerically equal."]}),(0,l.jsx)(n.p,{children:"Both expressions are evaluated and the result is compared numerically."}),(0,l.jsxs)(n.p,{children:["Numbers whose difference is less than ",(0,l.jsx)(n.code,{children:"engine.tolerance"})," are\nconsidered equal. This tolerance is set when the ",(0,l.jsx)(n.code,{children:"engine.precision"})," is\nchanged to be such that the last two digits are ignored."]}),(0,l.jsx)(n.p,{children:"The evaluations may be expensive operations. Other options to consider\nto compare two expressions include:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"expr.isSame(other)"})," for a structural comparison"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"expr.is(other)"})," for a comparison of a number literal"]}),"\n"]}),(0,l.jsx)(n.h2,{id:"examples",children:"Examples"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"let expr = ce.parse('2 + 2');\nconsole.log(expr.isEqual(4)); // true\nconsole.log(expr.isSame(ce.parse(4))); // false\nconsole.log(expr.is(4)); // false\n\nexpr = ce.parse('4');\nconsole.log(expr.isEqual(4)); // true\nconsole.log(expr.isSame(ce.parse(4))); // true\nconsole.log(expr.is(4)); // true (fastest)\n\n"})}),(0,l.jsx)(n.h6,{id:"other-5",children:"other"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)(n.h4,{id:"string-expression",children:"String Expression"}),"\n",(0,l.jsx)("a",{id:"string",name:"string"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionstring",children:"BoxedExpression.string"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly string: string;\n"})}),(0,l.jsxs)(n.p,{children:["If this expression is a string, return the value of the string.\nOtherwise, return ",(0,l.jsx)(n.code,{children:"null"}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)(n.h4,{id:"symbol-expression",children:"Symbol Expression"}),"\n",(0,l.jsx)("a",{id:"symbol",name:"symbol"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionsymbol",children:"BoxedExpression.symbol"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly symbol: string;\n"})}),(0,l.jsxs)(n.p,{children:["If this expression is a symbol, return the name of the symbol as a string.\nOtherwise, return ",(0,l.jsx)(n.code,{children:"null"}),"."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions."})})]}),"\n",(0,l.jsx)("a",{id:"tensor",name:"tensor"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressiontensor",children:"BoxedExpression.tensor"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'readonly tensor: AbstractTensor<"expression">;\n'})})]}),"\n",(0,l.jsx)("a",{id:"isvalid",name:"isvalid"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisvalid",children:"BoxedExpression.isValid"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isValid: boolean;\n"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"true"})," if this expression or any of its subexpressions is an ",(0,l.jsx)(n.code,{children:'["Error"]'}),"\nexpression."]}),(0,l.jsx)(n.admonition,{title:"Note",type:"info",children:(0,l.jsx)(n.p,{children:"Applicable to canonical and non-canonical expressions. For\nnon-canonical expression, this may indicate a syntax error while parsing\nLaTeX. For canonical expression, this may indicate argument type\nmismatch, or missing or unexpected arguments."})})]}),"\n",(0,l.jsx)(n.h4,{id:"type-properties",children:"Type Properties"}),"\n",(0,l.jsx)("a",{id:"isnumber",name:"isnumber"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisnumber",children:"BoxedExpression.isNumber"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isNumber: boolean;\n"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"true"})," if the value of this expression is a number."]}),(0,l.jsxs)(n.p,{children:["Note that in a fateful twist of cosmic irony, ",(0,l.jsx)(n.code,{children:"NaN"}),' ("Not a Number")\n',(0,l.jsx)(n.strong,{children:"is"})," a number."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"isNumber"})," is ",(0,l.jsx)(n.code,{children:"true"}),", this indicates that evaluating the expression\nwill return a number."]}),(0,l.jsxs)(n.p,{children:["This does not indicate that the expression is a number literal. To check\nif the expression is a number literal, use ",(0,l.jsx)(n.code,{children:"expr.isNumberLiteral"}),"."]}),(0,l.jsxs)(n.p,{children:["For example, the expression ",(0,l.jsx)(n.code,{children:'["Add", 1, "x"]'}),' is a number if "x" is a\nnumber and ',(0,l.jsx)(n.code,{children:"expr.isNumber"})," is ",(0,l.jsx)(n.code,{children:"true"}),", but ",(0,l.jsx)(n.code,{children:"isNumberLiteral"})," is ",(0,l.jsx)(n.code,{children:"false"}),"."]})]}),"\n",(0,l.jsx)("a",{id:"isinteger",name:"isinteger"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisinteger",children:"BoxedExpression.isInteger"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isInteger: boolean;\n"})}),(0,l.jsx)(n.p,{children:"The value of this expression is an element of the set \u2124: ...,-2, -1, 0, 1, 2..."}),(0,l.jsx)(n.p,{children:"Note that \xb1\u221e and NaN are not integers."})]}),"\n",(0,l.jsx)("a",{id:"isrational",name:"isrational"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisrational",children:"BoxedExpression.isRational"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isRational: boolean;\n"})}),(0,l.jsx)(n.p,{children:"The value of this expression is an element of the set \u211a, p/q with p \u2208 \u2115, q \u2208 \u2124 \u20f0  q >= 1"}),(0,l.jsx)(n.p,{children:"Note that every integer is also a rational."}),(0,l.jsxs)(n.p,{children:["This is equivalent to ",(0,l.jsx)(n.code,{children:'this.type === "rational" || this.type === "integer"'})]}),(0,l.jsx)(n.p,{children:"Note that \xb1\u221e and NaN are not rationals."})]}),"\n",(0,l.jsx)("a",{id:"isreal",name:"isreal"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedexpressionisreal",children:"BoxedExpression.isReal"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isReal: boolean;\n"})}),(0,l.jsx)(n.p,{children:"The value of this expression is a real number."}),(0,l.jsxs)(n.p,{children:["This is equivalent to ",(0,l.jsx)(n.code,{children:'this.type === "rational" || this.type === "integer" || this.type === "real"'})]}),(0,l.jsx)(n.p,{children:"Note that \xb1\u221e and NaN are not real numbers."})]}),"\n",(0,l.jsx)("a",{id:"semiboxedexpression",name:"semiboxedexpression"}),"\n",(0,l.jsx)(n.h3,{id:"semiboxedexpression",children:"SemiBoxedExpression"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type SemiBoxedExpression = \n  | number\n  | bigint\n  | string\n  | BigNum\n  | MathJsonNumber\n  | MathJsonString\n  | MathJsonSymbol\n  | MathJsonFunction\n  | readonly [MathJsonIdentifier, ...SemiBoxedExpression[]]\n  | BoxedExpression;\n"})}),"\n",(0,l.jsx)(n.p,{children:"A semi boxed expression is a MathJSON expression which can include some\nboxed terms."}),"\n",(0,l.jsxs)(n.p,{children:["This is convenient when creating new expressions from portions\nof an existing ",(0,l.jsx)(n.code,{children:"BoxedExpression"})," while avoiding unboxing and reboxing."]}),"\n",(0,l.jsx)("a",{id:"boxedsubstitution",name:"boxedsubstitution"}),"\n",(0,l.jsx)(n.h3,{id:"boxedsubstitution",children:"BoxedSubstitution"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type BoxedSubstitution = Substitution<BoxedExpression>;\n"})}),"\n",(0,l.jsx)("a",{id:"canonicalform",name:"canonicalform"}),"\n",(0,l.jsx)(n.h3,{id:"canonicalform",children:"CanonicalForm"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'type CanonicalForm = \n  | "InvisibleOperator"\n  | "Number"\n  | "Multiply"\n  | "Add"\n  | "Power"\n  | "Divide"\n  | "Flatten"\n  | "Order";\n'})}),"\n",(0,l.jsx)(n.p,{children:'When provided, canonical forms are used to put an expression in a\n"standard" form.'}),"\n",(0,l.jsx)(n.p,{children:"Each canonical form applies some transformation to an expression. When\nspecified as an array, each transformation is done in the order in which\nit was provided."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"InvisibleOperator"}),": replace use of the ",(0,l.jsx)(n.code,{children:"InvisibleOperator"})," with\nanother operation, such as multiplication (i.e. ",(0,l.jsx)(n.code,{children:"2x"})," or function\napplication (",(0,l.jsx)(n.code,{children:"f(x)"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Number"}),": replace all numeric values with their\ncanonical representation, for example, reduce\nrationals and replace complex numbers with no imaginary part with a real number."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Multiply"}),": replace negation with multiplication by -1, remove 1 from multiplications, simplify signs (",(0,l.jsx)(n.code,{children:"-y \\times -x"})," -> ",(0,l.jsx)(n.code,{children:"x \\times y"}),"), complex numbers are promoted (['Multiply', 2, 'ImaginaryUnit'] -> ",(0,l.jsx)(n.code,{children:'["Complex", 0, 2]'}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Add"}),": replace ",(0,l.jsx)(n.code,{children:"Subtract"})," with ",(0,l.jsx)(n.code,{children:"Add"}),', removes 0 in addition, promote complex numbers (["Add", "a", ["Complex", 0, "b"] -> ',(0,l.jsx)(n.code,{children:'["Complex", "a", "b"]'}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Power"}),": simplify ",(0,l.jsx)(n.code,{children:"Power"})," expression, for example, ",(0,l.jsx)(n.code,{children:"x^{-1}"})," -> ",(0,l.jsx)(n.code,{children:"\\frac{1}{x}"}),", ",(0,l.jsx)(n.code,{children:"x^0"})," -> ",(0,l.jsx)(n.code,{children:"1"}),", ",(0,l.jsx)(n.code,{children:"x^1"})," -> ",(0,l.jsx)(n.code,{children:"x"}),", ",(0,l.jsx)(n.code,{children:"1^x"})," -> ",(0,l.jsx)(n.code,{children:"1"}),", ",(0,l.jsx)(n.code,{children:"x^{\\frac{1}{2}}"})," -> ",(0,l.jsx)(n.code,{children:"\\sqrt{x}"}),", ",(0,l.jsx)(n.code,{children:"a^b^c"})," -> ",(0,l.jsx)(n.code,{children:"a^{bc}"}),"..."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Divide"}),": replace with a ",(0,l.jsx)(n.code,{children:"Rational"})," number if numerator and denominator are integers, simplify, e.g. ",(0,l.jsx)(n.code,{children:"\\frac{x}{1}"})," -> ",(0,l.jsx)(n.code,{children:"x"}),"..."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Flatten"}),": remove any unnecessary ",(0,l.jsx)(n.code,{children:"Delimiter"})," expression, and flatten any associative functions, for example ",(0,l.jsx)(n.code,{children:'["Add", ["Add", "a", "b"], "c"]'})," -> ",(0,l.jsx)(n.code,{children:'["Add", "a", "b", "c"]'})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Order"}),": when applicable, sort the arguments in a specific order, for\nexample for addition and multiplication."]}),"\n"]}),"\n",(0,l.jsx)("a",{id:"evaluateoptions",name:"evaluateoptions"}),"\n",(0,l.jsx)(n.h3,{id:"evaluateoptions",children:"EvaluateOptions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type EvaluateOptions = object;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Options for ",(0,l.jsx)(n.code,{children:"BoxedExpression.evaluate()"})]}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-7",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"numericapproximation"}),"\n",(0,l.jsx)(n.h5,{id:"numericapproximation",children:"numericApproximation"}),"\n",(0,l.jsx)("a",{id:"numericapproximation",name:"numericapproximation"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"evaluateoptionsnumericapproximation",children:"EvaluateOptions.numericApproximation"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"numericApproximation: boolean;\n"})})]}),"\n",(0,l.jsx)("a",{id:"signal"}),"\n",(0,l.jsx)(n.h5,{id:"signal-1",children:"signal"}),"\n",(0,l.jsx)("a",{id:"signal",name:"signal"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"evaluateoptionssignal",children:"EvaluateOptions.signal"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"signal: AbortSignal;\n"})})]}),"\n",(0,l.jsx)("a",{id:"metadata",name:"metadata"}),"\n",(0,l.jsx)(n.h3,{id:"metadata-1",children:"Metadata"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Metadata = object;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Metadata that can be associated with a ",(0,l.jsx)(n.code,{children:"BoxedExpression"})]}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-8",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"latex-1"}),"\n",(0,l.jsx)(n.h5,{id:"latex",children:"latex?"}),"\n",(0,l.jsx)("a",{id:"latex-1",name:"latex-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"metadatalatex",children:"Metadata.latex?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional latex: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"wikidata-2"}),"\n",(0,l.jsx)(n.h5,{id:"wikidata",children:"wikidata?"}),"\n",(0,l.jsx)("a",{id:"wikidata-2",name:"wikidata-2"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"metadatawikidata",children:"Metadata.wikidata?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional wikidata: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"replaceoptions",name:"replaceoptions"}),"\n",(0,l.jsx)(n.h3,{id:"replaceoptions",children:"ReplaceOptions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type ReplaceOptions = object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-9",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"recursive-1"}),"\n",(0,l.jsx)(n.h5,{id:"recursive-1",children:"recursive"}),"\n",(0,l.jsx)("a",{id:"recursive-1",name:"recursive-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"replaceoptionsrecursive",children:"ReplaceOptions.recursive"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"recursive: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", apply replacement rules to all sub-expressions."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"false"}),", only consider the top-level expression."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"false"})]})]}),"\n",(0,l.jsx)("a",{id:"once"}),"\n",(0,l.jsx)(n.h5,{id:"once",children:"once"}),"\n",(0,l.jsx)("a",{id:"once",name:"once"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"replaceoptionsonce",children:"ReplaceOptions.once"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"once: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", stop after the first rule that matches."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"false"}),", apply all the remaining rules even after the first match."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"false"})]})]}),"\n",(0,l.jsx)("a",{id:"usevariations-2"}),"\n",(0,l.jsx)(n.h5,{id:"usevariations",children:"useVariations"}),"\n",(0,l.jsx)("a",{id:"usevariations-2",name:"usevariations-2"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"replaceoptionsusevariations",children:"ReplaceOptions.useVariations"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"useVariations: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"})," the rule will use some equivalent variations to match."]}),(0,l.jsxs)(n.p,{children:["For example when ",(0,l.jsx)(n.code,{children:"useVariations"})," is true:"]}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"x"})," matches ",(0,l.jsx)(n.code,{children:"a + x"})," with a = 0"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"x"})," matches ",(0,l.jsx)(n.code,{children:"ax"})," with a = 1"]}),"\n",(0,l.jsx)(n.li,{children:"etc..."}),"\n"]}),(0,l.jsxs)(n.p,{children:["Setting this to ",(0,l.jsx)(n.code,{children:"true"})," can save time by condensing multiple rules\ninto one. This can be particularly useful when describing equations\nsolutions. However, it can lead to infinite recursion and should be\nused with caution."]})]}),"\n",(0,l.jsx)("a",{id:"iterationlimit"}),"\n",(0,l.jsx)(n.h5,{id:"iterationlimit",children:"iterationLimit"}),"\n",(0,l.jsx)("a",{id:"iterationlimit",name:"iterationlimit"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"replaceoptionsiterationlimit",children:"ReplaceOptions.iterationLimit"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"iterationLimit: number;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"iterationLimit"})," > 1, the rules will be repeatedly applied\nuntil no rules apply, up to ",(0,l.jsx)(n.code,{children:"maxIterations"})," times."]}),(0,l.jsxs)(n.p,{children:["Note that if ",(0,l.jsx)(n.code,{children:"once"})," is true, ",(0,l.jsx)(n.code,{children:"iterationLimit"})," has no effect."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"1"})]})]}),"\n",(0,l.jsx)("a",{id:"canonical-1"}),"\n",(0,l.jsx)(n.h5,{id:"canonical-2",children:"canonical"}),"\n",(0,l.jsx)("a",{id:"canonical-1",name:"canonical-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"replaceoptionscanonical",children:"ReplaceOptions.canonical"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"canonical: CanonicalOptions;\n"})}),(0,l.jsx)(n.p,{children:"Indicate if the expression should be canonicalized after the replacement.\nIf not provided, the expression is canonicalized if the expression\nthat matched the pattern is canonical."})]}),"\n",(0,l.jsx)("a",{id:"substitutiont",name:"substitutiont"}),"\n",(0,l.jsx)(n.h3,{id:"substitutiont",children:"Substitution<T>"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Substitution<T> = object;\n"})}),"\n",(0,l.jsx)(n.p,{children:"A substitution describes the values of the wildcards in a pattern so that\nthe pattern is equal to a target expression."}),"\n",(0,l.jsxs)(n.p,{children:["A substitution can also be considered a more constrained version of a\nrule whose ",(0,l.jsx)(n.code,{children:"match"})," is always a symbol."]}),"\n",(0,l.jsx)(n.h4,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,l.jsxs)(n.p,{children:["\u2022 ",(0,l.jsx)(n.strong,{children:"T"})," = ",(0,l.jsx)(n.a,{href:"#semiboxedexpression",children:(0,l.jsx)(n.code,{children:"SemiBoxedExpression"})})]}),"\n",(0,l.jsx)(n.h4,{id:"index-signature",children:"Index Signature"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"[symbol: string]: T\n"})}),"\n",(0,l.jsx)(n.h2,{id:"pattern-matching",children:"Pattern Matching"}),"\n",(0,l.jsx)("a",{id:"pattern",name:"pattern"}),"\n",(0,l.jsx)(n.h3,{id:"pattern-1",children:"Pattern"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Pattern = BoxedExpression;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"no-inherit-doc",children:"No Inherit Doc"}),"\n",(0,l.jsx)("a",{id:"patternmatchoptions",name:"patternmatchoptions"}),"\n",(0,l.jsx)(n.h3,{id:"patternmatchoptions",children:"PatternMatchOptions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type PatternMatchOptions = object;\n"})}),"\n",(0,l.jsx)(n.p,{children:"Control how a pattern is matched to an expression."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"substitution"}),": if present, assumes these values for the named wildcards,\nand ensure that subsequent occurrence of the same wildcard have the same\nvalue."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"recursive"}),": if true, match recursively, otherwise match only the top\nlevel."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"useVariations"}),": if false, only match expressions that are structurally identical.\nIf true, match expressions that are structurally identical or equivalent."]}),"\n",(0,l.jsxs)(n.p,{children:["For example, when true, ",(0,l.jsx)(n.code,{children:"[\"Add\", '_a', 2]"})," matches ",(0,l.jsx)(n.code,{children:"2"}),", with a value of\n",(0,l.jsx)(n.code,{children:"_a"})," of ",(0,l.jsx)(n.code,{children:"0"}),". If false, the expression does not match. ",(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-10",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"substitution"}),"\n",(0,l.jsx)(n.h5,{id:"substitution",children:"substitution?"}),"\n",(0,l.jsx)("a",{id:"substitution",name:"substitution"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"patternmatchoptionssubstitution",children:"PatternMatchOptions.substitution?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional substitution: BoxedSubstitution;\n"})})]}),"\n",(0,l.jsx)("a",{id:"recursive"}),"\n",(0,l.jsx)(n.h5,{id:"recursive-2",children:"recursive?"}),"\n",(0,l.jsx)("a",{id:"recursive",name:"recursive"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"patternmatchoptionsrecursive",children:"PatternMatchOptions.recursive?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional recursive: boolean;\n"})})]}),"\n",(0,l.jsx)("a",{id:"usevariations-1"}),"\n",(0,l.jsx)(n.h5,{id:"usevariations-1",children:"useVariations?"}),"\n",(0,l.jsx)("a",{id:"usevariations-1",name:"usevariations-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"patternmatchoptionsusevariations",children:"PatternMatchOptions.useVariations?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional useVariations: boolean;\n"})})]}),"\n",(0,l.jsx)(n.h2,{id:"rules-2",children:"Rules"}),"\n",(0,l.jsx)("a",{id:"rulereplacefunction",name:"rulereplacefunction"}),"\n",(0,l.jsx)(n.h3,{id:"rulereplacefunction",children:"RuleReplaceFunction()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type RuleReplaceFunction = (expr, wildcards) => BoxedExpression | undefined;\n"})}),"\n",(0,l.jsx)(n.p,{children:"Given an expression and set of wildcards, return a new expression."}),"\n",(0,l.jsx)(n.p,{children:"For example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"{\n   match: '_x',\n   replace: (expr, {_x}) => { return ['Add', 1, _x] }\n}\n"})}),"\n",(0,l.jsx)(n.h5,{id:"expr-2",children:"expr"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),"\n",(0,l.jsx)(n.h5,{id:"wildcards",children:"wildcards"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedsubstitution",children:(0,l.jsx)(n.code,{children:"BoxedSubstitution"})})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})," | ",(0,l.jsx)(n.code,{children:"undefined"})]}),"\n",(0,l.jsx)("a",{id:"ruleconditionfunction",name:"ruleconditionfunction"}),"\n",(0,l.jsx)(n.h3,{id:"ruleconditionfunction",children:"RuleConditionFunction()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type RuleConditionFunction = (wildcards, ce) => boolean;\n"})}),"\n",(0,l.jsx)(n.h5,{id:"wildcards-1",children:"wildcards"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedsubstitution",children:(0,l.jsx)(n.code,{children:"BoxedSubstitution"})})}),"\n",(0,l.jsx)(n.h5,{id:"ce",children:"ce"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"IComputeEngine"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),"\n",(0,l.jsx)("a",{id:"rulefunction",name:"rulefunction"}),"\n",(0,l.jsx)(n.h3,{id:"rulefunction",children:"RuleFunction()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type RuleFunction = (expr) => \n  | undefined\n  | BoxedExpression\n  | RuleStep;\n"})}),"\n",(0,l.jsx)(n.h5,{id:"expr-3",children:"expr"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),"\n",(0,l.jsxs)(n.p,{children:["| ",(0,l.jsx)(n.code,{children:"undefined"}),"\n| ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),"\n| ",(0,l.jsx)(n.a,{href:"#rulestep",children:(0,l.jsx)(n.code,{children:"RuleStep"})})]}),"\n",(0,l.jsx)("a",{id:"rule",name:"rule"}),"\n",(0,l.jsx)(n.h3,{id:"rule",children:"Rule"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Rule = \n  | string\n  | RuleFunction\n  | {\n  match:   | LatexString\n     | SemiBoxedExpression\n     | Pattern;\n  replace:   | LatexString\n     | SemiBoxedExpression\n     | RuleReplaceFunction\n     | RuleFunction;\n  condition:   | LatexString\n     | RuleConditionFunction;\n  useVariations: boolean;\n  id: string;\n};\n"})}),"\n",(0,l.jsxs)(n.p,{children:["A rule describes how to modify an expressions that matches a pattern ",(0,l.jsx)(n.code,{children:"match"}),"\ninto a new expression ",(0,l.jsx)(n.code,{children:"replace"}),"."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"x-1"})," ( \\to ) ",(0,l.jsx)(n.code,{children:"1-x"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"(x+1)(x-1)"})," ( \\to ) `x^2-1"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The patterns can be expressed as LaTeX strings or a MathJSON expressions."}),"\n",(0,l.jsxs)(n.p,{children:["As a shortcut, a rule can be defined as a LaTeX string: ",(0,l.jsx)(n.code,{children:"x-1 -> 1-x"}),".\nThe expression to the left of ",(0,l.jsx)(n.code,{children:"->"})," is the ",(0,l.jsx)(n.code,{children:"match"})," and the expression to the\nright is the ",(0,l.jsx)(n.code,{children:"replace"}),". When using LaTeX strings, single character variables\nare assumed to be wildcards."]}),"\n",(0,l.jsxs)(n.p,{children:["When using MathJSON expressions, anonymous wildcards (",(0,l.jsx)(n.code,{children:"_"}),") will match any\nexpression. Named wildcards (",(0,l.jsx)(n.code,{children:"_x"}),", ",(0,l.jsx)(n.code,{children:"_a"}),", etc...) will match any expression\nand bind the expression to the wildcard name."]}),"\n",(0,l.jsxs)(n.p,{children:["In addition the sequence wildcard (",(0,l.jsx)(n.code,{children:"__1"}),", ",(0,l.jsx)(n.code,{children:"__a"}),", etc...) will match\na sequence of one or more expressions, and bind the sequence to the\nwildcard name."]}),"\n",(0,l.jsxs)(n.p,{children:['Sequence wildcards are useful when the number of elements in the sequence\nis not known in advance. For example, in a sum, the number of terms is\nnot known in advance. ["Add", 0, ',(0,l.jsx)(n.code,{children:"__a"}),"] will match two or more terms and\nthe ",(0,l.jsx)(n.code,{children:"__a"})," wildcard will be a sequence of the matchign terms."]}),"\n",(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"exact"})," is false, the rule will match variants."]}),"\n",(0,l.jsx)(n.p,{children:"For example 'x' will match 'a + x', 'x' will match 'ax', etc..."}),"\n",(0,l.jsxs)(n.p,{children:["For simplification rules, you generally want ",(0,l.jsx)(n.code,{children:"exact"})," to be true, but\nto solve equations, you want it to be false. Default to true."]}),"\n",(0,l.jsx)(n.p,{children:"When set to false, infinite recursion is possible."}),"\n",(0,l.jsx)("a",{id:"boxedrule",name:"boxedrule"}),"\n",(0,l.jsx)(n.h3,{id:"boxedrule",children:"BoxedRule"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type BoxedRule = object;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["If the ",(0,l.jsx)(n.code,{children:"match"})," property is ",(0,l.jsx)(n.code,{children:"undefined"}),", all expressions match this rule\nand ",(0,l.jsx)(n.code,{children:"condition"})," should also be ",(0,l.jsx)(n.code,{children:"undefined"}),". The ",(0,l.jsx)(n.code,{children:"replace"})," property should\nbe a ",(0,l.jsx)(n.code,{children:"BoxedExpression"})," or a ",(0,l.jsx)(n.code,{children:"RuleFunction"}),", and further filtering can be\ndone in the ",(0,l.jsx)(n.code,{children:"replace"})," function."]}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-11",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"match-1"}),"\n",(0,l.jsx)(n.h5,{id:"match",children:"match"}),"\n",(0,l.jsx)("a",{id:"match-1",name:"match-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedrulematch",children:"BoxedRule.match"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"match: undefined | Pattern;\n"})})]}),"\n",(0,l.jsx)("a",{id:"replace-1"}),"\n",(0,l.jsx)(n.h5,{id:"replace",children:"replace"}),"\n",(0,l.jsx)("a",{id:"replace-1",name:"replace-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedrulereplace",children:"BoxedRule.replace"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"replace: \n  | BoxedExpression\n  | RuleReplaceFunction\n  | RuleFunction;\n"})})]}),"\n",(0,l.jsx)("a",{id:"condition"}),"\n",(0,l.jsx)(n.h5,{id:"condition",children:"condition"}),"\n",(0,l.jsx)("a",{id:"condition",name:"condition"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedrulecondition",children:"BoxedRule.condition"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"condition: \n  | undefined\n  | RuleConditionFunction;\n"})})]}),"\n",(0,l.jsx)("a",{id:"usevariations"}),"\n",(0,l.jsx)(n.h5,{id:"usevariations-2",children:"useVariations?"}),"\n",(0,l.jsx)("a",{id:"usevariations",name:"usevariations"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedruleusevariations",children:"BoxedRule.useVariations?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional useVariations: boolean;\n"})})]}),"\n",(0,l.jsx)("a",{id:"id"}),"\n",(0,l.jsx)(n.h5,{id:"id",children:"id?"}),"\n",(0,l.jsx)("a",{id:"id",name:"id"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedruleid",children:"BoxedRule.id?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional id: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"boxedruleset",name:"boxedruleset"}),"\n",(0,l.jsx)(n.h3,{id:"boxedruleset",children:"BoxedRuleSet"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type BoxedRuleSet = object;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To create a BoxedRuleSet use the ",(0,l.jsx)(n.code,{children:"ce.rules()"})," method."]}),"\n",(0,l.jsxs)(n.p,{children:["Do not create a ",(0,l.jsx)(n.code,{children:"BoxedRuleSet"})," directly."]}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-12",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"rules"}),"\n",(0,l.jsx)(n.h5,{id:"rules-3",children:"rules"}),"\n",(0,l.jsx)("a",{id:"rules",name:"rules"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedrulesetrules",children:"BoxedRuleSet.rules"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"rules: ReadonlyArray<BoxedRule>;\n"})})]}),"\n",(0,l.jsx)(n.h2,{id:"assumptions-2",children:"Assumptions"}),"\n",(0,l.jsx)("a",{id:"assumeresult",name:"assumeresult"}),"\n",(0,l.jsx)(n.h3,{id:"assumeresult",children:"AssumeResult"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'type AssumeResult = \n  | "internal-error"\n  | "not-a-predicate"\n  | "contradiction"\n  | "tautology"\n  | "ok";\n'})}),"\n",(0,l.jsx)("a",{id:"expressionmapinterfaceu",name:"expressionmapinterfaceu"}),"\n",(0,l.jsx)(n.h3,{id:"expressionmapinterfaceu",children:"ExpressionMapInterface<U>"}),"\n",(0,l.jsx)(n.h4,{id:"type-parameters-1",children:"Type Parameters"}),"\n",(0,l.jsxs)(n.p,{children:["\u2022 ",(0,l.jsx)(n.strong,{children:"U"})]}),"\n",(0,l.jsx)("a",{id:"has-1",name:"has-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"expressionmapinterfacehas",children:"ExpressionMapInterface.has()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"has(expr): boolean\n"})}),(0,l.jsx)(n.h6,{id:"expr-4",children:"expr"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"get-1",name:"get-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"expressionmapinterfaceget",children:"ExpressionMapInterface.get()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get(expr): U\n"})}),(0,l.jsx)(n.h6,{id:"expr-5",children:"expr"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"U"})})]}),"\n",(0,l.jsx)("a",{id:"set",name:"set"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"expressionmapinterfaceset",children:"ExpressionMapInterface.set()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"set(expr, value): void\n"})}),(0,l.jsx)(n.h6,{id:"expr-6",children:"expr"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"value-1",children:"value"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"U"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})})]}),"\n",(0,l.jsx)("a",{id:"delete",name:"delete"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"expressionmapinterfacedelete",children:"ExpressionMapInterface.delete()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"delete(expr): void\n"})}),(0,l.jsx)(n.h6,{id:"expr-7",children:"expr"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})})]}),"\n",(0,l.jsx)("a",{id:"clear",name:"clear"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"expressionmapinterfaceclear",children:"ExpressionMapInterface.clear()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"clear(): void\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})})]}),"\n",(0,l.jsx)("a",{id:"iterator",name:"iterator"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"expressionmapinterfaceiterator",children:"ExpressionMapInterface.[iterator]()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"iterator: IterableIterator<[BoxedExpression, U]>\n"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"IterableIterator"}),"<[",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),", ",(0,l.jsx)(n.code,{children:"U"}),"]>"]})]}),"\n",(0,l.jsx)("a",{id:"entries",name:"entries"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"expressionmapinterfaceentries",children:"ExpressionMapInterface.entries()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"entries(): IterableIterator<[BoxedExpression, U]>\n"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"IterableIterator"}),"<[",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),", ",(0,l.jsx)(n.code,{children:"U"}),"]>"]})]}),"\n",(0,l.jsx)(n.h2,{id:"compiling",children:"Compiling"}),"\n",(0,l.jsx)("a",{id:"compiledexpression",name:"compiledexpression"}),"\n",(0,l.jsx)(n.h3,{id:"compiledexpression",children:"CompiledExpression"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type CompiledExpression = object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-13",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"evaluate-1"}),"\n",(0,l.jsx)(n.h5,{id:"evaluate",children:"evaluate()?"}),"\n",(0,l.jsx)("a",{id:"evaluate-1",name:"evaluate-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"compiledexpressionevaluate",children:"CompiledExpression.evaluate()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional evaluate: (scope) => number | BoxedExpression;\n"})}),(0,l.jsx)(n.h6,{id:"scope-1",children:"scope"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]})]}),"\n",(0,l.jsx)(n.h2,{id:"definitions",children:"Definitions"}),"\n",(0,l.jsx)("a",{id:"boxedbasedefinition",name:"boxedbasedefinition"}),"\n",(0,l.jsx)(n.h3,{id:"boxedbasedefinition",children:"BoxedBaseDefinition"}),"\n",(0,l.jsx)(n.h4,{id:"extended-by",children:"Extended by"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#boxedsymboldefinition",children:(0,l.jsx)(n.code,{children:"BoxedSymbolDefinition"})})}),"\n"]}),"\n",(0,l.jsx)("a",{id:"name",name:"name"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedbasedefinitionname",children:"BoxedBaseDefinition.name"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"name: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"wikidata-1",name:"wikidata-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedbasedefinitionwikidata",children:"BoxedBaseDefinition.wikidata?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional wikidata: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"description-1",name:"description-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedbasedefinitiondescription",children:"BoxedBaseDefinition.description?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional description: string | string[];\n"})})]}),"\n",(0,l.jsx)("a",{id:"url-1",name:"url-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedbasedefinitionurl",children:"BoxedBaseDefinition.url?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional url: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"scope-1",name:"scope-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedbasedefinitionscope",children:"BoxedBaseDefinition.scope"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"scope: object;\n"})}),(0,l.jsx)(n.p,{children:"The scope this definition belongs to."}),(0,l.jsxs)(n.p,{children:["This field is usually undefined, but its value is set by ",(0,l.jsx)(n.code,{children:"getDefinition()"})]}),(0,l.jsx)("a",{id:""}),(0,l.jsx)(n.h6,{id:"parentscope-2",children:"parentScope?"}),(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"scopeparentscope-1",children:"scope.parentScope?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional parentScope: { parentScope?: ...; ids?: RuntimeIdentifierDefinitions; assumptions: ExpressionMapInterface<boolean>; };\n"})})]}),(0,l.jsx)("a",{id:""}),(0,l.jsx)(n.h6,{id:"ids-2",children:"ids?"}),(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"scopeids-1",children:"scope.ids?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional ids: RuntimeIdentifierDefinitions;\n"})})]}),(0,l.jsx)("a",{id:""}),(0,l.jsx)(n.h6,{id:"assumptions-3",children:"assumptions"}),(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"scopeassumptions-1",children:"scope.assumptions"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"assumptions: ExpressionMapInterface<boolean>;\n"})})]})]}),"\n",(0,l.jsx)("a",{id:"collection",name:"collection"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedbasedefinitioncollection",children:"BoxedBaseDefinition.collection?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional collection: Partial<CollectionHandlers>;\n"})}),(0,l.jsx)(n.p,{children:"If this is the definition of a collection, the set of primitive operations\nthat can be performed on this collection (counting the number of elements,\nenumerating it, etc...)."})]}),"\n",(0,l.jsx)("a",{id:"reset",name:"reset"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedbasedefinitionreset",children:"BoxedBaseDefinition.reset()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"reset(): void\n"})}),(0,l.jsxs)(n.p,{children:["When the environment changes, for example the numerical precision,\ncall ",(0,l.jsx)(n.code,{children:"reset()"})," so that any cached values can be recalculated."]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})})]}),"\n",(0,l.jsx)("a",{id:"eqhandlers",name:"eqhandlers"}),"\n",(0,l.jsx)(n.h3,{id:"eqhandlers",children:"EqHandlers"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type EqHandlers = object;\n"})}),"\n",(0,l.jsx)(n.p,{children:"These handlers compare two expressions."}),"\n",(0,l.jsx)(n.p,{children:"If only one of the handlers is provided, the other is derived from it."}),"\n",(0,l.jsx)(n.p,{children:"Having both may be useful if comparing non-equality is faster than equality."}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-14",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"eq-1"}),"\n",(0,l.jsx)(n.h5,{id:"eq",children:"eq()"}),"\n",(0,l.jsx)("a",{id:"eq-1",name:"eq-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"eqhandlerseq",children:"EqHandlers.eq()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"eq: (a, b) => boolean | undefined;\n"})}),(0,l.jsx)(n.h6,{id:"a",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"b",children:"b"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)("a",{id:"neq-1"}),"\n",(0,l.jsx)(n.h5,{id:"neq",children:"neq()"}),"\n",(0,l.jsx)("a",{id:"neq-1",name:"neq-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"eqhandlersneq",children:"EqHandlers.neq()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"neq: (a, b) => boolean | undefined;\n"})}),(0,l.jsx)(n.h6,{id:"a-1",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"b-1",children:"b"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)("a",{id:"collectionhandlers",name:"collectionhandlers"}),"\n",(0,l.jsx)(n.h3,{id:"collectionhandlers",children:"CollectionHandlers"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type CollectionHandlers = object;\n"})}),"\n",(0,l.jsx)(n.p,{children:"These handlers are the primitive operations that can be performed on\ncollections."}),"\n",(0,l.jsx)(n.p,{children:"There are two types of collections:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["finite collections, such as lists, tuples, sets, matrices, etc...\nThe ",(0,l.jsx)(n.code,{children:"size()"})," handler of finite collections returns the number of elements"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["infinite collections, such as sequences, ranges, etc...\nThe ",(0,l.jsx)(n.code,{children:"size()"})," handler of infinite collections returns ",(0,l.jsx)(n.code,{children:"Infinity"}),"\nInfinite collections are not indexable: they have no ",(0,l.jsx)(n.code,{children:"at()"})," handler."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-15",children:"Type declaration"}),"\n",(0,l.jsx)(n.h4,{id:"definitions-1",children:"Definitions"}),"\n",(0,l.jsx)("a",{id:"iterator-1"}),"\n",(0,l.jsx)(n.h6,{id:"iterator",children:"iterator()"}),"\n",(0,l.jsx)("a",{id:"iterator-1",name:"iterator-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"collectionhandlersiterator",children:"CollectionHandlers.iterator()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"iterator: (collection, start?, count?) => Iterator<BoxedExpression, undefined>;\n"})}),(0,l.jsx)(n.p,{children:"Return an iterator"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"start is optional and is a 1-based index."}),"\n",(0,l.jsx)(n.li,{children:"if start is not specified, start from index 1"}),"\n",(0,l.jsx)(n.li,{children:"count is optional and is the number of elements to return"}),"\n",(0,l.jsx)(n.li,{children:"if count is not specified or negative, return all the elements from\nstart to the end"}),"\n"]}),(0,l.jsxs)(n.p,{children:["If there is a ",(0,l.jsx)(n.code,{children:"keys()"})," handler, there is no ",(0,l.jsx)(n.code,{children:"iterator()"})," handler."]}),(0,l.jsx)(n.h6,{id:"collection",children:"collection"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"start-1",children:"start?"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.h6,{id:"count-1",children:"count?"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Iterator"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),", ",(0,l.jsx)(n.code,{children:"undefined"}),">"]})]}),"\n",(0,l.jsx)(n.h4,{id:"other-6",children:"Other"}),"\n",(0,l.jsx)("a",{id:"size-1"}),"\n",(0,l.jsx)(n.h6,{id:"size",children:"size()"}),"\n",(0,l.jsx)("a",{id:"size-1",name:"size-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"collectionhandlerssize",children:"CollectionHandlers.size()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"size: (collection) => number;\n"})}),(0,l.jsx)(n.p,{children:"Return the number of elements in the collection."}),(0,l.jsx)(n.p,{children:"An empty collection has a size of 0."}),(0,l.jsx)(n.h6,{id:"collection-1",children:"collection"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})})]}),"\n",(0,l.jsx)("a",{id:"contains-1"}),"\n",(0,l.jsx)(n.h6,{id:"contains",children:"contains()"}),"\n",(0,l.jsx)("a",{id:"contains-1",name:"contains-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"collectionhandlerscontains",children:"CollectionHandlers.contains()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"contains: (collection, target) => boolean;\n"})}),(0,l.jsxs)(n.p,{children:["Return ",(0,l.jsx)(n.code,{children:"true"})," if the target\nexpression is in the collection, ",(0,l.jsx)(n.code,{children:"false"})," otherwise."]}),(0,l.jsx)(n.h6,{id:"collection-2",children:"collection"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"target",children:"target"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"at-1"}),"\n",(0,l.jsx)(n.h6,{id:"at",children:"at()"}),"\n",(0,l.jsx)("a",{id:"at-1",name:"at-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"collectionhandlersat",children:"CollectionHandlers.at()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"at: (collection, index) => undefined | BoxedExpression;\n"})}),(0,l.jsx)(n.p,{children:"Return the element at the specified index."}),(0,l.jsxs)(n.p,{children:["The first element is ",(0,l.jsx)(n.code,{children:"at(1)"}),", the last element is ",(0,l.jsx)(n.code,{children:"at(-1)"}),"."]}),(0,l.jsxs)(n.p,{children:["If the index is <0, return the element at index ",(0,l.jsx)(n.code,{children:"size() + index + 1"}),"."]}),(0,l.jsxs)(n.p,{children:["The index can also be a string for example for maps. The set of valid keys\nis returned by the ",(0,l.jsx)(n.code,{children:"keys()"})," handler."]}),(0,l.jsxs)(n.p,{children:["If the index is invalid, return ",(0,l.jsx)(n.code,{children:"undefined"}),"."]}),(0,l.jsx)(n.h6,{id:"collection-3",children:"collection"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"index-1",children:"index"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.code,{children:"string"})]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"undefined"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]})]}),"\n",(0,l.jsx)("a",{id:"keys"}),"\n",(0,l.jsx)(n.h6,{id:"keys",children:"keys()"}),"\n",(0,l.jsx)("a",{id:"keys",name:"keys"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"collectionhandlerskeys",children:"CollectionHandlers.keys()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"keys: (collection) => undefined | Iterable<string>;\n"})}),(0,l.jsx)(n.p,{children:"If the collection can be indexed by strings, return the valid values\nfor the index."}),(0,l.jsx)(n.h6,{id:"collection-4",children:"collection"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"undefined"})," | ",(0,l.jsx)(n.code,{children:"Iterable"}),"<",(0,l.jsx)(n.code,{children:"string"}),">"]})]}),"\n",(0,l.jsx)("a",{id:"indexof-1"}),"\n",(0,l.jsx)(n.h6,{id:"indexof",children:"indexOf()"}),"\n",(0,l.jsx)("a",{id:"indexof-1",name:"indexof-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"collectionhandlersindexof",children:"CollectionHandlers.indexOf()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"indexOf: (collection, target, from?) => number | undefined;\n"})}),(0,l.jsx)(n.p,{children:"Return the index of the first element that matches the target expression."}),(0,l.jsxs)(n.p,{children:["The comparison is done using the ",(0,l.jsx)(n.code,{children:"target.isEqual()"})," method."]}),(0,l.jsxs)(n.p,{children:["If the expression is not found, return ",(0,l.jsx)(n.code,{children:"undefined"}),"."]}),(0,l.jsx)(n.p,{children:"If the expression is found, return the index, 1-based."}),(0,l.jsx)(n.p,{children:"Return the index of the first match."}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"from"})," is the starting index for the search. If negative, start from\nthe end  and search backwards."]}),(0,l.jsx)(n.h6,{id:"collection-5",children:"collection"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"target-1",children:"target"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"from",children:"from?"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)("a",{id:"subsetof"}),"\n",(0,l.jsx)(n.h6,{id:"subsetof",children:"subsetOf()"}),"\n",(0,l.jsx)("a",{id:"subsetof",name:"subsetof"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"collectionhandlerssubsetof",children:"CollectionHandlers.subsetOf()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"subsetOf: (collection, target, strict) => boolean;\n"})}),(0,l.jsxs)(n.p,{children:["Return ",(0,l.jsx)(n.code,{children:"true"})," if all the elements of ",(0,l.jsx)(n.code,{children:"target"})," are in ",(0,l.jsx)(n.code,{children:"expr"}),".\nBoth ",(0,l.jsx)(n.code,{children:"expr"})," and ",(0,l.jsx)(n.code,{children:"target"})," are collections.\nIf strict is ",(0,l.jsx)(n.code,{children:"true"}),", the subset must be strict, that is, ",(0,l.jsx)(n.code,{children:"expr"})," must\nhave more elements than ",(0,l.jsx)(n.code,{children:"target"}),"."]}),(0,l.jsx)(n.h6,{id:"collection-6",children:"collection"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"target-2",children:"target"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"strict",children:"strict"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"eltsgn"}),"\n",(0,l.jsx)(n.h6,{id:"eltsgn",children:"eltsgn()"}),"\n",(0,l.jsx)("a",{id:"eltsgn",name:"eltsgn"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"collectionhandlerseltsgn",children:"CollectionHandlers.eltsgn()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"eltsgn: (collection) => Sign | undefined;\n"})}),(0,l.jsx)(n.p,{children:"Return the sign of all the elements of the collection."}),(0,l.jsx)(n.h6,{id:"collection-7",children:"collection"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#sign",children:(0,l.jsx)(n.code,{children:"Sign"})})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)("a",{id:"elttype"}),"\n",(0,l.jsx)(n.h6,{id:"elttype",children:"elttype()"}),"\n",(0,l.jsx)("a",{id:"elttype",name:"elttype"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h6,{id:"collectionhandlerselttype",children:"CollectionHandlers.elttype()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"elttype: (collection) => Type | undefined;\n"})}),(0,l.jsx)(n.p,{children:"Return the widest type of all the elements in the collection"}),(0,l.jsx)(n.h6,{id:"collection-8",children:"collection"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Type"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)("a",{id:"functiondefinitionflags",name:"functiondefinitionflags"}),"\n",(0,l.jsx)(n.h3,{id:"functiondefinitionflags",children:"FunctionDefinitionFlags"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type FunctionDefinitionFlags = object;\n"})}),"\n",(0,l.jsx)(n.p,{children:"A function definition can have some flags to indicate specific\nproperties of the function."}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-16",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"lazy"}),"\n",(0,l.jsx)(n.h5,{id:"lazy",children:"lazy"}),"\n",(0,l.jsx)("a",{id:"lazy",name:"lazy"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionflagslazy",children:"FunctionDefinitionFlags.lazy"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"lazy: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", the arguments to this function are not automatically\nevaluated. The default is ",(0,l.jsx)(n.code,{children:"false"})," (the arguments are evaluated)."]}),(0,l.jsxs)(n.p,{children:["This can be useful for example for functions that take symbolic\nexpressions as arguments, such as ",(0,l.jsx)(n.code,{children:"D"})," or ",(0,l.jsx)(n.code,{children:"Integrate"}),"."]}),(0,l.jsx)(n.p,{children:"This is also useful for functions that take an argument that is\npotentially an infinite collection."}),(0,l.jsxs)(n.p,{children:["It will be up to the ",(0,l.jsx)(n.code,{children:"evaluate()"})," handler to evaluate the arguments as\nneeded. This is conveninent to pass symbolic expressions as arguments\nto functions without having to explicitly use a ",(0,l.jsx)(n.code,{children:"Hold"})," expression."]}),(0,l.jsxs)(n.p,{children:["This also applies to the ",(0,l.jsx)(n.code,{children:"canonical()"})," handler."]})]}),"\n",(0,l.jsx)("a",{id:"threadable"}),"\n",(0,l.jsx)(n.h5,{id:"threadable",children:"threadable"}),"\n",(0,l.jsx)("a",{id:"threadable",name:"threadable"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionflagsthreadable",children:"FunctionDefinitionFlags.threadable"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"threadable: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", the function is applied element by element to lists, matrices\n(",(0,l.jsx)(n.code,{children:'["List"]'})," or ",(0,l.jsx)(n.code,{children:'["Tuple"]'})," expressions) and equations (relational\noperators)."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"false"})]})]}),"\n",(0,l.jsx)("a",{id:"associative"}),"\n",(0,l.jsx)(n.h5,{id:"associative",children:"associative"}),"\n",(0,l.jsx)("a",{id:"associative",name:"associative"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionflagsassociative",children:"FunctionDefinitionFlags.associative"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"associative: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", ",(0,l.jsx)(n.code,{children:'["f", ["f", a], b]'})," simplifies to ",(0,l.jsx)(n.code,{children:'["f", a, b]'})]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"false"})]})]}),"\n",(0,l.jsx)("a",{id:"commutative"}),"\n",(0,l.jsx)(n.h5,{id:"commutative",children:"commutative"}),"\n",(0,l.jsx)("a",{id:"commutative",name:"commutative"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionflagscommutative",children:"FunctionDefinitionFlags.commutative"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"commutative: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", ",(0,l.jsx)(n.code,{children:'["f", a, b]'})," equals ",(0,l.jsx)(n.code,{children:'["f", b, a]'}),". The canonical\nversion of the function will order the arguments."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"false"})]})]}),"\n",(0,l.jsx)("a",{id:"commutativeorder"}),"\n",(0,l.jsx)(n.h5,{id:"commutativeorder",children:"commutativeOrder"}),"\n",(0,l.jsx)("a",{id:"commutativeorder",name:"commutativeorder"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionflagscommutativeorder",children:"FunctionDefinitionFlags.commutativeOrder"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"commutativeOrder: (a, b) => number | undefined;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"commutative"})," is ",(0,l.jsx)(n.code,{children:"true"}),", the order of the arguments is determined by\nthis function."]}),(0,l.jsx)(n.p,{children:"If the function is not provided, the arguments are ordered by the\ndefault order of the arguments."})]}),"\n",(0,l.jsx)("a",{id:"idempotent"}),"\n",(0,l.jsx)(n.h5,{id:"idempotent",children:"idempotent"}),"\n",(0,l.jsx)("a",{id:"idempotent",name:"idempotent"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionflagsidempotent",children:"FunctionDefinitionFlags.idempotent"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"idempotent: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", ",(0,l.jsx)(n.code,{children:'["f", ["f", x]]'})," simplifies to ",(0,l.jsx)(n.code,{children:'["f", x]'}),"."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"false"})]})]}),"\n",(0,l.jsx)("a",{id:"involution"}),"\n",(0,l.jsx)(n.h5,{id:"involution",children:"involution"}),"\n",(0,l.jsx)("a",{id:"involution",name:"involution"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionflagsinvolution",children:"FunctionDefinitionFlags.involution"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"involution: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", ",(0,l.jsx)(n.code,{children:'["f", ["f", x]]'})," simplifies to ",(0,l.jsx)(n.code,{children:"x"}),"."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"false"})]})]}),"\n",(0,l.jsx)("a",{id:"pure"}),"\n",(0,l.jsx)(n.h5,{id:"pure",children:"pure"}),"\n",(0,l.jsx)("a",{id:"pure",name:"pure"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionflagspure",children:"FunctionDefinitionFlags.pure"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"pure: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"}),", the value of this function is always the same for a given\nset of arguments and it has no side effects."]}),(0,l.jsx)(n.p,{children:"An expression using this function is pure if the function and all its\narguments are pure."}),(0,l.jsxs)(n.p,{children:["For example ",(0,l.jsx)(n.code,{children:"Sin"})," is pure, ",(0,l.jsx)(n.code,{children:"Random"})," isn't."]}),(0,l.jsx)(n.p,{children:"This information may be used to cache the value of expressions."}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default:"})," ",(0,l.jsx)(n.code,{children:"true"})]})]}),"\n",(0,l.jsx)("a",{id:"hold",name:"hold"}),"\n",(0,l.jsx)(n.h3,{id:"hold",children:"Hold"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'type Hold = "none" | "all" | "first" | "rest" | "last" | "most";\n'})}),"\n",(0,l.jsx)("a",{id:"boxedfunctiondefinition",name:"boxedfunctiondefinition"}),"\n",(0,l.jsx)(n.h3,{id:"boxedfunctiondefinition",children:"BoxedFunctionDefinition"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type BoxedFunctionDefinition = BoxedBaseDefinition & FunctionDefinitionFlags & object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-17",children:"Type declaration"}),"\n",(0,l.jsx)(n.h5,{id:"complexity",children:"complexity"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitioncomplexity",children:"BoxedFunctionDefinition.complexity"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"complexity: number;\n"})})]}),"\n",(0,l.jsx)(n.h5,{id:"inferredsignature",children:"inferredSignature"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitioninferredsignature",children:"BoxedFunctionDefinition.inferredSignature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"inferredSignature: boolean;\n"})}),(0,l.jsx)(n.p,{children:"If true, the signature was inferred from usage and may be modified\nas more information becomes available."})]}),"\n",(0,l.jsx)(n.h5,{id:"signature",children:"signature"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitionsignature",children:"BoxedFunctionDefinition.signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"signature: BoxedType;\n"})}),(0,l.jsx)(n.p,{children:"The type of the arguments and return value of this function"})]}),"\n",(0,l.jsx)(n.h5,{id:"type-1",children:"type()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitiontype",children:"BoxedFunctionDefinition.type()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional type: (ops, options) => Type | TypeString | BoxedType | undefined;\n"})}),(0,l.jsxs)(n.p,{children:["If present, this handler can be used to more precisely determine the\nreturn type based on the type of the arguments. The arguments themselves\nshould ",(0,l.jsx)(n.em,{children:"not"})," be evaluated, only their types should be used."]}),(0,l.jsx)(n.h6,{id:"ops",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-10",children:"options"}),(0,l.jsx)(n.h6,{id:"engine",children:"engine"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"IComputeEngine"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Type"})," | ",(0,l.jsx)(n.code,{children:"TypeString"})," | ",(0,l.jsx)(n.code,{children:"BoxedType"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"sgn",children:"sgn()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitionsgn",children:"BoxedFunctionDefinition.sgn()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional sgn: (ops, options) => Sign | undefined;\n"})}),(0,l.jsx)(n.p,{children:"If present, this handler can be used to determine the sign of the\nreturn value of the function, based on the sign and type of its\narguments."}),(0,l.jsxs)(n.p,{children:["The arguments themselves should ",(0,l.jsx)(n.em,{children:"not"})," be evaluated, only their types and\nsign should be used."]}),(0,l.jsx)(n.p,{children:"This can be used in some case for example to determine when certain\nsimplifications are valid."}),(0,l.jsx)(n.h6,{id:"ops-1",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-11",children:"options"}),(0,l.jsx)(n.h6,{id:"engine-1",children:"engine"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"IComputeEngine"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#sign",children:(0,l.jsx)(n.code,{children:"Sign"})})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"eq-1",children:"eq()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitioneq",children:"BoxedFunctionDefinition.eq()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional eq: (a, b) => boolean | undefined;\n"})}),(0,l.jsx)(n.h6,{id:"a-2",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"b-2",children:"b"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"neq-1",children:"neq()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitionneq",children:"BoxedFunctionDefinition.neq()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional neq: (a, b) => boolean | undefined;\n"})}),(0,l.jsx)(n.h6,{id:"a-3",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"b-3",children:"b"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"canonical-3",children:"canonical()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitioncanonical",children:"BoxedFunctionDefinition.canonical()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional canonical: (ops, options) => BoxedExpression | null;\n"})}),(0,l.jsx)(n.h6,{id:"ops-2",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-12",children:"options"}),(0,l.jsx)(n.h6,{id:"engine-2",children:"engine"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"IComputeEngine"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})," | ",(0,l.jsx)(n.code,{children:"null"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"evaluate-1",children:"evaluate()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitionevaluate",children:"BoxedFunctionDefinition.evaluate()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional evaluate: (ops, options) => BoxedExpression | undefined;\n"})}),(0,l.jsx)(n.h6,{id:"ops-3",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-13",children:"options"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Partial"}),"<",(0,l.jsx)(n.a,{href:"#evaluateoptions",children:(0,l.jsx)(n.code,{children:"EvaluateOptions"})}),"> & ",(0,l.jsx)(n.code,{children:"object"})]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"evaluateasync",children:"evaluateAsync()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitionevaluateasync",children:"BoxedFunctionDefinition.evaluateAsync()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional evaluateAsync: (ops, options?) => Promise<BoxedExpression | undefined>;\n"})}),(0,l.jsx)(n.h6,{id:"ops-4",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-14",children:"options?"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Partial"}),"<",(0,l.jsx)(n.a,{href:"#evaluateoptions",children:(0,l.jsx)(n.code,{children:"EvaluateOptions"})}),"> & ",(0,l.jsx)(n.code,{children:"object"})]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Promise"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})," | ",(0,l.jsx)(n.code,{children:"undefined"}),">"]})]}),"\n",(0,l.jsx)(n.h5,{id:"evaldimension",children:"evalDimension()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitionevaldimension",children:"BoxedFunctionDefinition.evalDimension()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional evalDimension: (ops, options) => BoxedExpression;\n"})}),(0,l.jsx)(n.h6,{id:"ops-5",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-15",children:"options"}),(0,l.jsx)(n.h6,{id:"engine-3",children:"engine"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"IComputeEngine"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)(n.h5,{id:"compile",children:"compile()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedfunctiondefinitioncompile",children:"BoxedFunctionDefinition.compile()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional compile: (expr) => CompiledExpression;\n"})}),(0,l.jsx)(n.h6,{id:"expr-8",children:"expr"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#compiledexpression",children:(0,l.jsx)(n.code,{children:"CompiledExpression"})})})]}),"\n",(0,l.jsx)("a",{id:"symbolattributes",name:"symbolattributes"}),"\n",(0,l.jsx)(n.h3,{id:"symbolattributes",children:"SymbolAttributes"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type SymbolAttributes = object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-18",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"constant"}),"\n",(0,l.jsx)(n.h5,{id:"constant",children:"constant"}),"\n",(0,l.jsx)("a",{id:"constant",name:"constant"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"symbolattributesconstant",children:"SymbolAttributes.constant"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"constant: boolean;\n"})}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"true"})," the value of the symbol is constant. The value or type of\nsymbols with this attribute set to ",(0,l.jsx)(n.code,{children:"true"})," cannot be changed."]}),(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"false"}),", the symbol is a variable."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": ",(0,l.jsx)(n.code,{children:"false"})]})]}),"\n",(0,l.jsx)("a",{id:"holduntil"}),"\n",(0,l.jsx)(n.h5,{id:"holduntil",children:"holdUntil"}),"\n",(0,l.jsx)("a",{id:"holduntil",name:"holduntil"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"symbolattributesholduntil",children:"SymbolAttributes.holdUntil"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'holdUntil: "never" | "evaluate" | "N";\n'})}),(0,l.jsx)(n.p,{children:"If the symbol has a value, it is held as indicated in the table below.\nA green checkmark indicate that the symbol is substituted."}),(0,l.jsx)("div",{className:"symbols-table",children:(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{style:{textAlign:"left"},children:"Operation"}),(0,l.jsx)(n.th,{style:{textAlign:"center"},children:(0,l.jsx)(n.code,{children:'"never"'})}),(0,l.jsx)(n.th,{style:{textAlign:"center"},children:(0,l.jsx)(n.code,{children:'"evaluate"'})}),(0,l.jsx)(n.th,{style:{textAlign:"center"},children:(0,l.jsx)(n.code,{children:'"N"'})})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"canonical()"})}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"(X)"}),(0,l.jsx)(n.td,{style:{textAlign:"center"}}),(0,l.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:"evaluate()"})}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"(X)"}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"(X)"}),(0,l.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{style:{textAlign:"left"},children:(0,l.jsx)(n.code,{children:'"N()"'})}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"(X)"}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"(X)"}),(0,l.jsx)(n.td,{style:{textAlign:"center"},children:"(X)"})]})]})]})}),(0,l.jsx)(n.p,{children:"Some examples:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ImaginaryUnit"})," has ",(0,l.jsx)(n.code,{children:"holdUntil: 'never'"}),": it is substituted during canonicalization"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"x"})," has ",(0,l.jsx)(n.code,{children:"holdUntil: 'evaluate'"})," (variables)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Pi"})," has ",(0,l.jsx)(n.code,{children:"holdUntil: 'N'"})," (special numeric constant)"]}),"\n"]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default:"})," ",(0,l.jsx)(n.code,{children:"evaluate"})]})]}),"\n",(0,l.jsx)("a",{id:"numericflags",name:"numericflags"}),"\n",(0,l.jsx)(n.h3,{id:"numericflags",children:"NumericFlags"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type NumericFlags = object;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["When used in a ",(0,l.jsx)(n.code,{children:"SymbolDefinition"})," or ",(0,l.jsx)(n.code,{children:"Functiondefinition"})," these flags\nprovide additional information about the value of the symbol or function."]}),"\n",(0,l.jsx)(n.p,{children:"If provided, they will override the value derived from\nthe symbol's value."}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-19",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"sgn-1"}),"\n",(0,l.jsx)(n.h5,{id:"sgn-1",children:"sgn"}),"\n",(0,l.jsx)("a",{id:"sgn-1",name:"sgn-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"numericflagssgn",children:"NumericFlags.sgn"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"sgn: Sign | undefined;\n"})})]}),"\n",(0,l.jsx)("a",{id:"even"}),"\n",(0,l.jsx)(n.h5,{id:"even",children:"even"}),"\n",(0,l.jsx)("a",{id:"even",name:"even"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"numericflagseven",children:"NumericFlags.even"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"even: boolean | undefined;\n"})})]}),"\n",(0,l.jsx)("a",{id:"odd"}),"\n",(0,l.jsx)(n.h5,{id:"odd",children:"odd"}),"\n",(0,l.jsx)("a",{id:"odd",name:"odd"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"numericflagsodd",children:"NumericFlags.odd"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"odd: boolean | undefined;\n"})})]}),"\n",(0,l.jsx)("a",{id:"boxedsymboldefinition",name:"boxedsymboldefinition"}),"\n",(0,l.jsx)(n.h3,{id:"boxedsymboldefinition",children:"BoxedSymbolDefinition"}),"\n",(0,l.jsx)(n.h4,{id:"extends",children:"Extends"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#boxedbasedefinition",children:(0,l.jsx)(n.code,{children:"BoxedBaseDefinition"})}),".",(0,l.jsx)(n.a,{href:"#symbolattributes",children:(0,l.jsx)(n.code,{children:"SymbolAttributes"})}),".",(0,l.jsx)(n.code,{children:"Partial"}),"<",(0,l.jsx)(n.a,{href:"#numericflags",children:(0,l.jsx)(n.code,{children:"NumericFlags"})}),">"]}),"\n"]}),"\n",(0,l.jsx)("a",{id:"isfunction",name:"isfunction"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedsymboldefinitionisfunction",children:"BoxedSymbolDefinition.isFunction"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isFunction: boolean;\n"})})]}),"\n",(0,l.jsx)("a",{id:"isconstant-1",name:"isconstant-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedsymboldefinitionisconstant",children:"BoxedSymbolDefinition.isConstant"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"readonly isConstant: boolean;\n"})})]}),"\n",(0,l.jsx)("a",{id:"eq",name:"eq"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedsymboldefinitioneq",children:"BoxedSymbolDefinition.eq()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional eq: (a) => boolean;\n"})}),(0,l.jsx)(n.h6,{id:"a-4",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"neq",name:"neq"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedsymboldefinitionneq",children:"BoxedSymbolDefinition.neq()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional neq: (a) => boolean;\n"})}),(0,l.jsx)(n.h6,{id:"a-5",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"boolean"})})]}),"\n",(0,l.jsx)("a",{id:"cmp",name:"cmp"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedsymboldefinitioncmp",children:"BoxedSymbolDefinition.cmp()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'optional cmp: (a) => "<" | ">" | "=";\n'})}),(0,l.jsx)(n.h6,{id:"a-6",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"<"'})," | ",(0,l.jsx)(n.code,{children:'">"'})," | ",(0,l.jsx)(n.code,{children:'"="'})]})]}),"\n",(0,l.jsx)("a",{id:"inferredtype",name:"inferredtype"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedsymboldefinitioninferredtype",children:"BoxedSymbolDefinition.inferredType"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"inferredType: boolean;\n"})})]}),"\n",(0,l.jsx)("a",{id:"type-1",name:"type-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedsymboldefinitiontype",children:"BoxedSymbolDefinition.type"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type: BoxedType;\n"})})]}),"\n",(0,l.jsx)("a",{id:"value-1",name:"value-1"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"boxedsymboldefinitionvalue",children:"BoxedSymbolDefinition.value"}),(0,l.jsx)(n.h6,{id:"get-signature-11",children:"Get Signature"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"get value(): BoxedExpression\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"set value(val): void\n"})}),(0,l.jsx)(n.h6,{id:"parameters-2",children:"Parameters"}),(0,l.jsx)(n.h6,{id:"val",children:"val"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"number"})," | ",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})})]}),"\n",(0,l.jsx)("a",{id:"runtimeidentifierdefinitions",name:"runtimeidentifierdefinitions"}),"\n",(0,l.jsx)(n.h3,{id:"runtimeidentifierdefinitions",children:"RuntimeIdentifierDefinitions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type RuntimeIdentifierDefinitions = Map<string, OneOf<[BoxedSymbolDefinition, BoxedFunctionDefinition]>>;\n"})}),"\n",(0,l.jsx)(n.p,{children:"The entries have been validated and optimized for faster evaluation."}),"\n",(0,l.jsxs)(n.p,{children:["When a new scope is created with ",(0,l.jsx)(n.code,{children:"pushScope()"})," or when creating a new\nengine instance, new instances of this type are created as needed."]}),"\n",(0,l.jsx)("a",{id:"symboldefinition-1",name:"symboldefinition-1"}),"\n",(0,l.jsx)(n.h3,{id:"symboldefinition",children:"SymbolDefinition"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type SymbolDefinition = BaseDefinition & Partial<SymbolAttributes> & object;\n"})}),"\n",(0,l.jsx)(n.p,{children:"A bound symbol (i.e. one with an associated definition) has either a type\n(e.g. \u2200 x \u2208 \u211d), a value (x = 5) or both (\u03c0: value = 3.14... type = 'real')"}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-20",children:"Type declaration"}),"\n",(0,l.jsx)(n.h5,{id:"type-2",children:"type?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"symboldefinitiontype",children:"SymbolDefinition.type?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional type: Type | TypeString;\n"})})]}),"\n",(0,l.jsx)(n.h5,{id:"inferred",children:"inferred?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"symboldefinitioninferred",children:"SymbolDefinition.inferred?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional inferred: boolean;\n"})}),(0,l.jsx)(n.p,{children:"If true, the type is inferred, and could be adjusted later\nas more information becomes available or if the symbol is explicitly\ndeclared."})]}),"\n",(0,l.jsx)(n.h5,{id:"value-2",children:"value?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"symboldefinitionvalue",children:"SymbolDefinition.value?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional value: \n  | LatexString\n  | SemiBoxedExpression\n  | (ce) => BoxedExpression | null;\n"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"value"})," can be a JS function since for some constants, such as\n",(0,l.jsx)(n.code,{children:"Pi"}),", the actual value depends on the ",(0,l.jsx)(n.code,{children:"precision"})," setting of the\n",(0,l.jsx)(n.code,{children:"ComputeEngine"})," and possible other environment settings"]})]}),"\n",(0,l.jsx)(n.h5,{id:"flags",children:"flags?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"symboldefinitionflags",children:"SymbolDefinition.flags?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional flags: Partial<NumericFlags>;\n"})})]}),"\n",(0,l.jsx)(n.h5,{id:"eq-2",children:"eq()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"symboldefinitioneq",children:"SymbolDefinition.eq()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional eq: (a) => boolean | undefined;\n"})}),(0,l.jsx)(n.h6,{id:"a-7",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"neq-2",children:"neq()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"symboldefinitionneq",children:"SymbolDefinition.neq()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional neq: (a) => boolean | undefined;\n"})}),(0,l.jsx)(n.h6,{id:"a-8",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"cmp",children:"cmp()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"symboldefinitioncmp",children:"SymbolDefinition.cmp()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'optional cmp: (a) => "=" | ">" | "<" | undefined;\n'})}),(0,l.jsx)(n.h6,{id:"a-9",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'"="'})," | ",(0,l.jsx)(n.code,{children:'">"'})," | ",(0,l.jsx)(n.code,{children:'"<"'})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"collection-9",children:"collection?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"symboldefinitioncollection",children:"SymbolDefinition.collection?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional collection: Partial<CollectionHandlers>;\n"})})]}),"\n",(0,l.jsx)("a",{id:"functiondefinition-1",name:"functiondefinition-1"}),"\n",(0,l.jsx)(n.h3,{id:"functiondefinition",children:"FunctionDefinition"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type FunctionDefinition = BaseDefinition & Partial<FunctionDefinitionFlags> & object;\n"})}),"\n",(0,l.jsx)(n.p,{children:"Definition record for a function."}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-21",children:"Type declaration"}),"\n",(0,l.jsx)(n.h5,{id:"signature-1",children:"signature?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionsignature",children:"FunctionDefinition.signature?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional signature: Type | TypeString;\n"})}),(0,l.jsx)(n.p,{children:"The function signature."}),(0,l.jsxs)(n.p,{children:["If a ",(0,l.jsx)(n.code,{children:"type"})," handler is provided, the return type of the function should\nbe a subtype of the return type in the signature."]})]}),"\n",(0,l.jsx)(n.h5,{id:"type-3",children:"type()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitiontype",children:"FunctionDefinition.type()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional type: (ops, options) => Type | TypeString | BoxedType | undefined;\n"})}),(0,l.jsx)(n.p,{children:"The actual type of the result based on the arguments."}),(0,l.jsx)(n.p,{children:"Should be a subtype of the type indicated in the signature."}),(0,l.jsx)(n.p,{children:"Do not evaluate the arguments."}),(0,l.jsx)(n.p,{children:"The type of the arguments can be used to determine the type of the\nresult."}),(0,l.jsx)(n.h6,{id:"ops-6",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-16",children:"options"}),(0,l.jsx)(n.h6,{id:"engine-4",children:"engine"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"IComputeEngine"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Type"})," | ",(0,l.jsx)(n.code,{children:"TypeString"})," | ",(0,l.jsx)(n.code,{children:"BoxedType"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"sgn-2",children:"sgn()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionsgn",children:"FunctionDefinition.sgn()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional sgn: (ops, options) => Sign | undefined;\n"})}),(0,l.jsx)(n.p,{children:"Return the sign of the function expression."}),(0,l.jsxs)(n.p,{children:["If the sign cannot be determined, return ",(0,l.jsx)(n.code,{children:"undefined"}),"."]}),(0,l.jsx)(n.p,{children:"When determining the sign, only literal values and the values of\nsymbols, if they are literals, should be considered."}),(0,l.jsx)(n.p,{children:"Do not evaluate the arguments."}),(0,l.jsx)(n.p,{children:"The type and sign of the arguments can be used to determine the sign."}),(0,l.jsx)(n.h6,{id:"ops-7",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-17",children:"options"}),(0,l.jsx)(n.h6,{id:"engine-5",children:"engine"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"IComputeEngine"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#sign",children:(0,l.jsx)(n.code,{children:"Sign"})})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"even-1",children:"even()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitioneven",children:"FunctionDefinition.even()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional even: (ops, options) => boolean | undefined;\n"})}),(0,l.jsx)(n.p,{children:"Return true of the function expression is even, false if it is odd and\nundefined if it is neither."}),(0,l.jsx)(n.h6,{id:"ops-8",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-18",children:"options"}),(0,l.jsx)(n.h6,{id:"engine-6",children:"engine"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"IComputeEngine"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"complexity-1",children:"complexity?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitioncomplexity",children:"FunctionDefinition.complexity?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional complexity: number;\n"})}),(0,l.jsx)(n.p,{children:"A number used to order arguments."}),(0,l.jsx)(n.p,{children:"Argument with higher complexity are placed after arguments with\nlower complexity when ordered canonically in commutative functions."}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Additive functions: 1000-1999"}),"\n",(0,l.jsx)(n.li,{children:"Multiplicative functions: 2000-2999"}),"\n",(0,l.jsx)(n.li,{children:"Root and power functions: 3000-3999"}),"\n",(0,l.jsx)(n.li,{children:"Log functions: 4000-4999"}),"\n",(0,l.jsx)(n.li,{children:"Trigonometric functions: 5000-5999"}),"\n",(0,l.jsx)(n.li,{children:"Hypertrigonometric functions: 6000-6999"}),"\n",(0,l.jsx)(n.li,{children:"Special functions (factorial, Gamma, ...): 7000-7999"}),"\n",(0,l.jsx)(n.li,{children:"Collections: 8000-8999"}),"\n",(0,l.jsx)(n.li,{children:"Inert and styling:  9000-9999"}),"\n",(0,l.jsx)(n.li,{children:"Logic: 10000-10999"}),"\n",(0,l.jsx)(n.li,{children:"Relational: 11000-11999"}),"\n"]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Default"}),": 100,000"]})]}),"\n",(0,l.jsx)(n.h5,{id:"canonical-4",children:"canonical()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitioncanonical",children:"FunctionDefinition.canonical()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional canonical: (ops, options) => BoxedExpression | null;\n"})}),(0,l.jsxs)(n.p,{children:["Return the canonical form of the expression with the arguments ",(0,l.jsx)(n.code,{children:"args"}),"."]}),(0,l.jsxs)(n.p,{children:["The arguments (",(0,l.jsx)(n.code,{children:"args"}),") may not be in canonical form. If necessary, they\ncan be put in canonical form."]}),(0,l.jsx)(n.p,{children:"This handler should validate the type and number of the arguments."}),(0,l.jsxs)(n.p,{children:["If a required argument is missing, it should be indicated with a\n",(0,l.jsx)(n.code,{children:'["Error", "\'missing"]'}),' expression. If more arguments than expected\nare present, this should be indicated with an\n["Error", "\'unexpected-argument\'"]` error expression']}),(0,l.jsxs)(n.p,{children:["If the type of an argument is not compatible, it should be indicated\nwith an ",(0,l.jsx)(n.code,{children:"incompatible-type"})," error."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'["Sequence"]'})," expressions are not folded and need to be handled\nexplicitly."]}),(0,l.jsx)(n.p,{children:"If the function is associative, idempotent or an involution,\nthis handler should account for it. Notably, if it is commutative, the\narguments should be sorted in canonical order."}),(0,l.jsxs)(n.p,{children:["Values of symbols should not be substituted, unless they have\na ",(0,l.jsx)(n.code,{children:"holdUntil"})," attribute of ",(0,l.jsx)(n.code,{children:'"never"'}),"."]}),(0,l.jsxs)(n.p,{children:["The handler should not consider the value or any assumptions about any\nof the arguments that are symbols or functions (i.e. ",(0,l.jsx)(n.code,{children:"arg.isZero"}),",\n",(0,l.jsx)(n.code,{children:"arg.isInteger"}),", etc...) since those may change over time."]}),(0,l.jsx)(n.p,{children:"The result of the handler should be a canonical expression."}),(0,l.jsxs)(n.p,{children:["If the arguments do not match, they should be replaced with an appropriate\n",(0,l.jsx)(n.code,{children:'["Error"]'})," expression. If the expression cannot be put in canonical form,\nthe handler should return ",(0,l.jsx)(n.code,{children:"null"}),"."]}),(0,l.jsx)(n.h6,{id:"ops-9",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-19",children:"options"}),(0,l.jsx)(n.h6,{id:"engine-7",children:"engine"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"IComputeEngine"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})," | ",(0,l.jsx)(n.code,{children:"null"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"evaluate-2",children:"evaluate?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionevaluate",children:"FunctionDefinition.evaluate?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional evaluate: \n  | (ops, options) => BoxedExpression | undefined\n  | BoxedExpression;\n"})}),(0,l.jsx)(n.p,{children:"Evaluate a function expression."}),(0,l.jsxs)(n.p,{children:["The arguments have been evaluated, except the arguments to which a\n",(0,l.jsx)(n.code,{children:"hold"})," applied."]}),(0,l.jsx)(n.p,{children:"It is not necessary to further simplify or evaluate the arguments."}),(0,l.jsxs)(n.p,{children:["If performing numerical calculations and ",(0,l.jsx)(n.code,{children:"options.numericalApproximation"}),"\nis ",(0,l.jsx)(n.code,{children:"false"})," return an exact numeric value, for example return a rational\nnumber or a square root, rather than a floating point approximation.\nUse ",(0,l.jsx)(n.code,{children:"ce.number()"})," to create the numeric value."]}),(0,l.jsxs)(n.p,{children:["When ",(0,l.jsx)(n.code,{children:"numericalApproximation"})," is ",(0,l.jsx)(n.code,{children:"false"}),", return a floating point number:"]}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"do not reduce rational numbers to decimal (floating point approximation)"}),"\n",(0,l.jsx)(n.li,{children:"do not reduce square roots of rational numbers"}),"\n"]}),(0,l.jsxs)(n.p,{children:["If the expression cannot be evaluated, due to the values, types, or\nassumptions about its arguments, for example, return ",(0,l.jsx)(n.code,{children:"undefined"})," or\nan ",(0,l.jsx)(n.code,{children:'["Error"]'})," expression."]})]}),"\n",(0,l.jsx)(n.h5,{id:"evaluateasync-1",children:"evaluateAsync()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionevaluateasync",children:"FunctionDefinition.evaluateAsync()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional evaluateAsync: (ops, options) => Promise<BoxedExpression | undefined>;\n"})}),(0,l.jsxs)(n.p,{children:["An option asynchronous version of ",(0,l.jsx)(n.code,{children:"evaluate"}),"."]}),(0,l.jsx)(n.h6,{id:"ops-10",children:"ops"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-20",children:"options"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#evaluateoptions",children:(0,l.jsx)(n.code,{children:"EvaluateOptions"})})," & ",(0,l.jsx)(n.code,{children:"object"})]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Promise"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})," | ",(0,l.jsx)(n.code,{children:"undefined"}),">"]})]}),"\n",(0,l.jsx)(n.h5,{id:"evaldimension-1",children:"evalDimension()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionevaldimension",children:"FunctionDefinition.evalDimension()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional evalDimension: (args, options) => BoxedExpression;\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"Experimental"})})}),(0,l.jsx)(n.p,{children:"Dimensional analysis"}),(0,l.jsx)(n.h6,{id:"args-1",children:"args"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ReadonlyArray"}),"<",(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})}),">"]}),(0,l.jsx)(n.h6,{id:"options-21",children:"options"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"#evaluateoptions",children:(0,l.jsx)(n.code,{children:"EvaluateOptions"})})," & ",(0,l.jsx)(n.code,{children:"object"})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})})]}),"\n",(0,l.jsx)(n.h5,{id:"compile-1",children:"compile()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitioncompile",children:"FunctionDefinition.compile()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional compile: (expr) => CompiledExpression;\n"})}),(0,l.jsx)(n.p,{children:"Return a compiled (optimized) expression."}),(0,l.jsx)(n.h6,{id:"expr-9",children:"expr"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#compiledexpression",children:(0,l.jsx)(n.code,{children:"CompiledExpression"})})})]}),"\n",(0,l.jsx)(n.h5,{id:"eq-3",children:"eq()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitioneq",children:"FunctionDefinition.eq()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional eq: (a, b) => boolean | undefined;\n"})}),(0,l.jsx)(n.h6,{id:"a-10",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"b-4",children:"b"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"neq-3",children:"neq()?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitionneq",children:"FunctionDefinition.neq()?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional neq: (a, b) => boolean | undefined;\n"})}),(0,l.jsx)(n.h6,{id:"a-11",children:"a"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsx)(n.h6,{id:"b-5",children:"b"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"#boxedexpression",children:(0,l.jsx)(n.code,{children:"BoxedExpression"})})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"boolean"})," | ",(0,l.jsx)(n.code,{children:"undefined"})]})]}),"\n",(0,l.jsx)(n.h5,{id:"collection-10",children:"collection?"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"functiondefinitioncollection",children:"FunctionDefinition.collection?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional collection: Partial<CollectionHandlers>;\n"})})]}),"\n",(0,l.jsx)("a",{id:"basedefinition-1",name:"basedefinition-1"}),"\n",(0,l.jsx)(n.h3,{id:"basedefinition",children:"BaseDefinition"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type BaseDefinition = object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-22",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"description-2"}),"\n",(0,l.jsx)(n.h5,{id:"description",children:"description?"}),"\n",(0,l.jsx)("a",{id:"description-2",name:"description-2"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"basedefinitiondescription",children:"BaseDefinition.description?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional description: string | string[];\n"})}),(0,l.jsx)(n.p,{children:"A short (about 1 line) description. May contain Markdown."})]}),"\n",(0,l.jsx)("a",{id:"url-2"}),"\n",(0,l.jsx)(n.h5,{id:"url-1",children:"url?"}),"\n",(0,l.jsx)("a",{id:"url-2",name:"url-2"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"basedefinitionurl",children:"BaseDefinition.url?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional url: string;\n"})}),(0,l.jsx)(n.p,{children:"A URL pointing to more information about this symbol or operator."})]}),"\n",(0,l.jsx)("a",{id:"wikidata-3"}),"\n",(0,l.jsx)(n.h5,{id:"wikidata-1",children:"wikidata?"}),"\n",(0,l.jsx)("a",{id:"wikidata-3",name:"wikidata-3"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"basedefinitionwikidata",children:"BaseDefinition.wikidata?"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional wikidata: string;\n"})}),(0,l.jsx)(n.p,{children:"A short string representing an entry in a wikibase."}),(0,l.jsxs)(n.p,{children:["For example ",(0,l.jsx)(n.code,{children:"Q167"})," is the ",(0,l.jsx)(n.a,{href:"https://www.wikidata.org/wiki/Q167",children:"wikidata entry"}),"\nfor the ",(0,l.jsx)(n.code,{children:"Pi"})," constant."]})]}),"\n",(0,l.jsx)("a",{id:"identifierdefinition",name:"identifierdefinition"}),"\n",(0,l.jsx)(n.h3,{id:"identifierdefinition",children:"IdentifierDefinition"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type IdentifierDefinition = OneOf<[SymbolDefinition, FunctionDefinition, SemiBoxedExpression]>;\n"})}),"\n",(0,l.jsx)(n.p,{children:"A table mapping identifiers to their definition."}),"\n",(0,l.jsx)(n.p,{children:"Identifiers should be valid MathJSON identifiers. In addition, the\nfollowing rules are recommended:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Use only latin letters, digits and ",(0,l.jsx)(n.code,{children:"-"}),": ",(0,l.jsx)(n.code,{children:"/[a-zA-Z0-9-]+/"})]}),"\n",(0,l.jsxs)(n.li,{children:["The first character should be a letter: ",(0,l.jsx)(n.code,{children:"/^[a-zA-Z]/"})]}),"\n",(0,l.jsxs)(n.li,{children:["Functions and symbols exported from a library should start with an uppercase letter ",(0,l.jsx)(n.code,{children:"/^[A-Z]/"})]}),"\n"]}),"\n",(0,l.jsx)("a",{id:"identifierdefinitions",name:"identifierdefinitions"}),"\n",(0,l.jsx)(n.h3,{id:"identifierdefinitions",children:"IdentifierDefinitions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type IdentifierDefinitions = Readonly<{}>;\n"})}),"\n",(0,l.jsx)(n.h2,{id:"latex-parsing-and-serialization",children:"Latex Parsing and Serialization"}),"\n",(0,l.jsx)("a",{id:"latexstring",name:"latexstring"}),"\n",(0,l.jsx)(n.h3,{id:"latexstring",children:"LatexString"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type LatexString = string;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["A LaTeX string starts and end with ",(0,l.jsx)(n.code,{children:"$"}),", for example\n",(0,l.jsx)(n.code,{children:'"$\\frac{\\pi}{2}$"'}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"other-7",children:"Other"}),"\n",(0,l.jsx)("a",{id:"sign",name:"sign"}),"\n",(0,l.jsx)(n.h3,{id:"sign",children:"Sign"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'type Sign = \n  | "zero"\n  | "positive"\n  | "negative"\n  | "non-negative"\n  | "non-positive"\n  | "not-zero"\n  | "real-not-zero"\n  | "real"\n  | "nan"\n  | "positive-infinity"\n  | "negative-infinity"\n  | "complex-infinity"\n  | "unsigned";\n'})}),"\n",(0,l.jsxs)(n.admonition,{title:"THEORY OF OPERATIONS",type:"info",children:[(0,l.jsx)(n.p,{children:"To create a boxed expression:"}),(0,l.jsxs)(n.h3,{id:"cebox-and-ceparse",children:[(0,l.jsx)(n.code,{children:"ce.box()"})," and ",(0,l.jsx)(n.code,{children:"ce.parse()"})]}),(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(n.code,{children:"ce.box()"})," or ",(0,l.jsx)(n.code,{children:"ce.parse()"})," to get a canonical expression."]}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"the arguments are put in canonical form"}),"\n",(0,l.jsx)(n.li,{children:"invisible operators are made explicit"}),"\n",(0,l.jsx)(n.li,{children:"a limited number of core simplifications are applied,\nfor example 0 is removed from additions"}),"\n",(0,l.jsxs)(n.li,{children:["sequences are flattened: ",(0,l.jsx)(n.code,{children:'["Add", 1, ["Sequence", 2, 3]]'})," is\ntransformed to ",(0,l.jsx)(n.code,{children:'["Add", 1, 2, 3]'})]}),"\n",(0,l.jsxs)(n.li,{children:["associative functions are flattened: ",(0,l.jsx)(n.code,{children:'["Add", 1, ["Add", 2, 3]]'})," is\ntransformed to ",(0,l.jsx)(n.code,{children:'["Add", 1, 2, 3]'})]}),"\n",(0,l.jsx)(n.li,{children:"the arguments of commutative functions are sorted"}),"\n",(0,l.jsxs)(n.li,{children:["identifiers are ",(0,l.jsx)(n.strong,{children:"not"})," replaced with their values"]}),"\n"]}),(0,l.jsx)(n.h3,{id:"algebraic-methods-expradd-exprmul-etc",children:"Algebraic methods (expr.add(), expr.mul(), etc...)"}),(0,l.jsxs)(n.p,{children:["The boxed expression have some algebraic methods,\ni.e. ",(0,l.jsx)(n.code,{children:"add"}),", ",(0,l.jsx)(n.code,{children:"mul"}),", ",(0,l.jsx)(n.code,{children:"div"}),", ",(0,l.jsx)(n.code,{children:"pow"}),", etc. These methods are suitable for\ninternal calculations, although they may be used as part of the public\nAPI as well."]}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"the operation is performed on the canonical version of the expression"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"the arguments are not evaluated"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"the canonical handler (of the corresponding operation) is not called"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["some additional simplifications over canonicalization are applied.\nFor example number literals are combined.\nHowever, the result is exact, and no approximation is made. Use ",(0,l.jsx)(n.code,{children:".N()"}),"\nto get an approximate value.\nThis is equivalent to calling ",(0,l.jsx)(n.code,{children:"simplify()"})," on the expression (but\nwithout simplifying the arguments)."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"sequences were already flattened as part of the canonicalization process"}),"\n"]}),"\n"]}),(0,l.jsxs)(n.p,{children:["For 'add' and 'mul', which take multiple arguments, separate functions\nare provided that take an array of arguments. They are equivalent\nto calling the boxed algebraic method, i.e. ",(0,l.jsx)(n.code,{children:"ce.Zero.add(1, 2, 3)"})," and\n",(0,l.jsx)(n.code,{children:"add(1, 2, 3)"})," are equivalent."]}),(0,l.jsxs)(n.p,{children:["These methods are not equivalent to calling ",(0,l.jsx)(n.code,{children:"expr.evaluate()"})," on the\nexpression: evaluate will replace identifiers with their values, and\nevaluate the expression"]}),(0,l.jsx)(n.h3,{id:"ce_fn",children:(0,l.jsx)(n.code,{children:"ce._fn()"})}),(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(n.code,{children:"ce._fn()"})," to create a new function expression."]}),(0,l.jsx)(n.p,{children:"This is a low level method which is typically invoked in the canonical\nhandler of a function definition."}),(0,l.jsxs)(n.p,{children:["The arguments are not modified. The expression is not put in canonical\nform. The canonical handler is ",(0,l.jsx)(n.em,{children:"not"})," called."]}),(0,l.jsx)(n.p,{children:"A canonical flag can be set when calling the function, but it only\nasserts that the function and its arguments are canonical. The caller\nis responsible for ensuring that is the case."}),(0,l.jsx)(n.h3,{id:"cefunction",children:(0,l.jsx)(n.code,{children:"ce.function()"})}),(0,l.jsxs)(n.p,{children:["This is a specialized version of ",(0,l.jsx)(n.code,{children:"ce.box()"}),". It is used to create a new\nfunction expression."]}),(0,l.jsx)(n.p,{children:"The arguments are put in canonical form and the canonical handler is called."}),(0,l.jsxs)(n.p,{children:["For algebraic functions (add, mul, etc..), use the corresponding\ncanonicalization function, i.e. ",(0,l.jsx)(n.code,{children:"canonicalAdd(a, b)"})," instead of\n",(0,l.jsx)(n.code,{children:"ce.function('Add', a, b)"}),"."]}),(0,l.jsxs)(n.p,{children:["Another option is to use the algebraic methods directly, i.e. ",(0,l.jsx)(n.code,{children:"a.add(b)"}),"\ninstead of ",(0,l.jsx)(n.code,{children:"ce.function('Add', a, b)"}),". However, the algebraic methods will\napply further simplifications which may or may not be desirable. For\nexample, number literals will be combined."]}),(0,l.jsx)(n.h3,{id:"canonical-handlers",children:"Canonical Handlers"}),(0,l.jsx)(n.p,{children:"Canonical handlers are responsible for:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"validating the signature (type and number of arguments)"}),"\n",(0,l.jsx)(n.li,{children:"flattening sequences"}),"\n",(0,l.jsx)(n.li,{children:"flattening associative functions"}),"\n",(0,l.jsx)(n.li,{children:"sort the arguments (if the function is commutative)"}),"\n",(0,l.jsxs)(n.li,{children:["calling ",(0,l.jsx)(n.code,{children:"ce._fn()"})," to create a new function expression"]}),"\n",(0,l.jsx)(n.li,{children:"if the function definition has a hold, they should also put\ntheir arguments in canonical form, if appropriate"}),"\n"]}),(0,l.jsxs)(n.p,{children:["When the canonical handler is invoked, the arguments have been put in\ncanonical form according to the ",(0,l.jsx)(n.code,{children:"hold"})," flag."]}),(0,l.jsxs)(n.p,{children:["Some canonical handlers are available as separate functions and can be\nused directly, for example ",(0,l.jsx)(n.code,{children:"canonicalAdd(a, b)"})," instead of\n",(0,l.jsx)(n.code,{children:"ce.function('Add', [a, b])"}),"."]})]}),"\n",(0,l.jsx)("a",{id:"isrulestep",name:"isrulestep"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h3,{id:"isrulestep",children:"isRuleStep()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"function isRuleStep(x): x is RuleStep\n"})}),(0,l.jsx)(n.h5,{id:"x",children:"x"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"any"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"x is RuleStep"})})]}),"\n",(0,l.jsx)("a",{id:"isboxedrule",name:"isboxedrule"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h3,{id:"isboxedrule",children:"isBoxedRule()"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"function isBoxedRule(x): x is BoxedRule\n"})}),(0,l.jsx)(n.h5,{id:"x-1",children:"x"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"any"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"x is BoxedRule"})})]}),"\n",(0,l.jsx)("a",{id:"rulestep",name:"rulestep"}),"\n",(0,l.jsx)(n.h3,{id:"rulestep",children:"RuleStep"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type RuleStep = object;\n"})}),"\n",(0,l.jsx)(n.h4,{id:"type-declaration-23",children:"Type declaration"}),"\n",(0,l.jsx)("a",{id:"value-2"}),"\n",(0,l.jsx)(n.h5,{id:"value-3",children:"value"}),"\n",(0,l.jsx)("a",{id:"value-2",name:"value-2"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"rulestepvalue",children:"RuleStep.value"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"value: BoxedExpression;\n"})})]}),"\n",(0,l.jsx)("a",{id:"because"}),"\n",(0,l.jsx)(n.h5,{id:"because",children:"because"}),"\n",(0,l.jsx)("a",{id:"because",name:"because"}),"\n",(0,l.jsxs)(r.A,{children:[(0,l.jsx)(n.h5,{id:"rulestepbecause",children:"RuleStep.because"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"because: string;\n"})})]}),"\n",(0,l.jsx)("a",{id:"rulesteps",name:"rulesteps"}),"\n",(0,l.jsx)(n.h3,{id:"rulesteps",children:"RuleSteps"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type RuleSteps = RuleStep[];\n"})}),"\n",(0,l.jsx)("a",{id:"canonicaloptions",name:"canonicaloptions"}),"\n",(0,l.jsx)(n.h3,{id:"canonicaloptions",children:"CanonicalOptions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type CanonicalOptions = \n  | boolean\n  | CanonicalForm\n  | CanonicalForm[];\n"})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(x,{...e})}):x(e)}},7471:(e,n,i)=>{i.d(n,{A:()=>d});const s={name:"name_KK4d",memberCard:"memberCard_JQCf"};var l=i(4848);function d(e){let{children:n}=e;return(0,l.jsx)("div",{className:s.memberCard,children:n})}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(6540);const l={},d=s.createContext(l);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);