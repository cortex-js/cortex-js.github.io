"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[2758],{2763:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"compute-engine/guide-simplify","title":"Simplify","description":"A complicated mathematical expression can often be transformed into a form that","source":"@site/docs/compute-engine/11-guide-simplify.md","sourceDirName":"compute-engine","slug":"/compute-engine/guides/simplify/","permalink":"/compute-engine/guides/simplify/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1731785970000,"sidebarPosition":11,"frontMatter":{"title":"Simplify","slug":"/compute-engine/guides/simplify/"},"sidebar":"docSidebar","previous":{"title":"Types","permalink":"/compute-engine/guides/types/"},"next":{"title":"Compiling Expressions","permalink":"/compute-engine/guides/compiling/"}}');var t=n(4848),o=n(8453);const r={title:"Simplify",slug:"/compute-engine/guides/simplify/"},l=void 0,a={},c=[{value:"Defining &quot;Simpler&quot;",id:"defining-simpler",level:2},{value:"Numeric Simplifications",id:"numeric-simplifications",level:2},{value:"Using Assumptions",id:"using-assumptions",level:2}];function d(e){const i={code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Icon:n,Intro:s,ReadMore:r}=i;return n||m("Icon",!0),s||m("Intro",!0),r||m("ReadMore",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s,{children:(0,t.jsx)(i.p,{children:"A complicated mathematical expression can often be transformed into a form that\nis easier to understand."})}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"expr.simplify()"})," function tries expanding, factoring and applying many\nother transformations to find a simple a simpler form of a symbolic expression."]}),"\n",(0,t.jsx)(i.p,{children:"Before the transformation rules are applied, the expression is put into a\ncanonical form."}),"\n",(0,t.jsxs)(i.p,{children:['When a function is simplified, its arguments are simplified as well, unless the\nargument is "held". Which arguments are held is specified by the ',(0,t.jsx)(i.code,{children:"hold"})," property\nof the function definition. In addition, any argument wrapped with a ",(0,t.jsx)(i.code,{children:"Hold"}),"\nfunction will be held, that is, not simplified. Conversely, a held argument\nwrapped with a ",(0,t.jsx)(i.code,{children:"ReleaseHold"})," function will not be held, and it will be\nsimplified."]}),"\n",(0,t.jsx)(i.h2,{id:"defining-simpler",children:'Defining "Simpler"'}),"\n",(0,t.jsx)(i.p,{children:"An expression may be represented by several equivalent forms."}),"\n",(0,t.jsx)(i.p,{children:"For example \\( (x + 4)(x-5) \\) and \\(x^2 -x -20\\) represent the same\nexpression."}),"\n",(0,t.jsx)(i.p,{children:'Determining which is "the simplest" depends on how the complexity is measured.'}),"\n",(0,t.jsx)(i.p,{children:"By default, the complexity of an expression is measured by counting the number\nof operations in the expression, and giving an increasing cost to:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"integers with fewer digits"}),"\n",(0,t.jsx)(i.li,{children:"integers with more digits"}),"\n",(0,t.jsx)(i.li,{children:"other numeric values"}),"\n",(0,t.jsx)(i.li,{children:"add, multiply, divide"}),"\n",(0,t.jsx)(i.li,{children:"subtract and negate"}),"\n",(0,t.jsx)(i.li,{children:"square root and root"}),"\n",(0,t.jsx)(i.li,{children:"exp"}),"\n",(0,t.jsx)(i.li,{children:"power and log"}),"\n",(0,t.jsx)(i.li,{children:"trigonometric function"}),"\n",(0,t.jsx)(i.li,{children:"inverse trigonometric function"}),"\n",(0,t.jsx)(i.li,{children:"hyperbolic functions"}),"\n",(0,t.jsx)(i.li,{children:"inverse hyperbolic functions"}),"\n",(0,t.jsx)(i.li,{children:"other functions"}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"To influence how the complexity of an expression is measured"}),", set the\n",(0,t.jsx)(i.code,{children:"costFunction"})," property of the compute engine to a function assigning a cost to\nan expression."]}),"\n",(0,t.jsx)(i.h2,{id:"numeric-simplifications",children:"Numeric Simplifications"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"expr.simplify()"})," function will apply some numeric simplifications, such as\ncombining small integer and rational values, simplifying division by 1, addition\nor subtraction of 0, etc..."]}),"\n",(0,t.jsx)(i.p,{children:"It avoids making any simplification that could result in a loss of precision."}),"\n",(0,t.jsxs)(i.p,{children:["For example, \\( 10^",300," + 1\\) cannot be simplified without losing the least\nsignificant digit, so ",(0,t.jsx)(i.code,{children:"expr.simplify()"})," will return the expression unmodified."]}),"\n",(0,t.jsx)(i.h2,{id:"using-assumptions",children:"Using Assumptions"}),"\n",(0,t.jsx)(i.p,{children:"Assumptions are additional information available about some symbols, for example\n\\( x > 0 \\) or \\(n \\in \\N\\)."}),"\n",(0,t.jsx)(i.p,{children:"Some transformations are only applicable if some assumptions can be verified."}),"\n",(0,t.jsx)(i.p,{children:"For example, if no assumptions about \\(x \\) is available the expression \\(\n\\sqrt{x^2} \\) cannot be simplified. However, if an assumption that \\( x \\geq 0\n\\) is available, then the expression can be simplified to \\( x \\)."}),"\n",(0,t.jsxs)(r,{path:"/compute-engine/guides/assumptions/",children:[" Read more about\n",(0,t.jsx)("strong",{children:"Assumptions"})," ",(0,t.jsx)(n,{name:"chevron-right-bold"})]})]})}function p(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}function m(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>l});var s=n(6540);const t={},o=s.createContext(t);function r(e){const i=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:i},e.children)}}}]);