"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[3737],{8639:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>x,frontMatter:()=>d,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"compute-engine/changelog","title":"Changelog - Compute Engine","description":"0.28.0 2025-02-06","source":"@site/docs/compute-engine/changelog.md","sourceDirName":"compute-engine","slug":"/compute-engine/changelog/","permalink":"/compute-engine/changelog/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1731785970000,"frontMatter":{"title":"Changelog - Compute Engine","sidebar_label":"Changelog","slug":"/compute-engine/changelog/","toc_max_heading_level":2},"sidebar":"docSidebar","previous":{"title":"Demo","permalink":"/compute-engine/demo/"},"next":{"title":"Expressions","permalink":"/compute-engine/guides/expressions/"}}');var r=s(4848),l=s(8453),c=s(7223);const d={title:"Changelog - Compute Engine",sidebar_label:"Changelog",slug:"/compute-engine/changelog/",toc_max_heading_level:2},o="Compute Engine Changelog",a={},t=[{value:"0.28.0 <em>2025-02-06</em>",id:"0280-2025-02-06",level:2},{value:"Issues Resolved",id:"issues-resolved",level:3},{value:"New Features and Improvements",id:"new-features-and-improvements",level:3},{value:"Asynchronous Operations",id:"asynchronous-operations",level:4},{value:"0.27.0 <em>2024-12-02</em>",id:"0270-2024-12-02",level:2},{value:"0.26.4 <em>2024-10-17</em>",id:"0264-2024-10-17",level:2},{value:"0.26.3 <em>2024-10-17</em>",id:"0263-2024-10-17",level:2},{value:"0.26.1 <em>2024-10-04</em>",id:"0261-2024-10-04",level:2},{value:"Issues Resolved",id:"issues-resolved-1",level:3},{value:"New Features and Improvements",id:"new-features-and-improvements-1",level:3},{value:"0.26.0 <em>2024-10-01</em>",id:"0260-2024-10-01",level:2},{value:"Breaking Changes",id:"breaking-changes",level:3},{value:"New Features and Improvements",id:"new-features-and-improvements-2",level:3},{value:"Issues Resolved",id:"issues-resolved-2",level:3},{value:"0.25.1 <em>2024-06-27</em>",id:"0251-2024-06-27",level:2},{value:"Issues Resolved",id:"issues-resolved-3",level:3},{value:"New Features",id:"new-features",level:3},{value:"0.25.0 <em>2024-06-25</em>",id:"0250-2024-06-25",level:2},{value:"Breaking Changes",id:"breaking-changes-1",level:3},{value:"New Features",id:"new-features-1",level:3},{value:"Issues Resolved",id:"issues-resolved-4",level:3},{value:"0.24.0 <em>2024-02-23</em>",id:"0240-2024-02-23",level:2},{value:"Issues Resolved",id:"issues-resolved-5",level:3},{value:"0.23.1 <em>2024-01-27</em>",id:"0231-2024-01-27",level:2},{value:"Issues Resolved",id:"issues-resolved-6",level:3},{value:"0.23.0 <em>2024-01-01</em>",id:"0230-2024-01-01",level:2},{value:"New Features",id:"new-features-2",level:3},{value:"Issues Resolved",id:"issues-resolved-7",level:3},{value:"Improvements",id:"improvements",level:3},{value:"0.22.0 <em>2023-11-13</em>",id:"0220-2023-11-13",level:2},{value:"Breaking Changes",id:"breaking-changes-2",level:3},{value:"Work In Progress",id:"work-in-progress",level:3},{value:"New Features",id:"new-features-3",level:3},{value:"Improvements",id:"improvements-1",level:3},{value:"0.21.0 <em>2023-11-02</em>",id:"0210-2023-11-02",level:2},{value:"New Features",id:"new-features-4",level:3},{value:"Issue Resolved",id:"issue-resolved",level:3},{value:"0.20.2 <em>2023-10-31</em>",id:"0202-2023-10-31",level:2},{value:"Issues Resolved",id:"issues-resolved-8",level:3},{value:"0.20.1 <em>2023-10-31</em>",id:"0201-2023-10-31",level:2},{value:"Issues Resolved",id:"issues-resolved-9",level:3},{value:"0.20.0 <em>2023-10-30</em>",id:"0200-2023-10-30",level:2},{value:"Breaking Changes",id:"breaking-changes-3",level:3},{value:"Issues Resolved",id:"issues-resolved-10",level:3},{value:"New Features and Improvements",id:"new-features-and-improvements-3",level:3},{value:"0.19.1 <em>2023-10-26</em>",id:"0191-2023-10-26",level:2},{value:"Issues Resolved",id:"issues-resolved-11",level:3},{value:"0.19.0 <em>2023-10-25</em>",id:"0190-2023-10-25",level:2},{value:"Breaking Changes",id:"breaking-changes-4",level:3},{value:"Issues Resolved",id:"issues-resolved-12",level:3},{value:"New Features",id:"new-features-5",level:3},{value:"Improvements",id:"improvements-2",level:3},{value:"0.18.1 <em>2023-10-16</em>",id:"0181-2023-10-16",level:2},{value:"Issues Resolved",id:"issues-resolved-13",level:3},{value:"Improvements",id:"improvements-3",level:3},{value:"0.18.0 <em>2023-10-16</em>",id:"0180-2023-10-16",level:2},{value:"New Features",id:"new-features-6",level:3},{value:"Improvements",id:"improvements-4",level:3},{value:"0.17.0 <em>2023-10-12</em>",id:"0170-2023-10-12",level:2},{value:"Breaking Changes",id:"breaking-changes-5",level:3},{value:"New Features",id:"new-features-7",level:3},{value:"Improvements",id:"improvements-5",level:3},{value:"Bugs Fixed",id:"bugs-fixed",level:3},{value:"0.16.0 <em>2023-09-29</em>",id:"0160-2023-09-29",level:2},{value:"Breaking Changes",id:"breaking-changes-6",level:3},{value:"New Features",id:"new-features-8",level:3},{value:"Functions",id:"functions",level:4},{value:"Control Structures",id:"control-structures",level:4},{value:"Calculus",id:"calculus",level:4},{value:"Collections",id:"collections",level:4},{value:"Improvements",id:"improvements-6",level:3},{value:"Issues Resolved",id:"issues-resolved-14",level:3},{value:"0.15.0 <em>2023-09-14</em>",id:"0150-2023-09-14",level:2},{value:"Improvements",id:"improvements-7",level:3},{value:"0.14.0 <em>2023-09-13</em>",id:"0140-2023-09-13",level:2},{value:"Breaking Changes",id:"breaking-changes-7",level:3},{value:"Improvements",id:"improvements-8",level:3},{value:"0.13.0 <em>2023-09-09</em>",id:"0130-2023-09-09",level:2},{value:"New Features",id:"new-features-9",level:3},{value:"Issues Resolved and Improvements",id:"issues-resolved-and-improvements",level:3},{value:"0.12.7 <em>2023-09-08</em>",id:"0127-2023-09-08",level:2},{value:"Improvements",id:"improvements-9",level:3},{value:"0.12.6 <em>2023-09-08</em>",id:"0126-2023-09-08",level:2},{value:"Breaking Changes",id:"breaking-changes-8",level:3},{value:"Improvements and Bux Fixes",id:"improvements-and-bux-fixes",level:3},{value:"0.12.1 <em>2022-12-01</em>",id:"0121-2022-12-01",level:2},{value:"0.12.0 <em>2022-11-27</em>",id:"0120-2022-11-27",level:2},{value:"Breaking Changes",id:"breaking-changes-9",level:3},{value:"Improvements",id:"improvements-10",level:3},{value:"Issues Resolved",id:"issues-resolved-15",level:3},{value:"0.11.0 <em>2022-11-18</em>",id:"0110-2022-11-18",level:2},{value:"Breaking Changes",id:"breaking-changes-10",level:3},{value:"Improvements",id:"improvements-11",level:3},{value:"Issues Resolved",id:"issues-resolved-16",level:3},{value:"0.10.0 <em>2022-11-17</em>",id:"0100-2022-11-17",level:2},{value:"Breaking Changes",id:"breaking-changes-11",level:3},{value:"Issues Resolved",id:"issues-resolved-17",level:3},{value:"Improvements",id:"improvements-12",level:3},{value:"0.9.0 <em>2022-11-15</em>",id:"090-2022-11-15",level:2},{value:"Breaking Changes",id:"breaking-changes-12",level:3},{value:"Improvements",id:"improvements-13",level:3},{value:"Bugs Fixed",id:"bugs-fixed-1",level:3},{value:"0.8.0 <em>2022-10-02</em>",id:"080-2022-10-02",level:2},{value:"Breaking Changes",id:"breaking-changes-13",level:3},{value:"Bugs Fixed",id:"bugs-fixed-2",level:3},{value:"0.7.0 <em>2022-09-30</em>",id:"070-2022-09-30",level:2},{value:"Breaking Changes",id:"breaking-changes-14",level:3},{value:"Features",id:"features",level:3},{value:"Bugs Fixed",id:"bugs-fixed-3",level:3},{value:"0.6.0 <em>2022-04-18</em>",id:"060-2022-04-18",level:2},{value:"Improvements",id:"improvements-14",level:3},{value:"0.5.0 <em>2022-04-05</em>",id:"050-2022-04-05",level:2},{value:"Improvements",id:"improvements-15",level:3},{value:"0.4.4",id:"044",level:2},{value:"Improvements",id:"improvements-16",level:3},{value:"0.4.3",id:"043",level:2},{value:"Transition Guide from 0.4.2",id:"transition-guide-from-042",level:3},{value:"Boxed Expression",id:"boxed-expression",level:3},{value:"Canonical Form",id:"canonical-form",level:3},{value:"Rational and Division",id:"rational-and-division",level:3},{value:"Parsing and Serialization Customization",id:"parsing-and-serialization-customization",level:3},{value:"Comparing Expressions",id:"comparing-expressions",level:3},{value:"Before / After",id:"before--after",level:3},{value:"0.3.0",id:"030",level:2},{value:"Improvements",id:"improvements-17",level:3}];function h(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"compute-engine-changelog",children:"Compute Engine Changelog"})}),"\n","\n",(0,r.jsxs)(c.A,{children:[(0,r.jsxs)(n.h2,{id:"0280-2025-02-06",children:["0.28.0 ",(0,r.jsx)(n.em,{children:"2025-02-06"})]}),(0,r.jsx)(n.h3,{id:"issues-resolved",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#211"})," More consistent canonicalization and serialization of exact numeric\nvalues of the form ",(0,r.jsx)(n.code,{children:"(a\u221ab)/c"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#219"})," The ",(0,r.jsx)(n.code,{children:"invisibleOperator"})," canonicalization previously also\ncanonicalized some multiplication."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#218"})," Improved performance of parsing invisible operators, including fixing\nsome cases where the parsing was incorrect."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#216"})," Correctly parse subscripts with a single character, for example\n",(0,r.jsx)(n.code,{children:"x_1"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#216"})," Parse some non-standard integral signs, for example\n",(0,r.jsx)(n.code,{children:"\\int x \\cdot \\differentialD x"})," (both the ",(0,r.jsx)(n.code,{children:"\\cdot"})," and the ",(0,r.jsx)(n.code,{children:"\\differentialD"})," are\nnon-standard)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#210"})," Numeric approximation of odd nth roots of negative numbers evaluate\ncorrectly."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#153"})," Correctly parse integrals with ",(0,r.jsx)(n.code,{children:"\\limits"}),", e.g.\n",(0,r.jsx)(n.code,{children:"\\int\\limits_0^1 x^2 \\mathrm{d} x"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Correctly serialize to ASCIIMath ",(0,r.jsx)(n.code,{children:"Delimiter"})," expressions."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When inferring the type of numeric values do not constrain them to be ",(0,r.jsx)(n.code,{children:"real"}),".\nAs a result:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ce.assign('a', ce.parse('i'));\nce.parse('a+1').evaluate().print();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["now returns ",(0,r.jsx)(n.code,{children:"1 + i"})," instead of throwing a type error."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Correctly parse and evaluate unary and binary ",(0,r.jsx)(n.code,{children:"\\pm"})," and ",(0,r.jsx)(n.code,{children:"\\mp"})," operators."]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"new-features-and-improvements",children:"New Features and Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"expr.isEqual()"})," will now return true/false if the expressions include the\nsame unknowns and are structurally equal after expansion and simplifications.\nFor example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"console.info(ce.parse('(x+1)^2').isEqual(ce.parse('x^2+2x+1')));\n// -> true\n"})}),"\n"]}),"\n"]}),(0,r.jsx)(n.h4,{id:"asynchronous-operations",children:"Asynchronous Operations"}),(0,r.jsx)(n.p,{children:"Some computations can be time-consuming, for example, computing a very large\nfactorial. To prevent the browser from freezing, the Compute Engine can now\nperform some operations asynchronously."}),(0,r.jsxs)(n.p,{children:["To perform an asynchronous operation, use the ",(0,r.jsx)(n.code,{children:"expr.evaluateAsync"})," method. For\nexample:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"try {\n  const fact = ce.parse('(70!)!');\n  const factResult = await fact.evaluateAsync();\n  factResult.print();\n} catch (e) {\n  console.error(e);\n}\n"})}),(0,r.jsxs)(n.p,{children:["It is also possible to interrupt an operation, for example by providing a\npause/cancel button that the user can press. To do so, use an ",(0,r.jsx)(n.code,{children:"AbortController"}),"\nobject and a ",(0,r.jsx)(n.code,{children:"signal"}),". For example:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const abort = new AbortController();\nconst signal = abort.signal;\nsetTimeout(() => abort.abort(), 500);\ntry {\n  const fact = ce.parse('(70!)!');\n  const factResult = await fact.evaluateAsync({ signal });\n  factResult.print();\n} catch (e) {\n  console.error(e);\n}\n"})}),(0,r.jsx)(n.p,{children:"In the example above, we trigger an abort after 500ms."}),(0,r.jsxs)(n.p,{children:["It is also possible to control how long an operation can run by setting the\n",(0,r.jsx)(n.code,{children:"ce.timeLimit"})," property with a value in milliseconds. For example:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ce.timeLimit = 1000;\ntry {\n  const fact = ce.parse('(70!)!');\n  fact.evaluate().print();\n} catch (e) {\n  console.error(e);\n}\n"})}),(0,r.jsx)(n.p,{children:"The time limit applies to either the synchronous or asynchronous evaluation."}),(0,r.jsx)(n.p,{children:"The default time limit is 2,000ms (2 seconds)."}),(0,r.jsxs)(n.p,{children:["When an operation is canceled either because of a timeout or an abort, a\n",(0,r.jsx)(n.code,{children:"CancellationError"})," is thrown."]}),(0,r.jsxs)(n.h2,{id:"0270-2024-12-02",children:["0.27.0 ",(0,r.jsx)(n.em,{children:"2024-12-02"})]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#217"})," Correctly parse LaTeX expressions that include a command followed by\na ",(0,r.jsx)(n.code,{children:"*"})," such as ",(0,r.jsx)(n.code,{children:"\\\\pi*2"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#217"})," Correctly calculate the angle of trigonometric expressions with an\nexpression containing a reference to ",(0,r.jsx)(n.code,{children:"Pi"}),", for example ",(0,r.jsx)(n.code,{children:"\\\\sin(\\\\pi^2)"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Factorial"})," function will now time out if the argument is too large. The\ntimeout is signaled by throwing a ",(0,r.jsx)(n.code,{children:"CancellationError"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When specifying ",(0,r.jsx)(n.code,{children:"exp.toMathJSON({shorthands:[]})"}),", i.e., not to use shorthands\nin the MathJSON, actually avoid using shorthands."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Correctly use custom multiply, plus, etc. for LaTeX serialization."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When comparing two numeric values, the tolerance is now used to determine if\nthe values are equal. The tolerance can be set with the ",(0,r.jsx)(n.code,{children:"ce.tolerance"}),"\nproperty."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When comparing two expressions with ",(0,r.jsx)(n.code,{children:"isEqual()"})," the values are compared\nstructurally when necessary, or with a stochastic test when the expressions\nare too complex to compare structurally."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Correctly serialize nested superscripts, e.g. ",(0,r.jsx)(n.code,{children:"x^{y^z}"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The result of evaluating a ",(0,r.jsx)(n.code,{children:"Hold"})," expression is now the expression itself."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["To prevent evaluation of an expression temporarily, use the ",(0,r.jsx)(n.code,{children:"Unevaluated"}),"\nfunction. The result of evaluating an ",(0,r.jsx)(n.code,{children:"Unevaluated"})," expression is its\nargument."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The type of a ",(0,r.jsx)(n.code,{children:"Hold"})," expression was incorrectly returned as ",(0,r.jsx)(n.code,{children:"string"}),". It now\nreturns the type of its argument."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The statistics function (",(0,r.jsx)(n.code,{children:"Mean"}),", ",(0,r.jsx)(n.code,{children:"Median"}),", ",(0,r.jsx)(n.code,{children:"Variance"}),", ",(0,r.jsx)(n.code,{children:"StandardDeviation"}),",\n",(0,r.jsx)(n.code,{children:"Kurtosis"}),", ",(0,r.jsx)(n.code,{children:"Skewness"}),", ",(0,r.jsx)(n.code,{children:"Mode"}),", ",(0,r.jsx)(n.code,{children:"Quartiles"})," and ",(0,r.jsx)(n.code,{children:"InterQuartileRange"}),") now\naccept as argument either a collection or a sequence of values."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\mathrm{Mean}([7, 2, 11])").evaluate().print();\n// -> 20/3\nce.parse("\\\\mathrm{Mean}(7, 2, 11)").evaluate().print();\n// -> 20/3\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Variance"})," and ",(0,r.jsx)(n.code,{children:"StandardDeviation"})," functions now have variants for\npopulation statistics, ",(0,r.jsx)(n.code,{children:"PopulationVariance"})," and ",(0,r.jsx)(n.code,{children:"PopulationStandardDeviation"}),".\nThe default is to use sample statistics."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\mathrm{PopulationVariance}([7, 2, 11])").evaluate().print();\n// -> 13.555\nce.parse("\\\\mathrm{Variance}([7, 2, 11])").evaluate().print();\n// -> 20.333\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The statistics function can now be compiled to JavaScript:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const code = ce.parse("\\\\mathrm{Mean}(7, 2, 11)").compile();\nconsole.log(code());\n// -> 13.555\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The statistics function calculate either using machine numbers or bignums\ndepending on the precision. The precision can be set with the ",(0,r.jsx)(n.code,{children:"precision"}),"\nproperty of the Compute Engine."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The argument of compiled function is now optional."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Compiled expressions can now reference external JavaScript functions. For\nexample:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ce.defineFunction('Foo', {\n  signature: 'number -> number',\n  evaluate: ([x]) => ce.box(['Add', x, 1]),\n});\n\nconst fn = ce.box(['Foo', 3]).compile({\n  functions: { Foo: (x) => x + 1 },\n})!;\n\nconsole.info(fn());\n// -> 4\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ce.defineFunction('Foo', {\n  signature: 'number -> number',\n  evaluate: ([x]) => ce.box(['Add', x, 1]),\n});\n\nfunction foo(x) {\n  return x + 1;\n}\n\nconst fn = ce.box(['Foo', 3]).compile({\n  functions: { Foo: foo },\n})!;\n\nconsole.info(fn());\n// -> 4\n"})}),"\n",(0,r.jsx)(n.p,{children:"Additionally, functions can be implicitly imported (in case they are needed by\nother JavaScript functions):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ce.defineFunction('Foo', {\n  signature: 'number -> number',\n  evaluate: ([x]) => ce.box(['Add', x, 1]),\n});\n\nfunction bar(x, y) {\n  return x + y;\n}\n\nfunction foo(x) {\n  return bar(x, 1);\n}\n\n\nconst fn = ce.box(['Foo', 3]).compile({\n  functions: { Foo: 'foo' },\n  imports: [foo, bar],\n})!;\n\nconsole.info(fn());\n// -> 4\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Compiled expression can now include an arbitrary preamble (JavaScript source)\nthat is executed before the compiled function is executed. This can be used to\ndefine additional functions or constants."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ce.defineFunction('Foo', {\n  signature: 'number -> number',\n  evaluate: ([x]) => ce.box(['Add', x, 1]),\n});\n\nconst code = ce.box(['Foo', 3]).compile({\n  preamble: \"function Foo(x) { return x + 1};\",\n});\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"hold"})," function definition flag has been renamed to ",(0,r.jsx)(n.code,{children:"lazy"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0264-2024-10-17",children:["0.26.4 ",(0,r.jsx)(n.em,{children:"2024-10-17"})]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#201"})," Identifiers of the form ",(0,r.jsx)(n.code,{children:"A_\\text{1}"})," were not parsed correctly."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#202"})," Fixed serialization of integrals and bigops."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0263-2024-10-17",children:["0.26.3 ",(0,r.jsx)(n.em,{children:"2024-10-17"})]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Correctly account for ",(0,r.jsx)(n.code,{children:"fractionalDigits"})," when formatting numbers."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#191"})," Correctly handle ",(0,r.jsx)(n.code,{children:"\\\\lnot\\\\forall"})," and ",(0,r.jsx)(n.code,{children:"\\\\lnot\\\\exists"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#206"})," The square root of 1000000 was canonicalized to 0."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#207"})," When a square root with a literal base greater than 1e6 was preceded\nby a non-integer literal number, the literal number was ignored during\ncanonicalization."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#208"})," ",(0,r.jsx)(n.strong,{children:"#204"})," Correctly evaluate numeric approximation of roots, e.g.\n",(0,r.jsx)(n.code,{children:"\\\\sqrt[3]{125}"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#205"})," ",(0,r.jsx)(n.code,{children:"1/ln(0)"})," was incorrectly evaluated to ",(0,r.jsx)(n.code,{children:"1"}),". It now returns ",(0,r.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0261-2024-10-04",children:["0.26.1 ",(0,r.jsx)(n.em,{children:"2024-10-04"})]}),(0,r.jsx)(n.h3,{id:"issues-resolved-1",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#194"})," Correctly handle the precedence of unary negate, for example in\n",(0,r.jsx)(n.code,{children:"-5^{\\frac12}"})," or ",(0,r.jsx)(n.code,{children:"-5!"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["When using a function definition with ",(0,r.jsx)(n.code,{children:"ce.declare()"}),", do not generate a\nruntime error."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"new-features-and-improvements-1",children:"New Features and Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:".expand()"})," method to boxed expression. This method expands the\nexpression, for example ",(0,r.jsx)(n.code,{children:'ce.parse("(x+1)^2").expand()'})," will return\n",(0,r.jsx)(n.code,{children:"x^2 + 2x + 1"}),"."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0260-2024-10-01",children:["0.26.0 ",(0,r.jsx)(n.em,{children:"2024-10-01"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The property ",(0,r.jsx)(n.code,{children:"expr.head"})," has been deprecated. Use ",(0,r.jsx)(n.code,{children:"expr.operator"})," instead.\n",(0,r.jsx)(n.code,{children:"expr.head"})," is still supported in this version but will be removed in a future\nupdate."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The MathJSON utility functions ",(0,r.jsx)(n.code,{children:"head()"})," and ",(0,r.jsx)(n.code,{children:"op()"})," have been renamed to\n",(0,r.jsx)(n.code,{children:"operator()"})," and ",(0,r.jsx)(n.code,{children:"operand()"})," respectively."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The methods for algebraic operations (",(0,r.jsx)(n.code,{children:"add"}),", ",(0,r.jsx)(n.code,{children:"div"}),", ",(0,r.jsx)(n.code,{children:"mul"}),", etc...) have been\nmoved from the Compute Engine to the Boxed Expression class. Instead of\ncalling ",(0,r.jsx)(n.code,{children:"ce.add(a, b)"}),", call ",(0,r.jsx)(n.code,{children:"a.add(b)"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Those methods also behave more consistently: they apply some additional\nsimplication rules over canonicalization. For example, while\n",(0,r.jsx)(n.code,{children:"ce.parse('1 + 2')"})," return ",(0,r.jsx)(n.code,{children:'["Add", 1, 2]'}),", ",(0,r.jsx)(n.code,{children:"ce.box(1).add(2)"})," will return\n",(0,r.jsx)(n.code,{children:"3"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ce.numericMode"})," option has been removed. Instead, set the ",(0,r.jsx)(n.code,{children:"ce.precision"}),"\nproperty to the desired precision. Set the precision to ",(0,r.jsx)(n.code,{children:'"machine"'})," for\nmachine precision calculations (about 15 digits). Set it to ",(0,r.jsx)(n.code,{children:'"auto"'})," for a\ndefault of 21 digits. Set it to a number for a greater fixed precision."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The MathJSON Dictionary element has been deprecated. Use a ",(0,r.jsx)(n.code,{children:"Dictionary"}),"\nexpression instead."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ExtendedRealNumbers"}),", ",(0,r.jsx)(n.code,{children:"ExtendedComplexNumbers"})," domains have been\ndeprecated. Use the ",(0,r.jsx)(n.code,{children:"RealNumbers"})," and ",(0,r.jsx)(n.code,{children:"ComplexNumbers"})," domains instead."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:'The "Domain" expression has been deprecated. Use types instead (see below).'}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Some ",(0,r.jsx)(n.code,{children:"BoxedExpression"})," properties have been removed:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Instead of ",(0,r.jsx)(n.code,{children:"expr.isZero"}),", use ",(0,r.jsx)(n.code,{children:"expr.is(0)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Instead of ",(0,r.jsx)(n.code,{children:"expr.isNotZero"}),", use ",(0,r.jsx)(n.code,{children:"!expr.is(0)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Instead of ",(0,r.jsx)(n.code,{children:"expr.isOne"}),", use ",(0,r.jsx)(n.code,{children:"expr.is(1)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Instead of ",(0,r.jsx)(n.code,{children:"expr.isNegativeOne"}),", use ",(0,r.jsx)(n.code,{children:"expr.is(-1)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The signature of ",(0,r.jsx)(n.code,{children:"ce.declare()"})," has changed. In particular, the ",(0,r.jsx)(n.code,{children:"N"})," handler\nhas been replaced with ",(0,r.jsx)(n.code,{children:"evaluate"}),"."]}),"\n"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Before\nce.declare('Mean', {\n  N: (ce: IComputeEngine): BoxedExpression => {\n    return ce.number(1);\n  },\n});\n\n// Now\nce.declare('Mean', { evaluate: (ops, { engine }) => ce.number(1) });\n"})}),(0,r.jsx)(n.h3,{id:"new-features-and-improvements-2",children:"New Features and Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"New Simplification Engine"})}),"\n",(0,r.jsx)(n.p,{children:"The way expressions are simplified has been completely rewritten. The new\nengine is more powerful and more flexible."}),"\n",(0,r.jsxs)(n.p,{children:["The core API remains the same: to simplify an expression, use\n",(0,r.jsx)(n.code,{children:"expr.simplify()"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To use a custom set of rules, pass the rules as an argument to ",(0,r.jsx)(n.code,{children:"simplify()"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'expr.simplify({rules: [\n  "|x:<0| -> -x",\n  "|x:>=0| -> x",\n]});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["There are a few changes to the way rules are represented. The ",(0,r.jsx)(n.code,{children:"priority"}),"\nproperty has been removed. Instead, rules are applied in the order in which\nthey are defined."]}),"\n",(0,r.jsx)(n.p,{children:"A rule can also now be a function that takes an expression and returns a new\nexpression. For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"expr.simplify({rules: [\n  (expr) => {\n    if (expr.operator !== 'Abs') return undefined;\n    const x = expr.args[0];\n    return x.isNegative ? x.negate() : expr;\n  }\n]});\n"})}),"\n",(0,r.jsx)(n.p,{children:"This can be used to perform more complex transformations at the cost of more\nverbose JavaScript code."}),"\n",(0,r.jsx)(n.p,{children:"The algorithm for simplification has been simplified. It attempts to apply\neach rule in the rule set in turn, then restarts the process until no more\nrules can be applied or the result of applying a rule returns a previously\nseen expression."}),"\n",(0,r.jsxs)(n.p,{children:["Function definitions previously included a ",(0,r.jsx)(n.code,{children:"simplify"})," handler that could be\nused to perform simplifications specific to this function. This has been\nremoved. Instead, use a rule that matches the function and returns the\nsimplified expression."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Types"})}),"\n",(0,r.jsxs)(n.p,{children:["Previously, an expression was associated with a domain such as ",(0,r.jsx)(n.code,{children:"RealNumbers"}),"\nor ",(0,r.jsx)(n.code,{children:"ComplexNumbers"}),". This has been replaced with a more flexible system of\ntypes."]}),"\n",(0,r.jsxs)(n.p,{children:["A type is a set of values that an expression can take. For example, the type\n",(0,r.jsx)(n.code,{children:"real"})," is the set of real numbers, the type ",(0,r.jsx)(n.code,{children:"integer"})," is the set of integers,"]}),"\n",(0,r.jsxs)(n.p,{children:["The type of an expression can be set with the ",(0,r.jsx)(n.code,{children:"type"})," property. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const expr = ce.parse('\\\\sqrt{-1}');\nconsole.info(expr.type); // -> imaginary\n"})}),"\n",(0,r.jsx)(n.p,{children:"The type of a symbol can be set when declaring the symbol. For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ce.declare('x', 'imaginary');\n"})}),"\n",(0,r.jsx)(n.p,{children:"In addition to primitive types, the type system supports more complex types\nsuch union types, intersection types, and function types."}),"\n",(0,r.jsxs)(n.p,{children:["For example, the type ",(0,r.jsx)(n.code,{children:"real|imaginary"})," is the union of the real and imaginary\nnumbers."]}),"\n",(0,r.jsxs)(n.p,{children:["When declaring a function, the type of the arguments and the return value can\nbe specified. For example, to declare a function ",(0,r.jsx)(n.code,{children:"f"})," that takes two integers\nand returns a real number:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ce.declare('f', '(integer, integer) -> real');\n"})}),"\n",(0,r.jsx)(n.p,{children:"The sets of numbers are defined as follows:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"number"})," - any number, real or complex, including NaN and infinity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"non_finite_number"})," - NaN or infinity"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"real"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"finite_real"})," - finite real numbers (exclude NaN and infinity)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"imaginary"})," - imaginary numbers (complex numbers with a real part of 0)"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"finite_imaginary"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"complex"})," - complex numbers with a real and imaginary part not equal to 0"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"finite_complex"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"rational"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"finite_rational"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"integer"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"finite_integer"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To check the type of an expression, use the ",(0,r.jsx)(n.code,{children:"isSubtypeOf()"})," method. For\nexample:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let expr = ce.parse('5');\nconsole.info(expr.type.isSubtypeOf('rational')); // -> true\nconsole.info(expr.type.isSubtypeOf('integer')); // -> true\n\nexpr = ce.parse('\\\\frac{1}{2}');\nconsole.info(expr.type.isSubtypeOf('rational')); // -> true\nconsole.info(expr.type.isSubtypeOf('integer')); // -> false\n"})}),"\n",(0,r.jsxs)(n.p,{children:["As a shortcut, the properties ",(0,r.jsx)(n.code,{children:"isReal"}),", ",(0,r.jsx)(n.code,{children:"isRational"}),", ",(0,r.jsx)(n.code,{children:"isInteger"})," are\navailable on boxed expressions. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let expr = ce.parse('5');\nconsole.info(expr.isInteger); // -> true\nconsole.info(expr.isRational); // -> true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["They are equivalent to ",(0,r.jsx)(n.code,{children:"expr.type.isSubtypeOf('integer')"})," and\n",(0,r.jsx)(n.code,{children:"expr.type.isSubtypeOf('rational')"})," respectively."]}),"\n",(0,r.jsx)(n.p,{children:"To check if a number has a non-zero imaginary part, use:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let expr = ce.parse('5i');\nconsole.info(expr.isNumber && expr.isReal === false); // -> true\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Collections"})}),"\n",(0,r.jsxs)(n.p,{children:["Support for collections has been improved. Collections include ",(0,r.jsx)(n.code,{children:"List"}),", ",(0,r.jsx)(n.code,{children:"Set"}),",\n",(0,r.jsx)(n.code,{children:"Tuple"}),", ",(0,r.jsx)(n.code,{children:"Range"}),", ",(0,r.jsx)(n.code,{children:"Interval"}),", ",(0,r.jsx)(n.code,{children:"Linspace"})," and ",(0,r.jsx)(n.code,{children:"Dictionary"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It is now possible to check if an element is contained in a collection using\nan ",(0,r.jsx)(n.code,{children:"Element"})," expression. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let expr = ce.parse('[1, 2, 3]');\nce.box(['Element', 3, expr]).print(); // -> True\nce.box(['Element', 5, expr]).print(); // -> False\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To check if a collection is a subset of another collection, use the ",(0,r.jsx)(n.code,{children:"Subset"}),"\nexpression. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ce.box(['Subset', 'Integers', 'RealNumbers']).print(); // -> True\n"})}),"\n",(0,r.jsx)(n.p,{children:"Collections can also be compared for equality. For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"let set1 = ce.parse('\\\\lbrace 1, 2, 3 \\\\rbrace');\nlet set2 = ce.parse('\\\\lbrace 3, 2, 1 \\\\rbrace');\nconsole.info(set1.isEqual(set2)); // -> true\n"})}),"\n",(0,r.jsx)(n.p,{children:"There are also additional convenience methods on boxed expressions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"expr.isCollection"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"expr.contains(element)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"expr.size"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"expr.isSubsetOf(other)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"expr.indexOf(element)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"expr.at(index)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"expr.each()"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"expr.get(key)"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exact calculations"})}),"\n",(0,r.jsxs)(n.p,{children:["The Compute Engine has a new backed for numerical calculations. The new backed\ncan handle arbitrary precision calculations, including real and complex\nnumbers. It can also handle exact calculations, preserving calculations with\nrationals and radicals (square root of integers). For example ",(0,r.jsx)(n.code,{children:"1/2 + 1/3"})," is\nevaluated to ",(0,r.jsx)(n.code,{children:"5/6"})," instead of ",(0,r.jsx)(n.code,{children:"0.8(3)"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To get an approximate result, use the ",(0,r.jsx)(n.code,{children:"N()"})," method, for example\n",(0,r.jsx)(n.code,{children:'ce.parse("\\\\frac12 + \\\\frac13").N()'}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Previously the result of calculations was not always an exact number but\nreturned a numerical approximation instead."}),"\n",(0,r.jsxs)(n.p,{children:["This has now been improved by introducing a ",(0,r.jsx)(n.code,{children:"NumericValue"})," type that\nencapsulates exact numbers and by doing all calculations in this type.\nPreviously the calculations were handled manually in the various evaluation\nfunctions. This made the code complicated and error prone."]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"NumericValue"})," is made of:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"an imaginary part, represented as a fixed-precision number"}),"\n",(0,r.jsx)(n.li,{children:"a real part, represented either as a fixed or arbitrary precision number or\nas the product of a rational number and the square root of an integer."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"234.567"}),"\n",(0,r.jsx)(n.li,{children:"1/2"}),"\n",(0,r.jsx)(n.li,{children:"3\u221a5"}),"\n",(0,r.jsx)(n.li,{children:"\u221a7/3"}),"\n",(0,r.jsx)(n.li,{children:"4-3i"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"While this is a significant change internally, the external API remains the\nsame. The result of calculations should be more predictable and more accurate."}),"\n",(0,r.jsxs)(n.p,{children:["One change to the public API is that the ",(0,r.jsx)(n.code,{children:"expr.numericValue"})," property is now\neither a machine precision number or a ",(0,r.jsx)(n.code,{children:"NumericValue"})," object."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Rule Wildcards"})}),"\n",(0,r.jsxs)(n.p,{children:["When defining a rule as a LaTeX expression, single character identifiers are\ninterpreted as wildcards. For example, the rule ",(0,r.jsx)(n.code,{children:"x + x -> 2x"})," will match any\nexpression with two identical terms. The wildcard corresponding to ",(0,r.jsx)(n.code,{children:"x"})," is\n",(0,r.jsx)(n.code,{children:"_x"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"It is now possible to define sequence wildcards and optional sequence\nwildcards. Sequence wildcards match 1 or more expressions, while optional\nsequence wildcards match 0 or more expressions."}),"\n",(0,r.jsxs)(n.p,{children:["They are indicated in LaTeX as ",(0,r.jsx)(n.code,{children:"...x"})," and ",(0,r.jsx)(n.code,{children:"...x?"})," respectively. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'expr.simplify("x + ...y -> 2x");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"expr"})," is ",(0,r.jsx)(n.code,{children:"a + b + c"})," the rule will match and return ",(0,r.jsx)(n.code,{children:"2a"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'expr.simplify("x + ...y? -> 3x");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"expr"})," is ",(0,r.jsx)(n.code,{children:"a + b + c"})," the rule will match and return ",(0,r.jsx)(n.code,{children:"3a"}),". If ",(0,r.jsx)(n.code,{children:"expr"})," is ",(0,r.jsx)(n.code,{children:"a"}),"\nthe rule will match and return ",(0,r.jsx)(n.code,{children:"3a"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Conditional Rules"})}),"\n",(0,r.jsx)(n.p,{children:"Rules can now include conditions that are evaluated at runtime. If the\ncondition is not satisfied, the rules does not apply."}),"\n",(0,r.jsxs)(n.p,{children:["For example, to simplify the expression ",(0,r.jsx)(n.code,{children:"|x|"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'expr.simplify({rules: [\n  "|x_{>=0}| -> x",\n  "|x_{<0}| -> -x",\n]});\n'})}),"\n",(0,r.jsx)(n.p,{children:"The condition is indicated as a subscript of the wildcard. The condition can\nbe one of:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"boolean"})," - a boolean value, True or False"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"string"})," - a string of characters"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"number"})," - a number literal"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"symbol"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"expression"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"numeric"})," - an expression that has a numeric value, i.e. 2\u221a3, 1/2, 3.14"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"integer"})," - an integer value, -2, -1, 0, 1, 2, 3, ..."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"natural"})," - a natural number, 0, 1, 2, 3, ..."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"real"})," - real numbers, including integers"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"imaginary"})," - imaginary numbers, i.e. 2i, 3\u221a-1 (not including real numbers)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"complex"})," - complex numbers, including real and imaginary"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"rational"})," - rational numbers, 1/2, 3/4, 5/6, ..."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"irrational"})," - irrational numbers, \u221a2, \u221a3, \u03c0, ..."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"algebraic"})," - algebraic numbers, rational and irrational"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"transcendental"})," - transcendental numbers, \u03c0, e, ..."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"positive"})," - positive real numbers, > 0"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"negative"})," - negative real numbers, < 0"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"nonnegative"})," - nonnegative real numbers, >= 0"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"nonpositive"})," - nonpositive real numbers, <= 0"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"even"})," - even integers, 0, 2, 4, 6, ..."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"odd"})," - odd integers, 1, 3, 5, 7, ..."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"prime"})," ",":A000040"," - prime numbers, 2, 3, 5, 7, 11, ..."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"composite"})," ",":A002808"," - composite numbers, 4, 6, 8, 9, 10, ..."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"notzero"})," - a value that is not zero"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"notone"})," - a value that is not one"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"finite"})," - a finite value, not infinite"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"infinite"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"constant"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"variable"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"function"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"operator"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"relation"})," - an equation or inequality"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"equation"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"inequality"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"vector"})," - a tensor of rank 1"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"matrix"})," - a tensor of rank 2"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"list"})," - a collection of values"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"set"})," - a collection of unique values"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"tuple"})," - a fixed length list"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"single"})," - a tuple of length 1"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"pair"})," - a tuple of length 2"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"triple"})," - a tuple of length 3"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"collection"})," - a list, set, or tuple"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"tensor"})," - a nested list of values of the same type"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"scalar"})," - not a tensor or list"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"or one of the following expressions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">0'"})," -> ",(0,r.jsx)(n.code,{children:"positive"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\gt0'"})," -> ",(0,r.jsx)(n.code,{children:"positive"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<0'"})," -> ",(0,r.jsx)(n.code,{children:"negative"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\lt0'"})," -> ",(0,r.jsx)(n.code,{children:"negative"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">=0'"})," -> ",(0,r.jsx)(n.code,{children:"nonnegative"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\geq0'"})," -> ",(0,r.jsx)(n.code,{children:"nonnegative"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"<=0'"})," -> ",(0,r.jsx)(n.code,{children:"nonpositive"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\leq0'"})," -> ",(0,r.jsx)(n.code,{children:"nonpositive"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"!=0'"})," -> ",(0,r.jsx)(n.code,{children:"notzero"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\neq0'"})," -> ",(0,r.jsx)(n.code,{children:"notzero"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"!=1'"})," -> ",(0,r.jsx)(n.code,{children:"notone"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\neq1'"})," -> ",(0,r.jsx)(n.code,{children:"notone"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\Z'"})," -> ",(0,r.jsx)(n.code,{children:"integer"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\mathbb{Z}'"})," -> ",(0,r.jsx)(n.code,{children:"integer"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\N'"})," -> ",(0,r.jsx)(n.code,{children:"natural"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\mathbb{N}'"})," -> ",(0,r.jsx)(n.code,{children:"natural"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\R'"})," -> ",(0,r.jsx)(n.code,{children:"real"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\mathbb{R}'"})," -> ",(0,r.jsx)(n.code,{children:"real"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\C'"})," -> ",(0,r.jsx)(n.code,{children:"complex"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\mathbb{C}'"})," -> ",(0,r.jsx)(n.code,{children:"complex"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\Q'"})," -> ",(0,r.jsx)(n.code,{children:"rational"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\mathbb{Q}'"})," -> ",(0,r.jsx)(n.code,{children:"rational"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\Z^+'"})," -> ",(0,r.jsx)(n.code,{children:"integer,positive"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\Z^-'"})," -> ",(0,r.jsx)(n.code,{children:"intger,negative"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\Z^*'"})," -> ",(0,r.jsx)(n.code,{children:"nonzero"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\R^+'"})," -> ",(0,r.jsx)(n.code,{children:"positive"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\R^-'"})," -> ",(0,r.jsx)(n.code,{children:"negative"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\R^*'"})," -> ",(0,r.jsx)(n.code,{children:"real,nonzero"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\N^*'"})," -> ",(0,r.jsx)(n.code,{children:"integer,positive"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\N_0'"})," -> ",(0,r.jsx)(n.code,{children:"integer,nonnegative"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\in\\R\\backslash\\Q'"})," -> ",(0,r.jsx)(n.code,{children:"irrational"}),","]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"More complex conditions can be specified following a semi-colon, for example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"expr.simplify({x -> 2x; x < 10});\n"})}),"\n",(0,r.jsx)(n.p,{children:"Note that this syntax complements the existing rule syntax, and can be used\ntogether with the existing, more verbose, rule syntax."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'expr.simplify({rules: [\n  {match: "x + x", replace: "2x", condition: "x < 10"}\n]});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This advanced syntax can specify more complex conditions, for example above\nthe rule will only apply if ",(0,r.jsx)(n.code,{children:"x"})," is less than 10."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Improved results for ",(0,r.jsx)(n.code,{children:"Expand"}),". In some cases the expression was not fully\nexpanded. For example, ",(0,r.jsx)(n.code,{children:"4x(3x+2)-5(5x-4)"})," now returns ",(0,r.jsx)(n.code,{children:"12x^2 - 17x + 20"}),".\nPreviously it returned ",(0,r.jsx)(n.code,{children:"4x(3x+2)+25x-20"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"AsciiMath serialization"})," The ",(0,r.jsx)(n.code,{children:"expr.toString()"})," method now returns a\nserialization of the expression using the ",(0,r.jsx)(n.a,{href:"https://asciimath.org/",children:"AsciiMath"}),"\nformat."]}),"\n",(0,r.jsxs)(n.p,{children:["The serialization to AsciiMath can be customized using the ",(0,r.jsx)(n.code,{children:"toAsciiMath()"}),"\nmethod. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"console.log(ce.box(['Sigma', 2]).toAsciiMath({functions: {Sigma: 'sigma'}}));\n// -> sigma(2)\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The tolerance can now be specified with a value of ",(0,r.jsx)(n.code,{children:'"auto"'})," which will use the\nprecision to determine a reasonable tolerance. The tolerance is used when\ncomparing two numbers for equality. The tolerance can be specified with the\n",(0,r.jsx)(n.code,{children:"ce.tolerance"})," property or in the Compute Engine constructor."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Boxed expressions have some additional properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.isNumberLiteral"})," - true if the expression is a number literal.This is\nequivalent to checking if ",(0,r.jsx)(n.code,{children:"expr.numericValue"})," is not ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.re"})," - the real part of the expression, if it is a number literal,\n",(0,r.jsx)(n.code,{children:"undefined"})," if not a number literal."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.im"})," - the imaginary part of the expression, if it is a number literal,\n",(0,r.jsx)(n.code,{children:"undefined"})," if not a number literal."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.bignumRe"})," - the real part of the expression as a bignum, if it is a\nnumber literal, ",(0,r.jsx)(n.code,{children:"undefined"})," if not a number literal or a bignum\nrepresentation is not available."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.bignumIm"})," - the imaginary part of the expression as a bignum, if it is\na number literal, ",(0,r.jsx)(n.code,{children:"undefined"})," if not a number literal or if a bignum\nrepresentation is not available."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.root()"})," to get the root of the expression. For example, ",(0,r.jsx)(n.code,{children:"expr.root(3)"}),"\nwill return the cube root of the expression."]}),"\n",(0,r.jsxs)(n.li,{children:["Additionally, the relational operators (",(0,r.jsx)(n.code,{children:"expr.isLess(), expr.isEqual()"}),",\netc...) now accept a number argument. For example, ",(0,r.jsx)(n.code,{children:"expr.isGreater(1)"})," will\nreturn true if the expression is greater than 1."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added LaTeX syntax to index collections. If ",(0,r.jsx)(n.code,{children:"a"})," is a collection:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"a[i]"})," is parsed as ",(0,r.jsx)(n.code,{children:'["At", "a", "i"]'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"a[i,j]"})," is parsed as ",(0,r.jsx)(n.code,{children:'["At", "a", "i", "j"]'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"a_i"})," is parsed as ",(0,r.jsx)(n.code,{children:'["At", "a", "i"]'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"a_{i,j}"})," is parsed as ",(0,r.jsx)(n.code,{children:'["At", "a", "i", "j"]'}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added support for Kronecker delta notation, i.e. ",(0,r.jsx)(n.code,{children:"\\delta_{ij}"}),", which is\nparsed as ",(0,r.jsx)(n.code,{children:'["KroneckerDelta", "i", "j"]'})," and is equal to 1 if ",(0,r.jsx)(n.code,{children:"i = j"})," and 0\notherwise."]}),"\n",(0,r.jsx)(n.p,{children:"When a single index is provided the value of the function is 1 if the index is\n0 and 0 otherwise"}),"\n",(0,r.jsx)(n.p,{children:"When multiple index are provided, the value of the function is 1 if all the\nindexes are equal and 0 otherwise."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added support for Iverson Bracket notation, i.e. ",(0,r.jsx)(n.code,{children:"[a = b]"}),", which is parsed as\n",(0,r.jsx)(n.code,{children:'["Boole", ["Equal", "a", "b"]]'})," and is equal to 1 if its argument is true and\n0 otherwise. The argument is expected to be a relational expression."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Implemented ",(0,r.jsx)(n.code,{children:"Unique"})," and ",(0,r.jsx)(n.code,{children:"Tally"})," on collections. ",(0,r.jsx)(n.code,{children:"Unique"})," returns a collection\nwith only the unique elements of the input collection, and ",(0,r.jsx)(n.code,{children:"Tally"})," returns a\ncollection with the count of each unique element."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"console.log(ce.box(['Unique', ['List', 1, 2, 3, 1, 2, 3, 4, 5]]).value);\n// -> [1, 2, 3, 4, 5]\n\nconsole.log(ce.box(['Tally', ['List', 1, 2, 3, 1, 2, 3, 4, 5]]).value);\n// -> [['List', 1, 2, 3, 4, 5], ['List', 2, 2, 2, 1, 1]]\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Implemented the ",(0,r.jsx)(n.code,{children:"Map"}),", ",(0,r.jsx)(n.code,{children:"Filter"})," and ",(0,r.jsx)(n.code,{children:"Tabulate"})," functions. These functions can\nbe used to transform collections, for example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Using LaTeX\nconsole.log(ce.parse('\\\\mathrm{Map}([3, 5, 7], x \\\\mapsto x^2)').toString());\n// -> [9, 25, 49]\n\n// Using boxed expressions\nconsole.log(\n  ce.box(['Map', ['List', 3, 5, 7], ['Square', '_']]).value\n);\n// -> [9, 25, 49]\n\nconsole.log(ce.box(['Tabulate',['Square', '_'], 5]).value);\n// -> [1, 4, 9, 16, 25]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Tabulate"})," can be used with multiple indexes. For example, to generate a 4x4\nunit matrix:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"console.log(ce.box(['Tabulate', ['If', ['Equal', '_1', '_2'], 1, 0]], 4, 4).value);\n// -> [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\n\n// Using the Kronecker delta notation:\nconsole.log(ce.parse('\\\\mathrm{Tabulate}(i, j \\\\mapsto \\\\delta_{ij}, 4, 4)').value);\n// -> [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\n\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"Random"})," function. ",(0,r.jsx)(n.code,{children:'["Random"]'})," returns a real pseudo-random number\nbetwen 0 and 1. ",(0,r.jsx)(n.code,{children:'["Random", 10]'})," returns an integer between 0 and 9,\n",(0,r.jsx)(n.code,{children:'["Random", 5, 10]'})," returns an integer between 5 and 10."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Extended the definition of ",(0,r.jsx)(n.code,{children:"expr.isConstant"}),". Previously, it only applied to\nsymbols, e.g. ",(0,r.jsx)(n.code,{children:"Pi"}),". Now it apply to all expressions. ",(0,r.jsx)(n.code,{children:"expr.isConstant"})," is true\nif the expression is a number literal, a symbol with a constant value, or a\npure function with constant arguments."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The boxed expression properties ",(0,r.jsx)(n.code,{children:"isPositive"}),", ",(0,r.jsx)(n.code,{children:"isNegative"}),", ",(0,r.jsx)(n.code,{children:"isNonNegative"}),",\n",(0,r.jsx)(n.code,{children:"isNonPositive"}),", ",(0,r.jsx)(n.code,{children:"isZero"}),", ",(0,r.jsx)(n.code,{children:"isNotZero"})," now return a useful value for most\nfunction expressions. For example, ",(0,r.jsx)(n.code,{children:"ce.parse('|x + 1|').isPositive"})," is true."]}),"\n",(0,r.jsxs)(n.p,{children:["If the value cannot be determined, the property will return ",(0,r.jsx)(n.code,{children:"undefined"}),". For\nexample, ",(0,r.jsx)(n.code,{children:"ce.parse('|x + 1|').isZero"})," is ",(0,r.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If the expression is not a real number, the property will return ",(0,r.jsx)(n.code,{children:"NaN"}),". For\nexample, ",(0,r.jsx)(n.code,{children:"ce.parse('i').isPositive"})," is ",(0,r.jsx)(n.code,{children:"NaN"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"Choose"})," function to compute binomial coefficients, i.e. ",(0,r.jsx)(n.code,{children:"Choose(5, 2)"}),"\nis equal to 10."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The fallback for non-constructible complex values of trigonometric functions\nis now implemented via rules."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The canonical order of the arguments has changed and should be more consistent\nand predictable. In particular, for polynomials, the\n",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Monomial_order",children:"monomial order"})," is now\n",(0,r.jsx)(n.strong,{children:"degrevlex"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Canonical expressions can now include a ",(0,r.jsx)(n.code,{children:"Root"})," expression. For example, the\ncanonical form of ",(0,r.jsx)(n.code,{children:"\\\\sqrt[3]{5}"})," is ",(0,r.jsx)(n.code,{children:'["Root", 5, 3]'}),". Previously, these were\nrepresented as ",(0,r.jsx)(n.code,{children:'["Power", 5, ["Divide", 1, 3]]'}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The function definitions no longer have a ",(0,r.jsx)(n.code,{children:"N"})," handler. Instead the ",(0,r.jsx)(n.code,{children:"evaluate"}),"\nhandler has an optional ",(0,r.jsx)(n.code,{children:"{numericApproximation}"})," argument."]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"issues-resolved-2",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#188"})," Throw an error when invalid expressions are boxed, for example\n",(0,r.jsx)(n.code,{children:'ce.box(["Add", ["3"]])'}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Some LaTeX renderer can't render ",(0,r.jsx)(n.code,{children:"\\/"}),", so use ",(0,r.jsx)(n.code,{children:"/"})," instead."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"When definitions are added to the LaTeX dictionary, they now take precedence\nover the built-in definitions. This allows users to override the built-in\ndefinitions."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Improved parsing of functions, including when a mixture of named and\npositional arguments are used."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#175"})," Matching some patterns when the target had not enough operands would\nresult in a runtime error."]}),"\n"]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0251-2024-06-27",children:["0.25.1 ",(0,r.jsx)(n.em,{children:"2024-06-27"})]}),(0,r.jsx)(n.h3,{id:"issues-resolved-3",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#174"})," Fixed some simplifications, such as ",(0,r.jsx)(n.code,{children:"\\frac{a^n}{a^m} = a^{n-m)"})]}),"\n"]}),(0,r.jsx)(n.h3,{id:"new-features",children:"New Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Rules can be defined using a new shorthand syntax, where each rule is a string\nof LaTeX:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'expr.simplify(["\\\\frac{x}{x} -> 1", "x + x -> 2x"]);\n'})}),"\n"]}),"\n"]}),(0,r.jsxs)(n.p,{children:["Single letter variables are assumed to be wildcards, so ",(0,r.jsx)(n.code,{children:"x"})," is interpreted as\nthe wildcard ",(0,r.jsx)(n.code,{children:"_x"}),"."]}),(0,r.jsx)(n.p,{children:"Additionally, the expanded form can also include LaTeX strings. The previous\nsyntax using expressions can still be used, and the new and old syntax can be\nmixed."}),(0,r.jsx)(n.p,{children:"For example:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'expr.simplify([\n  {\n    match: "\\\\frac{x}{x}",\n    replace: "1"\n  },\n  {\n    match: ["Add", "x", "x"],\n    replace: "2x"\n  }\n]);\n'})}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"condition"})," function can also be expressed as a LaTeX string."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'  expr.simplify([ { match: "\\\\frac{x}{x}", replace: 1, condition: "x != 0" }, ]);\n'})}),(0,r.jsxs)(n.p,{children:["The shorthand syntax can be used any where a ruleset is expected, including with\nthe ",(0,r.jsx)(n.code,{children:"ce.rule()"})," function."]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A new ",(0,r.jsx)(n.code,{children:"ce.getRuleSet()"})," method gives access to the built-in rules."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#171"})," The ",(0,r.jsx)(n.code,{children:"Subtract"})," and ",(0,r.jsx)(n.code,{children:"Divide"})," function can now accept an arbitrary\nnumber of arguments. For example, ",(0,r.jsx)(n.code,{children:'["Subtract", 1, 2, 3]'})," is equivalent to\n",(0,r.jsx)(n.code,{children:'["Subtract", ["Subtract", 1, 2], 3]'}),"."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0250-2024-06-25",children:["0.25.0 ",(0,r.jsx)(n.em,{children:"2024-06-25"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-1",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The canonical form of expressions has changed. It is now more consistent and\nsimpler and should produce more predictable results."}),"\n",(0,r.jsxs)(n.p,{children:["For example, previously ",(0,r.jsx)(n.code,{children:'ce.parse("1-x^2")'})," would produce\n",(0,r.jsx)(n.code,{children:'["Subtract", 1, ["Square", "x"]]'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["While this is a readable form, it introduces some complications when\nmanipulating the expression: both the ",(0,r.jsx)(n.code,{children:"Subtract"})," and ",(0,r.jsx)(n.code,{children:"Square"})," functions have\nto be handled, in addition to ",(0,r.jsx)(n.code,{children:"Add"})," and ",(0,r.jsx)(n.code,{children:"Power"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The new canonical form of this expression is\n",(0,r.jsx)(n.code,{children:'["Add", 1, ["Negate", ["Power", "x", 2]]]'}),". It is a bit more verbose, but it\nis simpler to manipulate."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ce.serialize()"})," method has been replaced with ",(0,r.jsx)(n.code,{children:"expr.toLatex()"})," and\n",(0,r.jsx)(n.code,{children:"expr.toMathJson()"}),". The ",(0,r.jsx)(n.code,{children:"ce.latexOptions"})," and ",(0,r.jsx)(n.code,{children:"ce.jsonSerializationOptions"}),"\nproperties have been removed. Instead, pass the formating options directly to\nthe ",(0,r.jsx)(n.code,{children:"toLatex()"})," and ",(0,r.jsx)(n.code,{children:"toMathJson()"})," methods. The ",(0,r.jsx)(n.code,{children:"ce.parse()"})," method now takes\nan optional argument to specify the format of the input string."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The default JSON serialization of an expression has changed."}),"\n",(0,r.jsxs)(n.p,{children:["Previously, the default JSON serialization, accessed via the ",(0,r.jsx)(n.code,{children:".json"})," property,\nhad some transformations applied to it (sugaring) to make the JSON more human\nreadable."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, ",(0,r.jsx)(n.code,{children:'ce.parse("\\frac12").json'})," would return the symbol ",(0,r.jsx)(n.code,{children:'"Half"'}),"\ninstead of ",(0,r.jsx)(n.code,{children:'["Divide", 1, 2]'}),"."]}),"\n",(0,r.jsx)(n.p,{children:"However, this could lead to some confusion when manipulating the JSON\ndirectly. Since the JSON is intended to be used by machine more than humans,\nthese additional transformations have been removed."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"expr.json"})," property now returns the JSON representing the expression,\nwithout any transformations."]}),"\n",(0,r.jsxs)(n.p,{children:["To get a version of JSON with some transformations applied use the\n",(0,r.jsx)(n.code,{children:"ce.toMathJson()"})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'expr = ce.box(["Subtract", 1, ["Square", "x"]]);\nconsole.log(expr.json);\n// -> ["Add", 1, ["Negate", ["Power", "x", 2]]]\nexpr.toMathJson()\n// -> ["Subtract", 1, ["Square", "x"]]\nexpr.toMathJson({exclude: "Square"})\n// -> ["Subtract", 1, ["Power", "x", 2]]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In practice, the impact of both of these changes should be minimal. If you\nwere manipulating expressions using ",(0,r.jsx)(n.code,{children:"BoxedExpression"}),", the new canonical form\nshould make it easier to manipulate expressions. You can potentially simplify\nyour code by removing special cases for functions such as ",(0,r.jsx)(n.code,{children:"Square"})," and\n",(0,r.jsx)(n.code,{children:"Subtract"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you were using the JSON serialization directly, you may also be able to\nsimplify you code since the default output from ",(0,r.jsx)(n.code,{children:"expr.json"})," is now more\nconsistent and simpler."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The name of some number formatting options has changed. The number formatting\noptions are an optional argument of ",(0,r.jsx)(n.code,{children:"ce.parse()"})," and ",(0,r.jsx)(n.code,{children:"ce.toLatex()"}),". See the",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"NumberFormat"})," and ",(0,r.jsx)(n.code,{children:"NumberSerializationFormat"})," types."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The values +infinity, -infinity and NaN are now represented preferably with\nthe symbols ",(0,r.jsx)(n.code,{children:"PositiveInfinity"}),", ",(0,r.jsx)(n.code,{children:"NegativeInfinity"})," and ",(0,r.jsx)(n.code,{children:"NaN"})," respectively.\nPreviously they were represented with numeric values, i.e.\n",(0,r.jsx)(n.code,{children:'{num: "+Infinity"}'}),", ",(0,r.jsx)(n.code,{children:'{num: "-Infinity"}'})," and ",(0,r.jsx)(n.code,{children:'{num: "NaN"}'}),". The numeric\nvalues are still supported, but the symbols are preferred."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The method ",(0,r.jsx)(n.code,{children:"expr.isNothing"})," has been removed. Instead, use\n",(0,r.jsx)(n.code,{children:'expr.symbol === "Nothing"'}),"."]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"new-features-1",children:"New Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:'When serializing to LaTeX, the output can be "prettified". This involves\nmodifying the LaTeX output to make it more pleasant to read, for example:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"a+\\\\frac{-b}{c}"})," -> ",(0,r.jsx)(n.code,{children:"a-\\\\frac{b}{c}"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"a\\\\times b^{-1}"})," -> ",(0,r.jsx)(n.code,{children:"\\\\frac{a}{b}"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\\\frac{a}{b}\\\\frac{c}{d}"})," -> ",(0,r.jsx)(n.code,{children:"\\\\frac{a\\\\cdot c}{b\\\\cdot d}"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--2"})," -> ",(0,r.jsx)(n.code,{children:"2"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This is on by default and can be turned off by setting the ",(0,r.jsx)(n.code,{children:"prettify"})," option\nto ",(0,r.jsx)(n.code,{children:"false"}),". For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ce.parse("a+\\\\frac{-b}{c}").toLatex({prettify: true})\n// -> "a-\\\\frac{b}{c}"\nce.parse("a+\\\\frac{-b}{c}").toLatex({prettify: false})\n// -> "a+\\\\frac{-b}{c}"\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Numbers can have a different digit group length for the whole and fractional\npart of a number. For example,\n",(0,r.jsx)(n.code,{children:'ce.toLatex(ce.parse("1234.5678"), {digitGroup: [3, 0]})'})," will return\n",(0,r.jsx)(n.code,{children:"1\\,234.5678"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Numbers can now be formatted using South-East Asian Numbering System, i.e.\nlakh and crore. For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ce.toLatex(ce.parse("12345678"), {digitGroup: "lakh"})\n// -> "1,23,45,678"\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Expressions with Integrate functions can now be compiled to JavaScript. The\ncompiled function can be used to evaluate the integral numerically. For\nexample:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const f = ce.parse("\\\\int_0^1 x^2 dx");\nconst compiled = f.compile();\nconsole.log(compiled()); // -> 0.33232945619482307\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#82"})," Support for angular units. The default is radians, but degrees can be\nused by setting ",(0,r.jsx)(n.code,{children:'ce.angularUnit = "deg"'}),'. Other possible values are "grad" and\n"turn". This affects how unitless numbers with a trigonometric function are\ninterpreted. For example, ',(0,r.jsx)(n.code,{children:"sin(90)"})," will return 1 when ",(0,r.jsx)(n.code,{children:"ce.angularUnit"}),' is\n"deg", 0.8939966636005579 when ',(0,r.jsx)(n.code,{children:"ce.angularUnit"}),' is "grad" and 0 when\n',(0,r.jsx)(n.code,{children:"ce.angularUnit"}),' is "turn".']}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"expr.map(fn)"})," method to apply a function to each subexpression of an\nexpression. This can be useful to apply custom canonical forms and compare two\nexpressions."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["An optional canonical form can now be specified with the ",(0,r.jsx)(n.code,{children:"ce.function()"}),"."]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"issues-resolved-4",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#173"})," Parsing ",(0,r.jsx)(n.code,{children:"1++2"})," would result in an expression with a ",(0,r.jsx)(n.code,{children:"PreIncrement"}),"\nfunction. It is now correctly parsed as ",(0,r.jsx)(n.code,{children:'["Add", 1, 2]'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#161"})," Power expressions would not be processed when their argument was a\nDivide expression."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#165"})," More aggressive simplification of expressions with exponent greater\nthan 3."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#169"})," Calculating a constant integral (and integral that did not depend on\nthe variable) would result in a runtime error."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#164"})," Negative mixed fractions (e.g. ",(0,r.jsx)(n.code,{children:"-1\\frac23"}),") are now parsed correctly."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#162"})," Numeric evaluation of expressions with large exponents could result\nin machine precision numbers instead of bignum numbers."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#155"})," The expression\n",(0,r.jsx)(n.code,{children:'["Subtract", ["Multiply", 0.5, "x"], ["Divide", "x", 2]]'})," will now evaluate\nto ",(0,r.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#154"})," In some cases, parsing implicit argument of trig function return more\nnatural results, for example ",(0,r.jsx)(n.code,{children:"\\cos a \\sin b"})," is now parsed as\n",(0,r.jsx)(n.code,{children:"(\\cos a)(\\sin b)"})," and not ",(0,r.jsx)(n.code,{children:"\\cos (a \\sin b)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#147"})," The associativity of some operators, including ",(0,r.jsx)(n.code,{children:"/"})," was not applied\ncorrectly, resulting in unexpected results. For example, ",(0,r.jsx)(n.code,{children:"1/2/3"})," would be\nparsed as ",(0,r.jsx)(n.code,{children:'["Divide", 1, ["Divide", 2, 3]]'})," instead of\n",(0,r.jsx)(n.code,{children:'["Divide", ["Divide", 1, 2], 3]'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#146"})," When parsing an expression like ",(0,r.jsx)(n.code,{children:"x(x+1)"})," where ",(0,r.jsx)(n.code,{children:"x"})," is an undeclared\nsymbol, do not infer that ",(0,r.jsx)(n.code,{children:"x"})," is a function. Instead, infer that ",(0,r.jsx)(n.code,{children:"x"})," is a\nvariable and that the expression is a product."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#145"})," The expression ",(0,r.jsx)(n.code,{children:'["Or", "False", "False"]'}),", that is when all the\narguments are ",(0,r.jsx)(n.code,{children:"False"}),", is now evaluates to ",(0,r.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Fixed canonical form of ",(0,r.jsx)(n.code,{children:"e^x^2"}),", and more generally apply power rule in more\ncases."]}),"\n",(0,r.jsx)(n.li,{children:'Added missing "Sech" and "Csch" functions.'}),"\n",(0,r.jsx)(n.li,{children:"The digit grouping serializing would place the separator in the wrong place\nfor some numbers."}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"avoidExponentsInRange"})," formating option would not always avoid exponents\nin the specified range."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0240-2024-02-23",children:["0.24.0 ",(0,r.jsx)(n.em,{children:"2024-02-23"})]}),(0,r.jsx)(n.h3,{id:"issues-resolved-5",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fix parsing of very deeply nested expressions."}),"\n",(0,r.jsx)(n.li,{children:"Correctly apply rules to deeply nested expressions."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.print()"})," now correctly prints the expression when using the minified\nversion of the library."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.isEqual()"})," now correctly compares equalities and inequalities."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.match()"})," has been improved and works correctly in more cases. The\nsignature of the ",(0,r.jsx)(n.code,{children:"match"})," function has been changed so that the pattern is the\nfirst argument, i.e. instead of ",(0,r.jsx)(n.code,{children:"pattern.match(expr)"})," use\n",(0,r.jsx)(n.code,{children:"expr.match(pattern)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Fix ",(0,r.jsx)(n.code,{children:"expr.print()"})," when using the minified version of the library."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#142"})," Accept complex expressions as the subcript of ",(0,r.jsx)(n.code,{children:"\\ln"})," and ",(0,r.jsx)(n.code,{children:"\\log"})," in\nLaTeX."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#139"})," Parse quantifiers ",(0,r.jsx)(n.code,{children:"\\forall"})," and ",(0,r.jsx)(n.code,{children:"\\exists"})," in LaTeX."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0231-2024-01-27",children:["0.23.1 ",(0,r.jsx)(n.em,{children:"2024-01-27"})]}),(0,r.jsx)(n.h3,{id:"issues-resolved-6",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Using a custom canonical order of ",(0,r.jsx)(n.code,{children:'"Multiply"'})," would not distribute the\n",(0,r.jsx)(n.code,{children:"Negate"})," function."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#141"})," The canonical form ",(0,r.jsx)(n.code,{children:'"Order"'})," was applied to non-commutative\nfunctions."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0230-2024-01-01",children:["0.23.0 ",(0,r.jsx)(n.em,{children:"2024-01-01"})]}),(0,r.jsx)(n.h3,{id:"new-features-2",children:"New Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"ExpandAll"})," function to expand an expression recursively."]}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"Factor"})," function to factor an expression."]}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"Together"})," function to combine rational expressions into a single\nfraction."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"issues-resolved-7",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The expression ",(0,r.jsx)(n.code,{children:"\\frac5 7"})," is now parsed correctly as ",(0,r.jsx)(n.code,{children:"\\frac{5}{7}"})," instead of\n",(0,r.jsx)(n.code,{children:"\\frac{5}{}7"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Do not sugar non-canonical expression. Previously,\n",(0,r.jsx)(n.code,{children:"ce.parse('\\\\frac{1}{2}', {canonical: false})"})," would return ",(0,r.jsx)(n.code,{children:"Half"})," instead of\n",(0,r.jsx)(n.code,{children:"['Divide', '1', '2']"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#132"})," Attempting to set a value to 0 with\n",(0,r.jsx)(n.code,{children:'ce.defineSymbol("count", {value: 0})'})," would fail: the symbol would be\nundefined."]}),"\n",(0,r.jsxs)(n.li,{children:["Correctly evaluate power expressions in some cases, for example\n",(0,r.jsx)(n.code,{children:"(\\sqrt2 + \\sqrt2)^2"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Comparison of expressions containing non-exact numbers could fail. For\nexample: ",(0,r.jsx)(n.code,{children:"2(13.1+3.1x)"})," and ",(0,r.jsx)(n.code,{children:"26.2+6.2x"})," would not be considered equal."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Significant improvements to symbolic computation. Now, boxing,\ncanonicalization and evaluation are more consistent and produce more\npredictable results."}),"\n",(0,r.jsxs)(n.li,{children:["Adedd the ",(0,r.jsx)(n.code,{children:"\\neg"})," command, synonym for ",(0,r.jsx)(n.code,{children:"\\lnot"})," -> ",(0,r.jsx)(n.code,{children:"Not"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Relational expressions (inequalities, etc...) are now properly factored."}),"\n",(0,r.jsxs)(n.li,{children:["Integers are now factored when simplifying, i.e. ",(0,r.jsx)(n.code,{children:"2x = 4x"})," -> ",(0,r.jsx)(n.code,{children:"x = 2x"}),"."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0220-2023-11-13",children:["0.22.0 ",(0,r.jsx)(n.em,{children:"2023-11-13"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-2",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Rule Syntax"})}),"\n",(0,r.jsxs)(n.p,{children:["The syntax to describe rules has changed. The syntax for a rule was previously\na tuple ",(0,r.jsx)(n.code,{children:"[lhs, rhs, {condition} ]"}),". The new syntax is an object with the\nproperties ",(0,r.jsx)(n.code,{children:"match"}),", ",(0,r.jsx)(n.code,{children:"replace"})," and ",(0,r.jsx)(n.code,{children:"condition"}),". For example:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["previous syntax: ",(0,r.jsx)(n.code,{children:'[["Add", "_x", "_x"], ["Multiply", 2, "_x"]]'})]}),"\n",(0,r.jsxs)(n.li,{children:["new syntax: ",(0,r.jsx)(n.code,{children:'{match: ["Add", "_x", "_x"], replace: ["Multiply", 2, "_x"]}'})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"condition"})," property is optional, and is either a boxed function or a\nJavaScript function. For example, to add a condition that checks that ",(0,r.jsx)(n.code,{children:"_x"})," is\na number literal:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'{\n  match: ["Add", "_x", "_x"],\n  replace: ["Multiply", 2, "_x"],\n  condition: ({_x}) => _x.isNumberLiteral\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"CanonicalForm"})})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"CanonicalOrder"})," function has been replaced by the more flexible\n",(0,r.jsx)(n.code,{children:"CanonicalForm"})," function. The ",(0,r.jsx)(n.code,{children:"CanonicalForm"})," function takes an expression and\na list of transformations to apply. To apply the same transformations as\n",(0,r.jsx)(n.code,{children:"CanonicalOrder"}),", use:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"['CanonicalForm', expr, 'Order']\n"})}),"\n",(0,r.jsxs)(n.p,{children:["These canonical forms can also be specified with ",(0,r.jsx)(n.code,{children:"box()"})," and ",(0,r.jsx)(n.code,{children:"parse()"}),"\noptions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ce.box(expr, { canonical: "Order" });\nce.parse("x^2 + 2x + 1", { canonical: "Order" });\n'})}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"work-in-progress",children:"Work In Progress"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Linear algebra functions: ",(0,r.jsx)(n.code,{children:"Rank"}),", ",(0,r.jsx)(n.code,{children:"Shape"}),",",(0,r.jsx)(n.code,{children:"Reshape"}),", ",(0,r.jsx)(n.code,{children:"Flatten"}),", ",(0,r.jsx)(n.code,{children:"Determinant"}),",\n",(0,r.jsx)(n.code,{children:"Trace"}),", ",(0,r.jsx)(n.code,{children:"Transpose"}),", ",(0,r.jsx)(n.code,{children:"ConjugateTranspose"}),", ",(0,r.jsx)(n.code,{children:"Inverse"}),". See the\n",(0,r.jsx)(n.a,{href:"/compute-engine/reference/linear-algebra/",children:"Linear Algebra"})," reference guide.\nSome of these function may not yet return correct result in all cases."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"new-features-3",children:"New Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Added a ",(0,r.jsx)(n.code,{children:"expr.print()"})," method as a synonym for ",(0,r.jsx)(n.code,{children:"console.log(expr.toString())"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Added an ",(0,r.jsx)(n.code,{children:"exact"})," option (false by default) to the ",(0,r.jsx)(n.code,{children:"expr.match()"})," pattern\nmatching method. When ",(0,r.jsx)(n.code,{children:"true"})," some additional patterns are automatically\nrecognized, for example, ",(0,r.jsx)(n.code,{children:"x"})," will match ",(0,r.jsx)(n.code,{children:"[\"Multiply\", '_a', 'x']"})," when ",(0,r.jsx)(n.code,{children:"exact"}),"\nis ",(0,r.jsx)(n.code,{children:"false"}),", but not when ",(0,r.jsx)(n.code,{children:"exact"})," is ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements-1",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The equation solver used by ",(0,r.jsx)(n.code,{children:"expr.solve()"})," has been improved and can now solve\nmore equations."]}),"\n",(0,r.jsx)(n.li,{children:"The pattern matching engine has been improved and can now match more\nexpressions, including sequences for commutative functions."}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0210-2023-11-02",children:["0.21.0 ",(0,r.jsx)(n.em,{children:"2023-11-02"})]}),(0,r.jsx)(n.h3,{id:"new-features-4",children:"New Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"#125"})," Parse and serialize environemnts, i.e.\n",(0,r.jsx)(n.code,{children:"\\begin{matrix} 1 & 2 \\\\ 3 & 4 \\end{matrix}"})," will be parsed as\n",(0,r.jsx)(n.code,{children:'["Matrix", ["List", ["List", 1, 2], ["List", 3, 4]]]'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["A new section on\n",(0,r.jsx)(n.a,{href:"/compute-engine/reference/linear-algebra/#formatting",children:"Linear Algebra"})," has\nsome details on the supported formats."]}),"\n",(0,r.jsx)(n.p,{children:"The linear algebra operations are limited at the moment, but will be expanded\nin the future."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"IsSame"})," function, which is the function expression corresponding to\n",(0,r.jsx)(n.code,{children:"expr.isSame()"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)("s",{children:["Added ",(0,r.jsx)(n.code,{children:"CanonicalOrder"})," function, which sorts the arguments of commutative\nfunctions into canonical order. This is useful to compare two non-canonical\nexpressions for equality."]}),"\n"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ce.box(["CanonicalOrder", ["Add", 1, "x"]]).isSame(\n  ce.box(["CanonicalOrder", ["Add", "x", 1]])\n);\n// -> true\n'})}),(0,r.jsx)(n.h3,{id:"issue-resolved",children:"Issue Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When evaluating a sum (",(0,r.jsx)(n.code,{children:"\\sum"}),") with a bound that is not a number, return the\nsum expression instead of an error."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0202-2023-10-31",children:["0.20.2 ",(0,r.jsx)(n.em,{children:"2023-10-31"})]}),(0,r.jsx)(n.h3,{id:"issues-resolved-8",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fixed numerical evaluation of integrals and limits when parsed from LaTeX."}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'console.info(ce.parse("\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin(x)}{x}").value);\n// -> 1\n\nconsole.info(ce.parse("\\\\int_{0}^{2} x^2 dx").value);\n// -> 2.6666666666666665\n'})}),(0,r.jsxs)(n.h2,{id:"0201-2023-10-31",children:["0.20.1 ",(0,r.jsx)(n.em,{children:"2023-10-31"})]}),(0,r.jsx)(n.h3,{id:"issues-resolved-9",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fixed evaluation of functions with multiple arguments"}),"\n",(0,r.jsx)(n.li,{children:"Fixed compilation of some function assignments"}),"\n",(0,r.jsx)(n.li,{children:"Improved serialization of function assignment"}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0200-2023-10-30",children:["0.20.0 ",(0,r.jsx)(n.em,{children:"2023-10-30"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-3",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Architectural changes"}),": the invisible operator is used to represent the\nmultiplication of two adjacent symbols, i.e. ",(0,r.jsx)(n.code,{children:"2x"}),". It was previously handled\nduring parsing, but it is now handled during canonicalization. This allows\nmore complex syntactic structures to be handled correctly, for example\n",(0,r.jsx)(n.code,{children:"f(x) := 2x"}),": previously, the left-hand-side argument would have been parsed\nas a function application, while in this case it should be interpreted as a\nfunction definition."]}),"\n",(0,r.jsxs)(n.p,{children:["A new ",(0,r.jsx)(n.code,{children:"InvisibleOperator"})," function has been added to support this."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"applyInvisibleOperator"})," parsing option has been removed. To support\ncustom invisible operators, use the ",(0,r.jsx)(n.code,{children:"InvisibleOperator"})," function."]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"issues-resolved-10",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#25"})," Correctly parse chained relational operators, i.e. ",(0,r.jsx)(n.code,{children:"a < b <= c"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#126"})," Logic operators only accepted up to two arguments."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#127"})," Correctly compile ",(0,r.jsx)(n.code,{children:"Log"})," with bases other than 10."]}),"\n",(0,r.jsxs)(n.li,{children:["Correctly parse numbers with repeating patterns but no fractional digits, i.e.\n",(0,r.jsx)(n.code,{children:"0.(1234)"})]}),"\n",(0,r.jsxs)(n.li,{children:["Correctly parse ",(0,r.jsx)(n.code,{children:"|1+|a|+2|"})]}),"\n"]}),(0,r.jsx)(n.h3,{id:"new-features-and-improvements-3",children:"New Features and Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Function assignment can now be done with this syntax: ",(0,r.jsx)(n.code,{children:"f(x) := 2x+1"}),". This\nsyntax is equivalent to ",(0,r.jsx)(n.code,{children:"f := x -> 2x+1"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Implement the ",(0,r.jsx)(n.code,{children:"Mod"})," and ",(0,r.jsx)(n.code,{children:"Congruent"})," function."]}),"\n",(0,r.jsxs)(n.li,{children:["Correctly parse ",(0,r.jsx)(n.code,{children:"11 \\bmod 5"})," (",(0,r.jsx)(n.code,{children:"Mod"}),") and ",(0,r.jsx)(n.code,{children:"26\\equiv 11 \\pmod5"})," (",(0,r.jsx)(n.code,{children:"Congruent"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Better handle empty argument lists, i.e. ",(0,r.jsx)(n.code,{children:"f()"})]}),"\n",(0,r.jsxs)(n.li,{children:["When a function is used before being declared, infer that the symbol is a\nfunction, e.g. ",(0,r.jsx)(n.code,{children:"f(12)"})," will infer that ",(0,r.jsx)(n.code,{children:"f"})," is a function (and not a variable\n",(0,r.jsx)(n.code,{children:"f"})," multiplied by 12)"]}),"\n",(0,r.jsxs)(n.li,{children:["When a constant is followed by some parentheses, don't assume this is a\nfunction application, e.g. ",(0,r.jsx)(n.code,{children:"\\pi(3+n)"})," is now parsed as\n",(0,r.jsx)(n.code,{children:'["Multiply", "Pi", ["Add", 3, "n"]]'})," instead of ",(0,r.jsx)(n.code,{children:'["Pi", ["Add", 3, "n"]]'})]}),"\n",(0,r.jsx)(n.li,{children:"Improved parsing of nested lists, sequences and sets."}),"\n",(0,r.jsx)(n.li,{children:"Improved error messages when syntax errors are encountered during LaTeX\nparsing."}),"\n",(0,r.jsx)(n.li,{children:"When parsing with the canonical option set to false, preserve more closely the\noriginal LaTeX syntax."}),"\n",(0,r.jsxs)(n.li,{children:["When parsing text strings, convert some LaTeX commands to Unicode, including\nspacing commands. As a result, ",(0,r.jsx)(n.code,{children:'ce.parse("\\\\text{dead\\;beef}_{16}")'})," correctly\ngets evaluated to 3,735,928,559."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0191-2023-10-26",children:["0.19.1 ",(0,r.jsx)(n.em,{children:"2023-10-26"})]}),(0,r.jsx)(n.h3,{id:"issues-resolved-11",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Assigning a function to an indentifier works correctly now, i.e."}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\operatorname{f} := x \\\\mapsto 2x").evaluate();\n'})}),(0,r.jsxs)(n.h2,{id:"0190-2023-10-25",children:["0.19.0 ",(0,r.jsx)(n.em,{children:"2023-10-25"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-4",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"domain"})," property of the function definition ",(0,r.jsx)(n.code,{children:"signature"})," is deprecated and\nreplaced with the ",(0,r.jsx)(n.code,{children:"params"}),", ",(0,r.jsx)(n.code,{children:"optParams"}),", ",(0,r.jsx)(n.code,{children:"restParam"})," and ",(0,r.jsx)(n.code,{children:"result"})," properties\ninstead. The ",(0,r.jsx)(n.code,{children:"domain"})," property is still supported for backward compatibility,\nbut will be removed in a future version."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"issues-resolved-12",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When invoking a declared function in a numeric operation, correctly infer the\nresult type."}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'["Assign", "f", ["Add", "_", 1]]\n["Add", ["f", 1], 1]\n// -> 3\n'})}),(0,r.jsxs)(n.p,{children:["Previously a domain error was returned, now ",(0,r.jsx)(n.code,{children:"f"})," is inferred to have a numeric\nreturn type."]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Fixed a runtime error when inverting a fraction, i.e. ",(0,r.jsx)(n.code,{children:"\\frac{3}{4}^{-1}"})]}),"\n",(0,r.jsxs)(n.li,{children:["The tangent of \u03c0/2 now correctly returns ",(0,r.jsx)(n.code,{children:"ComplexInfinity"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The exact values of some constructible trigonometric operations (e.g.\n",(0,r.jsx)(n.code,{children:"\\tan 18\\degree = \\frac{\\sqrt{25-10\\sqrt5}}{5}"}),") returned incorrect results.\nThe unit test case was incorrect and did not detect the problem. The unit test\ncase has been fixed and the returned values are now correct."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"new-features-5",children:"New Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Implemented ",(0,r.jsx)(n.code,{children:"Union"})," and ",(0,r.jsx)(n.code,{children:"Intersection"})," of collections, for example:"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'["Intersection", ["List", 3, 5, 7], ["List", 2, 5, 9]]\n// -> ["Set", 5]\n\n["Union", ["List", 3, 5, 7], ["List", 2, 5, 9]]\n// -> ["Set", 3, 5, 7, 2, 9]\n'})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Parse ranges, for example ",(0,r.jsx)(n.code,{children:"1..5"})," or ",(0,r.jsx)(n.code,{children:"1, 3..10"}),". Ranges are collections and can\nbe used anywhere collections can be used."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The functions ",(0,r.jsx)(n.code,{children:"Sum"}),", ",(0,r.jsx)(n.code,{children:"Product"}),", ",(0,r.jsx)(n.code,{children:"Min"}),", ",(0,r.jsx)(n.code,{children:"Max"}),", and the statistics functions\n(",(0,r.jsx)(n.code,{children:"Mean"}),", ",(0,r.jsx)(n.code,{children:"Median"}),", ",(0,r.jsx)(n.code,{children:"Variance"}),", etc...) now handle collection arguments:\ncollections:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'["Range"]'}),", ",(0,r.jsx)(n.code,{children:'["Interval"]'}),", ",(0,r.jsx)(n.code,{children:'["Linspace"]'})," expressions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'["List"]'})," or ",(0,r.jsx)(n.code,{children:'["Set"]'})," expressions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'["Tuple"]'}),", ",(0,r.jsx)(n.code,{children:'["Pair"]'}),", ",(0,r.jsx)(n.code,{children:'["Pair"]'}),", ",(0,r.jsx)(n.code,{children:'["Triple"]'})," expressions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'["Sequence"]'})," expressions"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Most mathematical functions are now threadable, that is their arguments can be\ncollections, for example:"}),"\n"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'["Sin", ["List", 0, 1, 5]]\n// -> ["List", 0, 0.8414709848078965, -0.9589242746631385]\n\n["Add", ["List", 1, 2], ["List", 3, 4]]\n// -> ["List", 4, 6]\n'})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"GCD"})," and ",(0,r.jsx)(n.code,{children:"LCM"})," functions"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'["GCD", 10, 5, 15]\n// -> 5\n\n["LCM", 10, 5, 15]\n// -> 30\n'})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"Numerator"}),", ",(0,r.jsx)(n.code,{children:"Denominator"}),", ",(0,r.jsx)(n.code,{children:"NumeratorDenominator"})," functions. These\nfunctions can be used on non-canonical expressions."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"Head"})," and ",(0,r.jsx)(n.code,{children:"Tail"})," functions which can be used on non-canonical\nexpressions."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"display-quotient"})," and ",(0,r.jsx)(n.code,{children:"inline-quotient"})," style for formatting of\ndivision expressions in LaTeX."]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements-2",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Improved parsing of ",(0,r.jsx)(n.code,{children:"\\degree"})," command"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ce.parse("30\\\\degree)\n// -> ["Divide", "Pi", 6]\n'})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Improved interoperability with JavaScript: ",(0,r.jsx)(n.code,{children:"expr.value"})," will return a\nJavaScript primitive (",(0,r.jsx)(n.code,{children:"number"}),", ",(0,r.jsx)(n.code,{children:"boolean"}),", ",(0,r.jsx)(n.code,{children:"string"}),", etc...) when possible.\nThis is a more succinct version of ",(0,r.jsx)(n.code,{children:"expr.N().valueOf()"}),"."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0181-2023-10-16",children:["0.18.1 ",(0,r.jsx)(n.em,{children:"2023-10-16"})]}),(0,r.jsx)(n.h3,{id:"issues-resolved-13",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Parsing of whole numbers while in ",(0,r.jsx)(n.code,{children:"rational"})," mode would return incorrect\nresults."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"ND"})," function to evaluate derivatives numerically now return correct\nvalues."]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\mathrm{ND}(x \\\\mapsto 3x^2+5x+7, 2)").N();\n// -> 17.000000000001\n'})}),(0,r.jsx)(n.h3,{id:"improvements-3",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Speed up ",(0,r.jsx)(n.code,{children:"NIntegrate"})," by temporarily switching the numeric mode to ",(0,r.jsx)(n.code,{children:"machine"}),"\nwhile computing the Monte Carlo approximation."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0180-2023-10-16",children:["0.18.0 ",(0,r.jsx)(n.em,{children:"2023-10-16"})]}),(0,r.jsx)(n.h3,{id:"new-features-6",children:"New Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Expanded LaTeX dictionary with ",(0,r.jsx)(n.code,{children:"\\max"}),", ",(0,r.jsx)(n.code,{children:"\\min"}),", ",(0,r.jsx)(n.code,{children:"\\sup"}),", ",(0,r.jsx)(n.code,{children:"\\inf"})," and ",(0,r.jsx)(n.code,{children:"\\lim"}),"\nfunctions"]}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"Supremum"})," and ",(0,r.jsx)(n.code,{children:"Infimum"})," functions"]}),"\n",(0,r.jsxs)(n.li,{children:["Compilation of ",(0,r.jsx)(n.code,{children:"Block"})," expressions, local variables, return statements and\nconditionals ",(0,r.jsx)(n.code,{children:"If"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Added numerical evaluation of limits with ",(0,r.jsx)(n.code,{children:"Limit"})," functions and ",(0,r.jsx)(n.code,{children:"NLimit"}),"\nfunctions, using a Richardson Extrapolation."]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'console.info(ce.parse("\\\\lim_{x\\\\to0} \\\\frac{\\\\sin x}{x}").N().json);\n// -> 1\n\nconsole.info(\n  ce.box(["NLimit", ["Divide", ["Sin", "_"], "_"], 0]).evaluate().json\n);\n// -> 1\n\nconsole.info(ce.parse("\\\\lim_{x\\\\to \\\\infty} \\\\cos \\\\frac{1}{x}").N().json);\n// -> 1\n'})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"Assign"})," and ",(0,r.jsx)(n.code,{children:"Declare"})," functions to assign values to symbols and declare\nsymbols with a domain."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Block"})," evaluations with local variables work now. For example:"]}),"\n"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ce.box(["Block", ["Assign", "c", 5], ["Multiply", "c", 2]]).evaluate().json;\n// -> 10\n'})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:['When decimal numbers are parsed they are interpreted as inexact numbers by\ndefault, i.e. "1.2" -> ',(0,r.jsx)(n.code,{children:'{num: "1.2"}'}),". To force the number to be interpreted\nas a rational number, set ",(0,r.jsx)(n.code,{children:'ce.latexOptions.parseNumbers = "rational"'}),'. In that\ncase, "1.2" -> ',(0,r.jsx)(n.code,{children:'["Rational", 12, 10]'}),", an exact number."]}),"\n",(0,r.jsx)(n.p,{children:'While regular decimals are considered "inexact" numbers (i.e. they are assumed\nto be an approximation), rationals are assumed to be exact. In most cases, the\nsafest thing to do is to consider decimal numbers as inexact to avoid\nintroducing errors in calculations. If you know that the decimal numbers you\nparse are exact, you can use this option to consider them as exact numbers.'}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements-4",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["LaTeX parser: empty superscripts are now ignored, e.g. ",(0,r.jsx)(n.code,{children:"4^{}"})," is interpreted\nas ",(0,r.jsx)(n.code,{children:"4"}),"."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0170-2023-10-12",children:["0.17.0 ",(0,r.jsx)(n.em,{children:"2023-10-12"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-5",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"Nothing"})," domain has been renamed to ",(0,r.jsx)(n.code,{children:"NothingDomain"})]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"Functions"}),", ",(0,r.jsx)(n.code,{children:"Maybe"}),", ",(0,r.jsx)(n.code,{children:"Sequence"}),", ",(0,r.jsx)(n.code,{children:"Dictionary"}),", ",(0,r.jsx)(n.code,{children:"List"})," and ",(0,r.jsx)(n.code,{children:"Tuple"})," domain\nconstructors have been renamed to ",(0,r.jsx)(n.code,{children:"FunctionOf"}),", ",(0,r.jsx)(n.code,{children:"OptArg"}),", ",(0,r.jsx)(n.code,{children:"VarArg"}),",\n",(0,r.jsx)(n.code,{children:"DictionaryOf"}),", ",(0,r.jsx)(n.code,{children:"ListOf"})," and ",(0,r.jsx)(n.code,{children:"TupleOf"}),", respectively."]}),"\n",(0,r.jsxs)(n.li,{children:["Domains no longer require a ",(0,r.jsx)(n.code,{children:'["Domain"]'})," expression wrapper, so for example\n",(0,r.jsx)(n.code,{children:'ce.box("Pi").domain'})," returns ",(0,r.jsx)(n.code,{children:'"TranscendentalNumbers"'})," instead of\n",(0,r.jsx)(n.code,{children:'["Domain", "TranscendentalNumbers"]'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"VarArg"})," domain constructor now indicates the presence of 0 or more\narguments, instead of 1 or more arguments."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"MaybeBooleans"})," domain has been dropped. Use\n",(0,r.jsx)(n.code,{children:'["Union", "Booleans", "NothingDomain"]'})," instead."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"ce.defaultDomain"})," has been dropped. The domain of a symbol is now\ndetermined by the context in which it is used, or by the ",(0,r.jsx)(n.code,{children:"ce.assume()"})," method.\nIn some circumstances, the domain of a symbol can be ",(0,r.jsx)(n.code,{children:"undefined"}),"."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"new-features-7",children:"New Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Symbolic derivatives of expressions can be calculated using the ",(0,r.jsx)(n.code,{children:"D"})," function.\nFor example, ",(0,r.jsx)(n.code,{children:'ce.box(["D", ce.parse("x^2 + 3x + 1"), "x"]).evaluate().latex'}),"\nreturns ",(0,r.jsx)(n.code,{children:'"2x + 3"'}),"."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements-5",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Some frequently used expressions are now available as predefined constants,\nfor example ",(0,r.jsx)(n.code,{children:"ce.Pi"}),", ",(0,r.jsx)(n.code,{children:"ce.True"})," and ",(0,r.jsx)(n.code,{children:"ce.Numbers"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Improved type checking and inference, especially for functions with\ncomplicated or non-numeric signatures."}),"\n"]}),(0,r.jsx)(n.h3,{id:"bugs-fixed",children:"Bugs Fixed"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Invoking a function repeatedly would invoke the function in the original scope\nrather than using a new scope for each invocation."}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0160-2023-09-29",children:["0.16.0 ",(0,r.jsx)(n.em,{children:"2023-09-29"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-6",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The methods ",(0,r.jsx)(n.code,{children:"ce.let()"})," and ",(0,r.jsx)(n.code,{children:"ce.set()"})," have been renamed to ",(0,r.jsx)(n.code,{children:"ce.declare()"})," and\n",(0,r.jsx)(n.code,{children:"ce.assign()"})," respectively."]}),"\n",(0,r.jsxs)(n.li,{children:["The method ",(0,r.jsx)(n.code,{children:"ce.assume()"})," requires a predicate."]}),"\n",(0,r.jsxs)(n.li,{children:["The signatures of ",(0,r.jsx)(n.code,{children:"ce.assume()"})," and ",(0,r.jsx)(n.code,{children:"ce.ask()"})," have been simplified."]}),"\n",(0,r.jsxs)(n.li,{children:["The signature of ",(0,r.jsx)(n.code,{children:"ce.pushScope()"})," has been simplified."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"expr.freeVars"})," property has been renamed to ",(0,r.jsx)(n.code,{children:"expr.unknowns"}),". It returns\nthe identifiers used in the expression that do not have a value associated\nwith them. The ",(0,r.jsx)(n.code,{children:"expr.freeVariables"})," property now return the identifiers used\nin the expression that are defined outside of the local scope and are not\narguments of the function, if a function."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"new-features-8",children:"New Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Domain Inference"})," when the domain of a symbol is not set explicitly (for\nexample with ",(0,r.jsx)(n.code,{children:"ce.declare()"}),"), the domain is inferred from the value of the\nsymbol or from the context of its usage."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"Assume"}),", ",(0,r.jsx)(n.code,{children:"Identity"}),", ",(0,r.jsx)(n.code,{children:"Which"}),", ",(0,r.jsx)(n.code,{children:"Parse"}),", ",(0,r.jsx)(n.code,{children:"N"}),", ",(0,r.jsx)(n.code,{children:"Evaluate"}),", ",(0,r.jsx)(n.code,{children:"Simplify"}),",\n",(0,r.jsx)(n.code,{children:"Domain"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Assignments in LaTeX: ",(0,r.jsx)(n.code,{children:"x \\\\coloneq 42"})," produce ",(0,r.jsx)(n.code,{children:'["Assign", "x", 42]'})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"ErfInv"})," (inverse error function)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"Factorial2"})," (double factorial)"]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h4,{id:"functions",children:"Functions"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Functions can now be defined:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["using ",(0,r.jsx)(n.code,{children:"ce.assign()"})," or ",(0,r.jsx)(n.code,{children:"ce.declare()"})]}),"\n",(0,r.jsxs)(n.li,{children:["evaluating LaTeX: ",(0,r.jsx)(n.code,{children:"(x, y) \\mapsto x^2 + y^2"})]}),"\n",(0,r.jsxs)(n.li,{children:["evaluating MathJSON:\n",(0,r.jsx)(n.code,{children:'["Function", ["Add", ["Power", "x", 2], ["Power", "y", 2]]], "x", "y"]'})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Function can be applied using ",(0,r.jsx)(n.code,{children:"\\operatorname{apply}"})," or the operators ",(0,r.jsx)(n.code,{children:"\\rhd"}),"\nand ",(0,r.jsx)(n.code,{children:"\\lhd"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"\\operatorname{apply}(f, x)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"f \\rhd x"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"x \\lhd f"})}),"\n"]}),"\n"]}),"\n"]}),(0,r.jsxs)(n.p,{children:["See\n",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/guides/augmenting/",children:"Adding New Definitions"}),"\nand ",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/reference/functions/",children:"Functions"}),"."]}),(0,r.jsx)(n.h4,{id:"control-structures",children:"Control Structures"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"FixedPoint"}),", ",(0,r.jsx)(n.code,{children:"Block"}),", ",(0,r.jsx)(n.code,{children:"If"}),", ",(0,r.jsx)(n.code,{children:"Loop"})]}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"Break"}),", ",(0,r.jsx)(n.code,{children:"Continue"})," and ",(0,r.jsx)(n.code,{children:"Return"})," statements"]}),"\n"]}),(0,r.jsxs)(n.p,{children:["See\n",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/reference/control-structures/",children:"Control Structures"})]}),(0,r.jsx)(n.h4,{id:"calculus",children:"Calculus"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Added numeric approximation of derivatives, using an 8-th order centered\ndifference approximation, with the ",(0,r.jsx)(n.code,{children:"ND"})," function."]}),"\n",(0,r.jsxs)(n.li,{children:["Added numeric approximation of integrals, using a Monte Carlo method with\nrebasing for improper integrals, with the ",(0,r.jsx)(n.code,{children:"NIntegrate"})," function"]}),"\n",(0,r.jsxs)(n.li,{children:["Added symbolic calculation of derivatives with the ",(0,r.jsx)(n.code,{children:"D"})," function."]}),"\n"]}),(0,r.jsx)(n.h4,{id:"collections",children:"Collections"}),(0,r.jsxs)(n.p,{children:["Added support for ",(0,r.jsx)(n.strong,{children:"collections"})," such as lists, tuples, ranges, etc..."]}),(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/reference/collections/",children:"Collections"})]}),(0,r.jsx)(n.p,{children:"Collections can be used to represent various data structures, such as lists,\nvectors, matrixes and more."}),(0,r.jsx)(n.p,{children:"They can be iterated, sliced, filtered, mapped, etc..."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:"example",children:'["Length", ["List", 19, 23, 5]]\n// -> 3\n\n["IsEmpty", ["Range", 1, 10]]\n// -> "False"\n\n["Take", ["Linspace", 0, 100, 50], 4]\n// -> ["List", 0, 2, 4, 6]\n\n["Map", ["List", 1, 2, 3], ["Function", "x", ["Power", "x", 2]]]\n// -> ["List", 1, 4, 9]\n\n["Exclude", ["List", 33, 45, 12, 89, 65], -2, 2]\n// -> ["List", 33, 12, 65]\n\n\n["First", ["List", 33, 45, 12, 89, 65]]\n// -> 33\n'})}),(0,r.jsx)(n.h3,{id:"improvements-6",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/",children:"documentation"})," has been\nsignificantly rewritten with help from an AI-powered writing assistant."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"issues-resolved-14",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The LaTeX string returned in ",(0,r.jsx)(n.code,{children:'["Error"]'})," expression was incorrectly tagged as\n",(0,r.jsx)(n.code,{children:"Latex"})," instead of ",(0,r.jsx)(n.code,{children:"LatexString"}),"."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0150-2023-09-14",children:["0.15.0 ",(0,r.jsx)(n.em,{children:"2023-09-14"})]}),(0,r.jsx)(n.h3,{id:"improvements-7",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"ce.serialize()"})," function now takes an optional ",(0,r.jsx)(n.code,{children:"canonical"})," argument. Set\nit to ",(0,r.jsx)(n.code,{children:"false"})," to prevent some transformations that are done to produce more\nreadable LaTeX, but that may not match exactly the MathJSON. For example, by\ndefault ",(0,r.jsx)(n.code,{children:'ce.serialize(["Power", "x", -1])'})," returns ",(0,r.jsx)(n.code,{children:"\\frac{1}{x}"})," while\n",(0,r.jsx)(n.code,{children:'ce.serialize(["Power", "x", -1], {canonical: false})'})," returns ",(0,r.jsx)(n.code,{children:"x^{-1}"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Improved parsing of delimiters, i.e. ",(0,r.jsx)(n.code,{children:"\\left("}),", ",(0,r.jsx)(n.code,{children:"\\right]"}),", etc..."]}),"\n",(0,r.jsxs)(n.li,{children:["Added complex functions ",(0,r.jsx)(n.code,{children:"Real"}),", ",(0,r.jsx)(n.code,{children:"Imaginary"}),", ",(0,r.jsx)(n.code,{children:"Arg"}),", ",(0,r.jsx)(n.code,{children:"Conjugate"}),", ",(0,r.jsx)(n.code,{children:"AbsArg"}),". See\n",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/reference/complex/",children:"Complex"})]}),"\n",(0,r.jsxs)(n.li,{children:["Added parsing and evaluation of ",(0,r.jsx)(n.code,{children:"\\Re"}),", ",(0,r.jsx)(n.code,{children:"\\Im"}),", ",(0,r.jsx)(n.code,{children:"\\arg"}),", ",(0,r.jsx)(n.code,{children:"^\\star"})," (Conjugate)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#104"})," Added the ",(0,r.jsx)(n.code,{children:'["ComplexRoots", x, n]'})," function which returns the nthroot\nof ",(0,r.jsx)(n.code,{children:"x"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Added parsing and evaluation of statistics functions ",(0,r.jsx)(n.code,{children:"Mean"}),", ",(0,r.jsx)(n.code,{children:"Median"}),",\n",(0,r.jsx)(n.code,{children:"StandardDeviation"}),", ",(0,r.jsx)(n.code,{children:"Variance"}),", ",(0,r.jsx)(n.code,{children:"Skewness"}),", ",(0,r.jsx)(n.code,{children:"Kurtosis"}),", ",(0,r.jsx)(n.code,{children:"Quantile"}),",\n",(0,r.jsx)(n.code,{children:"Quartiles"}),", ",(0,r.jsx)(n.code,{children:"InterquartileRange"}),", ",(0,r.jsx)(n.code,{children:"Mode"}),", ",(0,r.jsx)(n.code,{children:"Count"}),", ",(0,r.jsx)(n.code,{children:"Erf"}),", ",(0,r.jsx)(n.code,{children:"Erfc"}),". See\n",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/reference/statistics/",children:"Statistics"})]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0140-2023-09-13",children:["0.14.0 ",(0,r.jsx)(n.em,{children:"2023-09-13"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-7",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The entries in the LaTeX syntax dictionary can now have LaTeX triggers\n(",(0,r.jsx)(n.code,{children:"latexTrigger"}),") or triggers based on identifiers (",(0,r.jsx)(n.code,{children:"identifierTrigger"}),"). The\nformer replaces the ",(0,r.jsx)(n.code,{children:"trigger"})," property. The latter is new. An entry with a\n",(0,r.jsx)(n.code,{children:"triggerIdentifier"})," of ",(0,r.jsx)(n.code,{children:"average"})," will match ",(0,r.jsx)(n.code,{children:"\\operatorname{average}"}),",\n",(0,r.jsx)(n.code,{children:"\\mathrm{average}"})," and other variants."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"ce.latexOptions"})," and ",(0,r.jsx)(n.code,{children:"ce.jsonSerializationOptions"})," properties are more\nrobust. They can be modified directly or one of their properties can be\nmodified."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements-8",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added more functions and symbols supported by ",(0,r.jsx)(n.code,{children:"expr.compile()"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Factorial"})," postfix operator ",(0,r.jsx)(n.code,{children:"5!"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Gamma"})," function ",(0,r.jsx)(n.code,{children:"\\Gamma(2)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"LogGamma"})," function ",(0,r.jsx)(n.code,{children:"\\operatorname{LogGamma}(2)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Gcd"})," function ",(0,r.jsx)(n.code,{children:"\\operatorname{gcd}(20, 5)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Lcm"})," function ",(0,r.jsx)(n.code,{children:"\\operatorname{lcm}(20, 5)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Chop"})," function ",(0,r.jsx)(n.code,{children:"\\operatorname{chop}(0.00000000001)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Half"})," constant ",(0,r.jsx)(n.code,{children:"\\frac{1}{2}"})]}),"\n",(0,r.jsx)(n.li,{children:"'MachineEpsilon' constant"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GoldenRatio"})," constant"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"CatalanConstant"})," constant"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EulerGamma"})," constant ",(0,r.jsx)(n.code,{children:"\\gamma"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Max"})," function ",(0,r.jsx)(n.code,{children:"\\operatorname{max}(1, 2, 3)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Min"})," function ",(0,r.jsx)(n.code,{children:"\\operatorname{min}(13, 5, 7)"})]}),"\n",(0,r.jsxs)(n.li,{children:["Relational operators: ",(0,r.jsx)(n.code,{children:"Less"}),", ",(0,r.jsx)(n.code,{children:"Greater"}),", ",(0,r.jsx)(n.code,{children:"LessEqual"}),", ",(0,r.jsx)(n.code,{children:"GreaterEqual"}),",\n'Equal', 'NotEqual'"]}),"\n",(0,r.jsxs)(n.li,{children:["Some logical operators and constants: ",(0,r.jsx)(n.code,{children:"And"}),", ",(0,r.jsx)(n.code,{children:"Or"}),", ",(0,r.jsx)(n.code,{children:"Not"}),", ",(0,r.jsx)(n.code,{children:"True"}),", ",(0,r.jsx)(n.code,{children:"False"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["More complex identifiers syntax are recognized, including ",(0,r.jsx)(n.code,{children:"\\mathbin{}"}),",\n",(0,r.jsx)(n.code,{children:"\\mathord{}"}),", etc... ",(0,r.jsx)(n.code,{children:"\\operatorname{}"})," is the recommended syntax, though: it\nwill display the identifier in upright font and with the propert spacing, and\nis properly enclosing. Some commands, such as ",(0,r.jsx)(n.code,{children:"\\mathrm{}"})," are not properly\nenclosing: two adjacent ",(0,r.jsx)(n.code,{children:"\\mathrm{}"})," command could be merged into one."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Environments are now parsed and serialized correctly."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When parsing LaTeX, function application is properly handled in more cases,\nincluding custom functions, e.g. ",(0,r.jsx)(n.code,{children:"f(x)"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When parsing LaTeX, multiple arguments are properly handled, e.g. ",(0,r.jsx)(n.code,{children:"f(x, y)"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Add LaTeX syntax for logical operators:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"And"}),": ",(0,r.jsx)(n.code,{children:"\\land"}),", ",(0,r.jsx)(n.code,{children:"\\operatorname{and}"})," (infix or function)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Or"}),": ",(0,r.jsx)(n.code,{children:"\\lor"}),", ",(0,r.jsx)(n.code,{children:"\\operatorname{or}"})," (infix or function)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Not"}),": ",(0,r.jsx)(n.code,{children:"\\lnot"}),", ",(0,r.jsx)(n.code,{children:"\\operatorname{not}"})," (prefix or function)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Xor"}),": ",(0,r.jsx)(n.code,{children:"\\veebar"})," (infix)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Nand"}),": ",(0,r.jsx)(n.code,{children:"\\barwedge"})," (infix)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Nor"}),": ",(0,r.jsx)(n.code,{children:"^^^^22BD"})," (infix)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Implies"}),": ",(0,r.jsx)(n.code,{children:"\\implies"})," (infix)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Equivalent"}),": ",(0,r.jsx)(n.code,{children:"\\iff"})," (infix)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When a postfix operator is defined in the LaTeX syntax dictionary of the form\n",(0,r.jsx)(n.code,{children:"^"})," plus a single token, a definition with braces is added automatically so\nthat both forms will be recognized."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Extended the LaTeX dictionary with:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"floor"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"ceil"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"round"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"sgn"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"exp"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"abs"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"gcd"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"lcm"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"apply"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Properly handle inverse and derivate notations, e.g. ",(0,r.jsx)(n.code,{children:"\\sin^{-1}(x)"}),",\n",(0,r.jsx)(n.code,{children:"\\sin'(x)"}),", ",(0,r.jsx)(n.code,{children:"\\cos''(x)"}),", \\cos^",4,"(x)",(0,r.jsx)(n.code,{children:"or even"}),"\\sin^",-1,"''(x)`"]}),"\n"]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0130-2023-09-09",children:["0.13.0 ",(0,r.jsx)(n.em,{children:"2023-09-09"})]}),(0,r.jsx)(n.h3,{id:"new-features-9",children:"New Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compilation"})," Some expressions can be compiled to Javascript. This is useful\nto evaluate an expression many times, for example in a loop. The compiled\nexpression is faster to evaluate than the original expression. To get the\ncompiled expression, use ",(0,r.jsx)(n.code,{children:"expr.compile()"}),". Read more at\n",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/guides/compiling",children:"Compiling"})]}),"\n"]}),(0,r.jsx)(n.h3,{id:"issues-resolved-and-improvements",children:"Issues Resolved and Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Fixed parsing and serialization of extended LaTeX synonyms for ",(0,r.jsx)(n.code,{children:"e"})," and ",(0,r.jsx)(n.code,{children:"i"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Fixed serialization of ",(0,r.jsx)(n.code,{children:"Half"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Fixed serialization of ",(0,r.jsx)(n.code,{children:"Which"})]}),"\n",(0,r.jsxs)(n.li,{children:["Improved serialization of ",(0,r.jsx)(n.code,{children:'["Delimiter"]'})," expressions."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0127-2023-09-08",children:["0.12.7 ",(0,r.jsx)(n.em,{children:"2023-09-08"})]}),(0,r.jsx)(n.h3,{id:"improvements-9",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Made customization of the LaTeX dictionary simpler. The ",(0,r.jsx)(n.code,{children:"ce.latexDictionary"}),"\nproperty can be used to access and modify the dictionary. The\n",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/guides/latex-syntax/#customizing-the-latex-dictionary",children:"documentation"}),"\nhas been updated."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0126-2023-09-08",children:["0.12.6 ",(0,r.jsx)(n.em,{children:"2023-09-08"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-8",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["New API for the ",(0,r.jsx)(n.code,{children:"Parser"})," class."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements-and-bux-fixes",children:"Improvements and Bux Fixes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"ComputeEngine"})," now exports the ",(0,r.jsx)(n.code,{children:"bignum()"})," and ",(0,r.jsx)(n.code,{children:"complex()"})," methods that\ncan be used to create bignum and complex numbers from strings or numbers. The\nmethods ",(0,r.jsx)(n.code,{children:"isBigNum()"})," and ",(0,r.jsx)(n.code,{children:"isComplex()"})," have also been added to check if a\nvalue is a bignum (",(0,r.jsx)(n.code,{children:"Decimal"}),") or complex (",(0,r.jsx)(n.code,{children:"Complex"}),") number, for example as\nreturned by ",(0,r.jsx)(n.code,{children:"expr.numericValue"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#69"})," ",(0,r.jsx)(n.code,{children:"\\leq"})," was incorrectly parsed as ",(0,r.jsx)(n.code,{children:"Equals"})," instead of ",(0,r.jsx)(n.code,{children:"LessEqual"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#94"})," The ",(0,r.jsx)(n.code,{children:"\\exp"})," command was not parsed correctly."]}),"\n",(0,r.jsxs)(n.li,{children:["Handle ",(0,r.jsx)(n.code,{children:"PlusMinus"})," in infix and prefix position, i.e. ",(0,r.jsx)(n.code,{children:"a\\pm b"})," and ",(0,r.jsx)(n.code,{children:"\\pm a"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Improved parsing, serialization"}),"\n",(0,r.jsx)(n.li,{children:"Improved simplification"}),"\n",(0,r.jsxs)(n.li,{children:["Improved evaluation of ",(0,r.jsx)(n.code,{children:"Sum"})," and ",(0,r.jsx)(n.code,{children:"Product"})]}),"\n",(0,r.jsx)(n.li,{children:"Support complex identifiers (i.e. non-latin scripts, emojis)."}),"\n",(0,r.jsx)(n.li,{children:"Fixed serialization of mixed numbers."}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0121-2022-12-01",children:["0.12.1 ",(0,r.jsx)(n.em,{children:"2022-12-01"})]}),(0,r.jsx)(n.p,{children:"Work around unpckg.com issue with libraries using BigInt."}),(0,r.jsxs)(n.h2,{id:"0120-2022-11-27",children:["0.12.0 ",(0,r.jsx)(n.em,{children:"2022-11-27"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-9",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"expr.symbols"})," property return an array of ",(0,r.jsx)(n.code,{children:"string"}),". Previously it\nreturned an array of ",(0,r.jsx)(n.code,{children:"BoxedExpression"}),"."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements-10",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Rewrote the rational computation engine to use JavaScript ",(0,r.jsx)(n.code,{children:"bigint"})," instead of\n",(0,r.jsx)(n.code,{children:"Decimal"})," instances. Performance improvements of up to 100x."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.freeVars"})," provides the free variables in an expression."]}),"\n",(0,r.jsx)(n.li,{children:"Improved performance of prime factorization of big num by x100."}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:'["RandomExpression"]'})]}),"\n",(0,r.jsxs)(n.li,{children:["Improved accuracy of some operations, for example\n",(0,r.jsx)(n.code,{children:'expr.parse("1e999 + 1").simplify()'})]}),"\n"]}),(0,r.jsx)(n.h3,{id:"issues-resolved-15",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When ",(0,r.jsx)(n.code,{children:'ce.numericMode === "auto"'}),", square roots of negative numbers would\nreturn an expression instead of a complex number."]}),"\n",(0,r.jsxs)(n.li,{children:["The formatting of LaTeX numbers when using\n",(0,r.jsx)(n.code,{children:'ce.latexOptions.notation = "engineering"'})," or ",(0,r.jsx)(n.code,{children:'"scientific"'})," was incorrect."]}),"\n",(0,r.jsx)(n.li,{children:'The trig functions no longer "simplify" to the less simple exponential\nformulas.'}),"\n",(0,r.jsx)(n.li,{children:'The canonical order of polynomials now orders non-lexicographic terms of\ndegree 1 last, i.e. "ax^2+ bx+ c" instead of "x + ax^2 + bx".'}),"\n",(0,r.jsx)(n.li,{children:"Fixed evaluation of inverse functions"}),"\n",(0,r.jsxs)(n.li,{children:["Fixed ",(0,r.jsx)(n.code,{children:"expr.isLess"}),", ",(0,r.jsx)(n.code,{children:"expr.isGreater"}),", ",(0,r.jsx)(n.code,{children:"expr.isLessEqual"}),",\n",(0,r.jsx)(n.code,{children:"expr.isGreaterEqual"})," and ",(0,r.jsx)(n.code,{children:'["Min"]'}),", ",(0,r.jsx)(n.code,{children:'["Max"]'})]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0110-2022-11-18",children:["0.11.0 ",(0,r.jsx)(n.em,{children:"2022-11-18"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-10",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The signature of ",(0,r.jsx)(n.code,{children:"ce.defineSymbol()"}),", ",(0,r.jsx)(n.code,{children:"ce.defineFunction()"})," and\n",(0,r.jsx)(n.code,{children:"ce.pushScope()"})," have changed"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements-11",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When a constant should be held or substituted with its value can now be more\nprecisely controlled. The ",(0,r.jsx)(n.code,{children:"hold"})," symbol attribute is now ",(0,r.jsx)(n.code,{children:"holdUntil"})," and can\nspecify at which stage the substitution should take place."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"issues-resolved-16",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Some constants would return a value as bignum or complex even when the\n",(0,r.jsx)(n.code,{children:"numericMode"})," did not allow it."]}),"\n",(0,r.jsxs)(n.li,{children:["Changing the value or domain of a symbol is now correctly taken into account.\nChanges can be made with ",(0,r.jsx)(n.code,{children:"ce.assume()"}),", ",(0,r.jsx)(n.code,{children:"ce.set()"})," or ",(0,r.jsx)(n.code,{children:"expr.value"}),"."]}),"\n",(0,r.jsx)(n.li,{children:'When a symbol does not have a value associated with it, assumptions about it\n(e.g. "x > 0") are now correctly tracked and reflected.'}),"\n"]}),(0,r.jsxs)(n.h2,{id:"0100-2022-11-17",children:["0.10.0 ",(0,r.jsx)(n.em,{children:"2022-11-17"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-11",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.isLiteral"})," has been removed. Use ",(0,r.jsx)(n.code,{children:"expr.numericValue !== null"})," and\n",(0,r.jsx)(n.code,{children:"expr.string !== null"})," instead."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"issues-resolved-17",children:"Issues Resolved"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Calling ",(0,r.jsx)(n.code,{children:"ce.forget()"})," would not affect expressions that previously referenced\nthe symbol."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements-12",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"More accurate calculations of some trig functions when using bignums."}),"\n",(0,r.jsxs)(n.li,{children:["Improved performance when changing a value with ",(0,r.jsx)(n.code,{children:"ce.set()"}),". Up to 10x faster\nwhen evaluating a simple polynomial in a loop."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ce.strict"})," can be set to ",(0,r.jsx)(n.code,{children:"false"})," to bypass some domain and validity checks."]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"090-2022-11-15",children:["0.9.0 ",(0,r.jsx)(n.em,{children:"2022-11-15"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-12",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The head of a number expression is always ",(0,r.jsx)(n.code,{children:"Number"}),". Use ",(0,r.jsx)(n.code,{children:"expr.domain"})," to be\nget more specific info about what kind of number this is."]}),"\n",(0,r.jsxs)(n.li,{children:["By default, ",(0,r.jsx)(n.code,{children:"ce.box()"})," and ",(0,r.jsx)(n.code,{children:"ce.parse()"})," return a canonical expression. A flag\ncan be used if a non-canonical expression is desired."]}),"\n",(0,r.jsxs)(n.li,{children:["The API surface of ",(0,r.jsx)(n.code,{children:"BoxedExpression"})," has been reduced. The properties\n",(0,r.jsx)(n.code,{children:"machineValue"}),", ",(0,r.jsx)(n.code,{children:"bignumValue"}),", ",(0,r.jsx)(n.code,{children:"asFloat"}),", ",(0,r.jsx)(n.code,{children:"asSmallInteger"}),", ",(0,r.jsx)(n.code,{children:"asRational"}),"\netc... have been replaced with a single ",(0,r.jsx)(n.code,{children:"numericValue"})," property."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parseUnknownSymbol"})," is now ",(0,r.jsx)(n.code,{children:"parseUnknownIdentifier"})]}),"\n"]}),(0,r.jsx)(n.h3,{id:"improvements-13",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Support angles in degrees with ",(0,r.jsx)(n.code,{children:"30\\degree"}),", ",(0,r.jsx)(n.code,{children:"30^\\circ"})," and ",(0,r.jsx)(n.code,{children:"\\ang{30}"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["More accurate error expressions, for example if there is a missing closing\ndelimiter an ",(0,r.jsx)(n.code,{children:'["Error", ["ErrorCode", "\'expected-closing-delimiter\'", "\')\'"]]'}),"\nis produced."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'["Expand"]'})," handles more cases"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The trig functions can now have a regular exponent, i.e.",(0,r.jsx)(n.code,{children:"\\cos^2(x)"})," in\naddition to ",(0,r.jsx)(n.code,{children:"-1"})," for inverse, and a combination of ",(0,r.jsx)(n.code,{children:"\\prime"}),", ",(0,r.jsx)(n.code,{children:"\\doubleprime"}),"\nand ",(0,r.jsx)(n.code,{children:"'"})," for derivatives."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ce.assume()"})," handle more expressions and can be used to define new symbols by\ndomain or value."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Better error message when parsing, e.g. ",(0,r.jsx)(n.code,{children:"\\sqrt(2)"})," (instead of ",(0,r.jsx)(n.code,{children:"\\sqrt{2}"}),")"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Better simplification for square root expressions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\sqrt{25x^2}"})," -> ",(0,r.jsx)(n.code,{children:"5x"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Improved evaluation of ",(0,r.jsx)(n.code,{children:'["Power"]'})," expressions, including for negative\narguments and non-integer exponents and complex arguments and exponents."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"Arccot"}),", ",(0,r.jsx)(n.code,{children:"Arcoth"}),", ",(0,r.jsx)(n.code,{children:"Arcsch"}),", ",(0,r.jsx)(n.code,{children:"Arcscc"}),", ",(0,r.jsx)(n.code,{children:"Arsech"})," and ",(0,r.jsx)(n.code,{children:"Arccsc"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"expr.solve()"})," returns result for polynomials of order up to 2."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"pattern.match()"})," function now work correctly for commutative functions,\ni.e. ",(0,r.jsx)(n.code,{children:"ce.pattern(['Add', '_a', 'x']).match(ce.parse('x+y')) -> {\"_a\": \"y\"}"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added ",(0,r.jsx)(n.code,{children:"ce.let()"})," and ",(0,r.jsx)(n.code,{children:"ce.set()"})," to declare and assign values to identifiers."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Preserve exact calculations involving rationals or square root of rationals."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\sqrt{\\frac{49}{25}}"})," -> ",(0,r.jsx)(n.code,{children:"\\frac{7}{5}"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Addition and multiplication provide more consistent results for ",(0,r.jsx)(n.code,{children:"evaluate()"}),"\nand ",(0,r.jsx)(n.code,{children:"N()"}),". Evaluate returns an exact result when possible."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["EXACT","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2 + 5 -> 7"}),"\n",(0,r.jsx)(n.li,{children:"2 + 5/7 -> 19/7"}),"\n",(0,r.jsx)(n.li,{children:"2 + \u221a2 -> 2 + \u221a2"}),"\n",(0,r.jsx)(n.li,{children:"2 + \u221a(5/7) -> 2 + \u221a(5/7)"}),"\n",(0,r.jsx)(n.li,{children:"5/7 + 9/11 -> 118/77"}),"\n",(0,r.jsx)(n.li,{children:"5/7 + \u221a2 -> 5/7 + \u221a2"}),"\n",(0,r.jsx)(n.li,{children:"10/14 + \u221a(18/9) -> 5/7 + \u221a2"}),"\n",(0,r.jsx)(n.li,{children:"\u221a2 + \u221a5 -> \u221a2 + \u221a5"}),"\n",(0,r.jsx)(n.li,{children:"\u221a2 + \u221a2 -> 2\u221a2"}),"\n",(0,r.jsx)(n.li,{children:"sin(2) -> sin(2)"}),"\n",(0,r.jsx)(n.li,{children:"sin(\u03c0/3) -> \u221a3/2"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["APPROXIMATE","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2 + 2.1 -> 4.1"}),"\n",(0,r.jsx)(n.li,{children:"2 + \u221a2.1 -> 3.44914"}),"\n",(0,r.jsx)(n.li,{children:"5/7 + \u221a2.1 -> 2.16342"}),"\n",(0,r.jsx)(n.li,{children:"sin(2) + \u221a2.1 -> 2.35844"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["More consistent behavior of the ",(0,r.jsx)(n.code,{children:"auto"})," numeric mode: calculations are done\nwith ",(0,r.jsx)(n.code,{children:"bignum"})," and ",(0,r.jsx)(n.code,{children:"complex"})," in most cases."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"JsonSerializationOptions"})," has a new option to specify the numeric precision\nin the MathJSON serialization."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Shorthand numbers can now be strings if they do not fit in a float-64:"}),"\n"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:"example",children:'// Before\n["Rational", { "num": "1234567890123456789"}, { "num": "2345678901234567889"}]\n\n// Now\n["Rational", "1234567890123456789", "2345678901234567889"]\n'})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\sum"})," is now correctly parsed and evaluated. This includes creating a local\nscope with the index and expression value of the sum."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"bugs-fixed-1",children:"Bugs Fixed"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The parsing and evaluation of log functions could produce unexpected results"}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"\\gamma"})," command now correctly maps to ",(0,r.jsx)(n.code,{children:'["Gamma"]'})]}),"\n",(0,r.jsxs)(n.li,{children:["Fixed numeric evaluation of the ",(0,r.jsx)(n.code,{children:'["Gamma"]'})," function when using bignum"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#57"})," Substituting ",(0,r.jsx)(n.code,{children:"0"})," (i.e. with ",(0,r.jsx)(n.code,{children:"expr.subs({})"}),") did not work."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#60"})," Correctly parse multi-char symbols with underscore, i.e.\n",(0,r.jsx)(n.code,{children:"\\mathrm{V_a}"})]}),"\n",(0,r.jsx)(n.li,{children:"Parsing a number with repeating decimals and an exponent would drop the\nexponent."}),"\n",(0,r.jsxs)(n.li,{children:["Correct calculation of complex square roots","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"\\sqrt{-49}"})," -> ",(0,r.jsx)(n.code,{children:"7i"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Calculations were not always performed as bignum in ",(0,r.jsx)(n.code,{children:'"auto"'})," numeric mode if\nthe precision was less than 15. Now, if the numeric mode is ",(0,r.jsx)(n.code,{children:'"auto"'}),",\ncalculations are done as bignum or complex numbers."]}),"\n",(0,r.jsxs)(n.li,{children:["If an identifier contained multiple strings of digits, it would not be\nrendered to LaTeX correctly, e.g. ",(0,r.jsx)(n.code,{children:"V20_20"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Correctly return ",(0,r.jsx)(n.code,{children:"isReal"})," for real numbers"]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"080-2022-10-02",children:["0.8.0 ",(0,r.jsx)(n.em,{children:"2022-10-02"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-13",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Corrected the implementation of ",(0,r.jsx)(n.code,{children:"expr.toJSON()"}),", ",(0,r.jsx)(n.code,{children:"expr.valueOf()"})," and added\nthe esoteric ",(0,r.jsx)(n.code,{children:"[Symbol.toPrimitive]()"})," method. These are used by JavaScript\nwhen interacting with other primitive types. A major change is that\n",(0,r.jsx)(n.code,{children:"expr.toJSON()"})," now returns an ",(0,r.jsx)(n.code,{children:"Expression"})," as an object literal, and not a\nstring serialization of the ",(0,r.jsx)(n.code,{children:"Expression"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:['Changed from "decimal" to "bignum". "Decimal" is a confusing name, since it is\nused to represent both integers and floating point numbers. Its key\ncharacteristic is that it is an arbitrary precision number, aka "bignum". This\naffects ',(0,r.jsx)(n.code,{children:"ce.numericMode"})," which now uses ",(0,r.jsx)(n.code,{children:"bignum"})," instead of\n",(0,r.jsx)(n.code,{children:"decimal', "}),"expr.decimalValue",(0,r.jsx)(n.code,{children:"->"}),"expr.bignumValue",(0,r.jsx)(n.code,{children:", "}),"decimalValue()",(0,r.jsx)(n.code,{children:"-> "}),"bignumValue()`"]}),"\n"]}),"\n"]}),(0,r.jsx)(n.h3,{id:"bugs-fixed-2",children:"Bugs Fixed"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Numerical evaluation of expressions containing complex numbers when in\n",(0,r.jsx)(n.code,{children:"decimal"})," or ",(0,r.jsx)(n.code,{children:"auto"})," mode produced incorrect results. Example: ",(0,r.jsx)(n.code,{children:"e^{i\\\\pi}"})]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"070-2022-09-30",children:["0.7.0 ",(0,r.jsx)(n.em,{children:"2022-09-30"})]}),(0,r.jsx)(n.h3,{id:"breaking-changes-14",children:"Breaking Changes"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"ce.latexOptions.preserveLatex"})," default value is now ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.li,{children:["The first argument of the ",(0,r.jsx)(n.code,{children:'["Error"]'})," expression (default value) has been\ndropped. The first argument is now an error code, either as a string or an\n",(0,r.jsx)(n.code,{children:'["ErrorCode"]'})," expression."]}),"\n"]}),(0,r.jsx)(n.h3,{id:"features",children:"Features"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Much improved LaTeX parser, in particular when parsing invalid LaTeX. The\nparser now avoids throwing, but will return a partial expression with\n",(0,r.jsx)(n.code,{children:'["Error"]'})," subexpressions indicating where the problems were."]}),"\n",(0,r.jsx)(n.li,{children:"Implemented new domain computation system (similar to type systems in\nprogramming languages)"}),"\n",(0,r.jsx)(n.li,{children:"Added support for multiple signatures per function (ad-hoc polymorphism)"}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"FixedPoint"}),", ",(0,r.jsx)(n.code,{children:"Loop"}),", ",(0,r.jsx)(n.code,{children:"Product"}),", ",(0,r.jsx)(n.code,{children:"Sum"}),", ",(0,r.jsx)(n.code,{children:"Break"}),", ",(0,r.jsx)(n.code,{children:"Continue"}),", ",(0,r.jsx)(n.code,{children:"Block"}),",\n",(0,r.jsx)(n.code,{children:"If"}),", ",(0,r.jsx)(n.code,{children:"Let"}),", ",(0,r.jsx)(n.code,{children:"Set"}),", ",(0,r.jsx)(n.code,{children:"Function"}),", ",(0,r.jsx)(n.code,{children:"Apply"}),", ",(0,r.jsx)(n.code,{children:"Return"})]}),"\n",(0,r.jsxs)(n.li,{children:["Added ",(0,r.jsx)(n.code,{children:"Min"}),", ",(0,r.jsx)(n.code,{children:"Max"}),", ",(0,r.jsx)(n.code,{children:"Clamp"})]}),"\n",(0,r.jsxs)(n.li,{children:["Parsing of ",(0,r.jsx)(n.code,{children:"\\sum"}),", ",(0,r.jsx)(n.code,{children:"\\prod"}),", ",(0,r.jsx)(n.code,{children:"\\int"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Added parsing of log functions, ",(0,r.jsx)(n.code,{children:"\\lb"}),", ",(0,r.jsx)(n.code,{children:"\\ln"}),", ",(0,r.jsx)(n.code,{children:"\\ln_{10}"}),", ",(0,r.jsx)(n.code,{children:"\\ln_2"}),", etc..."]}),"\n",(0,r.jsxs)(n.li,{children:["Added\n",(0,r.jsx)(n.code,{children:"expr."}),"subexpressions",(0,r.jsx)(n.code,{children:", "}),"expr.getSubexpressions()",(0,r.jsx)(n.code,{children:", "}),"expr.errors",(0,r.jsx)(n.code,{children:", "}),"expr.symbols",(0,r.jsx)(n.code,{children:", "}),"expr.isValid`."]}),"\n",(0,r.jsxs)(n.li,{children:["Symbols can now be used to represent functions, i.e. ",(0,r.jsx)(n.code,{children:"ce.box('Sin').domain"}),"\ncorrectly returns ",(0,r.jsx)(n.code,{children:'["Domain", "Function"]'}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Correctly handle rational numbers with a numerator or denominator outside the\nrange of a 64-bit float."}),"\n",(0,r.jsxs)(n.li,{children:["Instead of a ",(0,r.jsx)(n.code,{children:"Missing"})," symbol an ",(0,r.jsx)(n.code,{children:'["Error", "\'missing\'"]'})," expression is used."]}),"\n",(0,r.jsx)(n.li,{children:"Name binding is now done lazily"}),"\n",(0,r.jsxs)(n.li,{children:["Correctly handle MathJSON numbers with repeating decimals, e.g. ",(0,r.jsx)(n.code,{children:"1.(3)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Correctly evaluate inverse functions, e.g. ",(0,r.jsx)(n.code,{children:"ce.parse('\\\\sin^{-1}(.5)).N()"})]}),"\n",(0,r.jsx)(n.li,{children:"Fixed some LaTeX serialization issues"}),"\n"]}),(0,r.jsxs)(n.p,{children:["Read more at\n",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/reference/core/",children:"Core Reference"})," and\n[Arithmetic Reference] (",(0,r.jsx)(n.a,{href:"https://cortexjs.io/compute-engine/reference/arithmetic/",children:"https://cortexjs.io/compute-engine/reference/arithmetic/"}),")"]}),(0,r.jsx)(n.h3,{id:"bugs-fixed-3",children:"Bugs Fixed"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#43"})," If the input of ",(0,r.jsx)(n.code,{children:"ce.parse()"})," is an empty string, return an empty\nstring for ",(0,r.jsx)(n.code,{children:"expr.latex"})," or ",(0,r.jsx)(n.code,{children:"expr.json.latex"}),": that is, ensure verbatim LaTeX\nround-tripping"]}),"\n",(0,r.jsxs)(n.li,{children:["Evaluating some functions, such as ",(0,r.jsx)(n.code,{children:"\\arccos"})," would result in a crash"]}),"\n",(0,r.jsxs)(n.li,{children:["Correctly handle parsing of multi-token decimal markers, e.g. ",(0,r.jsx)(n.code,{children:"{,}"})]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"060-2022-04-18",children:["0.6.0 ",(0,r.jsx)(n.em,{children:"2022-04-18"})]}),(0,r.jsx)(n.h3,{id:"improvements-14",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Parse more cases of tabular environments"}),"\n",(0,r.jsx)(n.li,{children:"Handle simplify and evaluate of inert functions by default"}),"\n",(0,r.jsx)(n.li,{children:"Avoid unnecessary wrapping of functions when serializing LaTeX"}),"\n",(0,r.jsxs)(n.li,{children:["Parse arguments of LaTeX commands (e.g. ",(0,r.jsx)(n.code,{children:"\\vec{}"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#42"})," Export static ",(0,r.jsx)(n.code,{children:"ComputeEngine.getLatexDictionary"})]}),"\n",(0,r.jsxs)(n.li,{children:["Parse multi-character constants and variables, e.g. ",(0,r.jsx)(n.code,{children:"\\mathit{speed}"})," and\n",(0,r.jsx)(n.code,{children:"\\mathrm{radius}"})]}),"\n",(0,r.jsxs)(n.li,{children:["Parse/serialize some LaTeX styling commands: ",(0,r.jsx)(n.code,{children:"\\displaystyle"}),", ",(0,r.jsx)(n.code,{children:"\\tiny"})," and more"]}),"\n"]}),(0,r.jsxs)(n.h2,{id:"050-2022-04-05",children:["0.5.0 ",(0,r.jsx)(n.em,{children:"2022-04-05"})]}),(0,r.jsx)(n.h3,{id:"improvements-15",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Correctly parse tabular content (for example in\n",(0,r.jsx)(n.code,{children:"\\begin{pmatrix}...\\end{pmatrix}"})]}),"\n",(0,r.jsxs)(n.li,{children:["Correctly parse LaTeX groups, i.e. ",(0,r.jsx)(n.code,{children:"{...}"})]}),"\n",(0,r.jsx)(n.li,{children:"Ensure constructible trigonometric values are canonical"}),"\n",(0,r.jsxs)(n.li,{children:["Correct and simplify evaluation loop for ",(0,r.jsx)(n.code,{children:"simplify()"}),", ",(0,r.jsx)(n.code,{children:"evaluate()"})," and ",(0,r.jsx)(n.code,{children:"N()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#41"})," Preserve the parsed LaTeX verbatim for top-level expressions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"#40"})," Correctly calculate the synthetic LaTeX metadata for numbers"]}),"\n",(0,r.jsx)(n.li,{children:"Only require Node LTS (16.14.2)"}),"\n",(0,r.jsx)(n.li,{children:"Improved documentation, including Dark Mode support"}),"\n"]}),(0,r.jsx)(n.h2,{id:"044",children:"0.4.4"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Release Date"}),": 2022-03-27"]}),(0,r.jsx)(n.h3,{id:"improvements-16",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Added option to specify custom LaTeX dictionaries in ",(0,r.jsx)(n.code,{children:"ComputeEngine"}),"\nconstructor"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.valueOf"})," returns rational numbers as ",(0,r.jsx)(n.code,{children:"[number, number]"})," when applicable"]}),"\n",(0,r.jsxs)(n.li,{children:["The non-ESM builds (",(0,r.jsx)(n.code,{children:"compute-engine.min.js"}),") now targets vintage JavaScript\nfor improved compatibility with outdated toolchains (e.g. Webpack 4) and\nenvironments. The ESM build (",(0,r.jsx)(n.code,{children:"compute-engine.min.esm.js"}),") targets evergreen\nJavaScript (currently ECMAScript 2020)."]}),"\n"]}),(0,r.jsx)(n.h2,{id:"043",children:"0.4.3"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Release Date"}),": 2022-03-21"]}),(0,r.jsx)(n.h3,{id:"transition-guide-from-042",children:"Transition Guide from 0.4.2"}),(0,r.jsx)(n.p,{children:"The API has changed substantially between 0.4.2 and 0.4.3, however adapting code\nto the new API is very straightforward."}),(0,r.jsxs)(n.p,{children:["The two major changes are the introduction of the ",(0,r.jsx)(n.code,{children:"BoxedExpression"})," class and\nthe removal of top level functions."]}),(0,r.jsx)(n.h3,{id:"boxed-expression",children:"Boxed Expression"}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"BoxedExpression"})," class is a immutable box (wrapper) that encapsulates a\nMathJSON ",(0,r.jsx)(n.code,{children:"Expression"}),". It provides some member functions that can be used to\nmanipulate the expression, for example ",(0,r.jsx)(n.code,{children:"expr.simplify()"})," or ",(0,r.jsx)(n.code,{children:"expr.evaluate()"}),"."]}),(0,r.jsxs)(n.p,{children:["The boxed expresson itself is immutable. For example, calling ",(0,r.jsx)(n.code,{children:"expr.simplify()"}),"\nwill return a new, simplified, expression, without modifying ",(0,r.jsx)(n.code,{children:"expr"}),"."]}),(0,r.jsxs)(n.p,{children:['To create a "boxed" expression from a "raw" MathJSON expression, use ',(0,r.jsx)(n.code,{children:"ce.box()"}),".\nTo create a boxed expression from a LaTeX string, use ",(0,r.jsx)(n.code,{children:"ce.parse()"}),"."]}),(0,r.jsxs)(n.p,{children:['To access the "raw" MathJSON expression, use the ',(0,r.jsx)(n.code,{children:"expr.json"})," property. To\nserialize the expression to LaTeX, use the ",(0,r.jsx)(n.code,{children:"expr.latex"})," property."]}),(0,r.jsxs)(n.p,{children:["The top level functions such as ",(0,r.jsx)(n.code,{children:"parse()"})," and ",(0,r.jsx)(n.code,{children:"evaluate()"})," are now member\nfunctions of the ",(0,r.jsx)(n.code,{children:"ComputeEngine"})," class or the ",(0,r.jsx)(n.code,{children:"BoxedExpression"})," class."]}),(0,r.jsxs)(n.p,{children:["There are additional member functions to examine the content of a boxed\nexpression. For example, ",(0,r.jsx)(n.code,{children:"expr.symbol"})," will return ",(0,r.jsx)(n.code,{children:"null"})," if the expression is\nnot a MathJSON symbol, otherwise it will return the name of the symbol as a\nstring. Similarly, ",(0,r.jsx)(n.code,{children:"expr.ops"})," return the arguments (operands) of a function,\n",(0,r.jsx)(n.code,{children:"expr.asFloat"})," return ",(0,r.jsx)(n.code,{children:"null"})," if the expression does not have a numeric value\nthat can be represented by a float, a ",(0,r.jsx)(n.code,{children:"number"})," otherwise, etc..."]}),(0,r.jsx)(n.h3,{id:"canonical-form",children:"Canonical Form"}),(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"expr.canonical"})," to obtain the canonical form of an expression rather than\nthe ",(0,r.jsx)(n.code,{children:"ce.format()"})," method."]}),(0,r.jsxs)(n.p,{children:["The canonical form is less aggressive in its attempt to simplify than what was\nperformed by ",(0,r.jsx)(n.code,{children:"ce.format()"}),"."]}),(0,r.jsxs)(n.p,{children:["The canonical form still accounts for distributive and associative functions,\nand will collapse some integer constants. However, in some cases it may be\nnecessary to invoke ",(0,r.jsx)(n.code,{children:"expr.simplify()"})," in order to get the same results as\n",(0,r.jsx)(n.code,{children:"ce.format(expr)"}),"."]}),(0,r.jsx)(n.h3,{id:"rational-and-division",children:"Rational and Division"}),(0,r.jsx)(n.p,{children:"In addition to machine floating points, arbitrary precision numbers and complex\nnumbers, the Compute Engine now also recognize and process rational numbers."}),(0,r.jsxs)(n.p,{children:["This is mostly an implementation detail, although you may see\n",(0,r.jsx)(n.code,{children:'["Rational", 3, 4]'}),", for example, in the value of a ",(0,r.jsx)(n.code,{children:"expr.json"})," property."]}),(0,r.jsxs)(n.p,{children:["If you do not want rational numbers represented in the value of the ",(0,r.jsx)(n.code,{children:".json"}),"\nproperty, you can exclude the ",(0,r.jsx)(n.code,{children:"Rational"})," function from the serialization of JSON\n(see below) in which case ",(0,r.jsx)(n.code,{children:"Divide"})," will be used instead."]}),(0,r.jsxs)(n.p,{children:["Note also that internally (as a result of boxing), ",(0,r.jsx)(n.code,{children:"Divide"})," is represented as a\nproduct of a power with a negative exponent. This makes some pattern detection\nand simplifications easier. However, when the ",(0,r.jsx)(n.code,{children:".json"})," property is accessed,\nproduct of powers with a negative exponents are converted to a ",(0,r.jsx)(n.code,{children:"Divide"}),", unless\nyou have included ",(0,r.jsx)(n.code,{children:"Divide"})," as an excluded function for serialization."]}),(0,r.jsxs)(n.p,{children:["Similarly, ",(0,r.jsx)(n.code,{children:"Subtract"})," is converted internally to ",(0,r.jsx)(n.code,{children:"Add"}),", but may be serialized\nunless excluded."]}),(0,r.jsx)(n.h3,{id:"parsing-and-serialization-customization",children:"Parsing and Serialization Customization"}),(0,r.jsxs)(n.p,{children:["Rather than using a separate instance of the ",(0,r.jsx)(n.code,{children:"LatexSyntax"})," class to customize\nthe parsing or serialization, use a ",(0,r.jsx)(n.code,{children:"ComputeEngine"})," instance and its\n",(0,r.jsx)(n.code,{children:"ce.parse()"})," method and the ",(0,r.jsx)(n.code,{children:"expr.latex"})," property."]}),(0,r.jsxs)(n.p,{children:["Custom dictionaries (to parse/serialize custom LaTeX syntax) can be passed as an\nargument to the ",(0,r.jsx)(n.code,{children:"ComputeEngine"})," constructor."]}),(0,r.jsxs)(n.p,{children:["For more advanced customizations, use ",(0,r.jsx)(n.code,{children:"ce.latexOptions = {...}"}),". For example, to\nchange the formatting options of numbers, how the invisible operator is\ninterpreted, how unknown commands and symbols are interpreted, etc..."]}),(0,r.jsxs)(n.p,{children:['Note that there are also now options available for the "serialization" to\nMathJSON, i.e. when the ',(0,r.jsx)(n.code,{children:"expr.json"})," property is used. It is possible to control\nfor example if metadata should be included, if shorthand forms are allowed, or\nwhether some functions should be avoided (",(0,r.jsx)(n.code,{children:"Divide"}),", ",(0,r.jsx)(n.code,{children:"Sqrt"}),", ",(0,r.jsx)(n.code,{children:"Subtract"}),", etc...).\nThese options can be set using ",(0,r.jsx)(n.code,{children:"ce.jsonSerializationOptions = {...}"}),"."]}),(0,r.jsx)(n.h3,{id:"comparing-expressions",children:"Comparing Expressions"}),(0,r.jsx)(n.p,{children:"There are more options to compare two expressions."}),(0,r.jsxs)(n.p,{children:["Previously, ",(0,r.jsx)(n.code,{children:"match()"})," could be used to check if one expression matched another\nas a pattern."]}),(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"match()"})," returned ",(0,r.jsx)(n.code,{children:"null"}),", the first expression could not be matched to the\nsecond. If it returned an object literal, the two expressions matched."]}),(0,r.jsxs)(n.p,{children:["The top-level ",(0,r.jsx)(n.code,{children:"match()"})," function is replaced by the ",(0,r.jsx)(n.code,{children:"expr.match()"})," method.\nHowever, there are two other options that may offer better results:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.isSame(otherExpr)"})," return true if ",(0,r.jsx)(n.code,{children:"expr"})," and ",(0,r.jsx)(n.code,{children:"otherExpr"})," are\nstructurally identical. Structural identity is closely related to the concept\nof pattern matching, that is ",(0,r.jsx)(n.code,{children:'["Add", 1, "x"]'})," and ",(0,r.jsx)(n.code,{children:'["Add", "x", 1]'})," are not\nthe same, since the order of the arguments is different. It is useful for\nexample to compare some input to an answer that is expected to have a specific\nform."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expr.isEqual(otherExpr)"})," return true if ",(0,r.jsx)(n.code,{children:"expr"})," and ",(0,r.jsx)(n.code,{children:"otherExpr"})," are\nmathematically identical. For example ",(0,r.jsx)(n.code,{children:'ce.parse("1+1").isEqual(ce.parse("2"))'}),"\nwill return true. This is useful if the specific structure of the expression\nis not important."]}),"\n"]}),(0,r.jsxs)(n.p,{children:["It is also possible to evaluate a boolean expression with a relational operator,\nsuch as ",(0,r.jsx)(n.code,{children:"Equal"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'console.log(ce.box(["Equal", expr, 2]).evaluate().symbol);\n// -> "True"\n\nconsole.log(expr.isEqual(ce.box(2)));\n// -> true\n'})}),(0,r.jsx)(n.h3,{id:"before--after",children:"Before / After"}),(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Before"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"After"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:'expr = ["Add", 1, 2]'})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:'expr = ce.box(["Add", 1, 2])'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"expr = ce.evaluate(expr)"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"expr = expr.evaluate()"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"console.log(expr)"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"console.log(expr.json)"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:'expr = new LatexSyntax().parse("x^2+1")'})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:'expr = ce.parse("x^2+1")'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"new LatexSyntax().serialize(expr)"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"expr.latex"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"ce.simplify(expr)"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"expr.simplify()"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"await ce.evaluate(expr)"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"expr.evaluate()"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"ce.N(expr)"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"expr.N()"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"ce.domain(expr)"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"expr.domain"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"ce.format(expr...)"})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,r.jsx)(n.code,{children:"expr.canonical"})," ",(0,r.jsx)("br",{})," ",(0,r.jsx)(n.code,{children:"expr.simplify()"})]})]})]})]}),(0,r.jsx)(n.h2,{id:"030",children:"0.3.0"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Release Date"}),": 2021-06-18"]}),(0,r.jsx)(n.h3,{id:"improvements-17",children:"Improvements"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In LaTeX, parse ",(0,r.jsx)(n.code,{children:"\\operatorname{foo}"})," as the MathJSON symbol ",(0,r.jsx)(n.code,{children:'"foo"'}),"."]}),"\n"]})]})]})}function x(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},7223:(e,n,s)=>{s.d(n,{A:()=>r});var i=s(4848);function r(e){let{children:n}=e;return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("style",{children:"\n    .markdown h2 {\n      align-items: center;\n      border-bottom: 2px solid var(--blue-600);\n      color: var(--blue-600);\n      display: flex;\n    }      \n\n\n    .markdown h2 em {\n      margin-left: auto;\n      color: var(--blue-600);\n      display: block;\n      float: right;\n      font-size: .6em;\n      font-style: normal;\n      font-weight: 400\n    }\n  \n    "}),n]})}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var i=s(6540);const r={},l=i.createContext(r);function c(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);