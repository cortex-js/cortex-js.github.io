"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[6135],{860:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"mathfield/fill-in-the-blank","title":"Fill-in-the-Blank","description":"To have one or more portions of a mathfield editable, while the rest is","source":"@site/docs/mathfield/16-fill-in-the-blank.md","sourceDirName":"mathfield","slug":"/mathfield/guides/fill-in-the-blank/","permalink":"/mathfield/guides/fill-in-the-blank/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1731785970000,"sidebarPosition":16,"frontMatter":{"date":"Last Modified","title":"Fill-in-the-Blank","slug":"/mathfield/guides/fill-in-the-blank/"},"sidebar":"docSidebar","previous":{"title":"Keybindings and Inline Shortcuts","permalink":"/mathfield/guides/shortcuts/"},"next":{"title":"Commands","permalink":"/mathfield/guides/commands/"}}');var r=t(4848),s=t(8453);const i={date:"Last Modified",title:"Fill-in-the-Blank",slug:"/mathfield/guides/fill-in-the-blank/"},a=void 0,c={},l=[{value:"Example",id:"example",level:2},{value:"Accessing all the Prompts",id:"accessing-all-the-prompts",level:2},{value:"Accessing the Value of a Prompt",id:"accessing-the-value-of-a-prompt",level:2},{value:"Accessing the State of a Prompt",id:"accessing-the-state-of-a-prompt",level:2}];function d(e){const n={code:"code","code-playground":"code-playground",div:"div",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},t=n["code-playground"],{ReadMore:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ReadMore",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To have one or more portions of a mathfield editable, while the rest is\nread-only"}),", use a ",(0,r.jsx)(n.code,{children:"readonly"})," mathfield, and the ",(0,r.jsx)(n.code,{children:"\\placeholder[]{}"})," command."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<math-field readonly>\n  x=\\placeholder[answer]{}\n</math-field>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This feature is called ",(0,r.jsx)(n.strong,{children:'"fill-in-the-blank"'}),"."]}),"\n",(0,r.jsx)(n.p,{children:"It's often used to prompt a student to provide an answer to a quiz by\nfilling in portions of a formula."}),"\n",(0,r.jsxs)(n.p,{children:["The first argument of the ",(0,r.jsx)(n.code,{children:"\\placeholder"})," command, i.e. ",(0,r.jsx)(n.code,{children:"[answer]"})," in the\nexample above, is the identifier of the placeholder. It can be any string\nthat does not contain spaces or special characters. The identifier\nindicates that the placeholder is editable, and it is used\nto access the value of the placeholder."]}),"\n",(0,r.jsxs)(n.p,{children:["The main argument of the ",(0,r.jsx)(n.code,{children:"\\placeholder"})," command, i.e. the one in ",(0,r.jsx)(n.code,{children:"{}"})," is the\nvalue of the prompt. You can leave it blank, but the brackets must be present."]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:"In the example below a student is asked to fill in the blanks to provide\na reduced fraction."}),"\n",(0,r.jsxs)(n.p,{children:["We check the answer by listening to the ",(0,r.jsx)(n.code,{children:"input"})," event of the mathfield,\nand comparing the value of the prompts to the expected answer.\nWe also change the state of the prompts to indicate whether the answer\nwas correct or not."]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsxs)(n.div,{slot:"html",children:['<math-field readonly id=mf  style="font-size:2em">\n',"  ","\\frac{15}{12}= \\frac\n","    ","{\\placeholder[numerator]{?}}\n","    ","{\\placeholder[denominator]{?}}\n","</math-field>\n"]}),(0,r.jsxs)(n.div,{slot:"javascript",children:["const mf = document.getElementById('mf');\n","//\n","mf.addEventListener('input', (ev) => {\n","  ","const num = mf.getPromptValue('numerator');\n","  ","const den = mf.getPromptValue('denominator');\n","//\n","  ","mf.setPromptState('numerator', num === \"5\" ? 'correct' : 'incorrect');\n","  ","mf.setPromptState('denominator', den === \"4\" ? 'correct' : 'incorrect');\n","//\n","  ","console.clear();\n","  ",'if (num === "5" && den === "4")\n',"    ","console.info('Correct!');\n","   ","else\n","    ","console.info('Incorrect!');\n","});\n","\n"]})]}),"\n",(0,r.jsxs)(n.p,{children:["The value returned by ",(0,r.jsx)(n.code,{children:"mf.getPromptValue()"})," is a LaTeX string. If you need to\nuse the value in a computation, you will need to convert it to a number.\nFor example, ",(0,r.jsx)(n.code,{children:"parseInt(mf.getPromptValue('numerator'))"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"You can also use the Compute Engine to evaluate the value of the prompt.\nThis allows you to check the answer using more sophisticated symbolic\ncomputation."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsxs)(n.div,{slot:"html",children:['<math-field readonly id=mf  style="font-size:2em">\n',"  ","(x+1)(x-1) = \\placeholder[answer]{?}\n","</math-field>\n"]}),(0,r.jsxs)(n.div,{slot:"javascript",children:['const mf = document.getElementById("mf");\n',"//\n","let typingTimer;  // Timer identifier\n","//\n","// On input, start the countdown\n",'mf.addEventListener("input", () => {\n',"  ","clearTimeout(typingTimer);\n","  ","typingTimer = setTimeout(checkAnswer, 2000);\n","});\n","//\n","function checkAnswer () {\n","  ","const ce = MathfieldElement.computeEngine;\n","  ",'const answer = ce.parse(mf.getPromptValue("answer"));\n',"  ",'const correctAnswer = ce.parse("x^2 - 1");\n',"//\n","  ","const ok = answer.isSame(correctAnswer);\n","//\n","  ",'console.info(ok ? "Correct!" : "Incorrect!");\n',"}\n","\n"]})]}),"\n",(0,r.jsx)(n.p,{children:"In the example above, we use the Compute Engine to parse the answer provided\nby the student, and compare it to the correct answer. The Compute Engine\ncan also be used to evaluate the answer, or to simplify it."}),"\n",(0,r.jsx)(n.p,{children:"We use a timer to wait for the student to finish typing before checking\nthe answer. This avoids checking the answer after every keystroke, which\nwould be distracting for the student."}),"\n",(0,r.jsxs)(n.p,{children:["Because we are using ",(0,r.jsx)(n.code,{children:"isSame()"})," to compare the answer, the student can\nprovide the answer in a different form, for example ",(0,r.jsx)(n.code,{children:"x^2 - 1"})," or ",(0,r.jsx)(n.code,{children:"-1 + x^2"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"If you want a more strict comparison, you can use the non-canonical form\nof the answer, i.e."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:"example",children:'const answer = ce.parse(\n    mf.getPromptValue("answer"), { canonical: false });\nconst correctAnswer = ce.parse("x^2 - 1", { canonical: false });\n'})}),"\n",(0,r.jsx)(o,{path:"/compute-engine/guides/symbolic-computing/#comparing-expressions",children:(0,r.jsxs)(n.p,{children:["Read more about ",(0,r.jsx)(n.strong,{children:"Comparing Expressions"})," using the Compute Engine."]})}),"\n",(0,r.jsx)(n.h2,{id:"accessing-all-the-prompts",children:"Accessing all the Prompts"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To get a list of all the prompts in a mathfield"}),", use\n",(0,r.jsx)(n.code,{children:"mf.getPrompts()"}),". It returns an array of identifiers, or\nan empty array if there are no prompts."]}),"\n",(0,r.jsx)(n.h2,{id:"accessing-the-value-of-a-prompt",children:"Accessing the Value of a Prompt"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To access the value of a prompt"}),", use ",(0,r.jsx)(n.code,{children:"mf.getPromptValue()"})," and ",(0,r.jsx)(n.code,{children:"mf.setPromptValue()"}),". The first argument of these functions is the id of the prompt. The optional second\nargument of ",(0,r.jsx)(n.code,{children:"getPromptValue()"})," is the same as ",(0,r.jsx)(n.code,{children:"mf.getValue()"})," and can be used to customize the output format."]}),"\n",(0,r.jsx)(n.h2,{id:"accessing-the-state-of-a-prompt",children:"Accessing the State of a Prompt"}),"\n",(0,r.jsx)(n.p,{children:"A prompt can be locked or unlocked. When locked, it is not editable."}),"\n",(0,r.jsx)(n.p,{children:"A prompt can also be either in a correct or incorrect state.The prompt renders accordingly, which can be used to indicate that a provided answer was correct or incorrect."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"To change the lock state of a prompt"}),", use ",(0,r.jsx)(n.code,{children:"mf.setPromptState()"})," and ",(0,r.jsx)(n.code,{children:"mf.getPromptState()"})," to read the\ncurrent state of the prompt."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);