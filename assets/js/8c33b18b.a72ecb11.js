"use strict";(self.webpackChunkcortexjs_io=self.webpackChunkcortexjs_io||[]).push([[7763],{9:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"compute-engine/guide-latex-syntax","title":"Parsing and Serializing LaTeX","description":"The Compute Engine manipulates MathJSON expressions. It can also convert LaTeX strings to","source":"@site/docs/compute-engine/07-guide-latex-syntax.md","sourceDirName":"compute-engine","slug":"/compute-engine/guides/latex-syntax/","permalink":"/compute-engine/guides/latex-syntax/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1738945206000,"sidebarPosition":7,"frontMatter":{"title":"Parsing and Serializing LaTeX","sidebar_label":"LaTeX Syntax","slug":"/compute-engine/guides/latex-syntax/","date":"Last Modified"},"sidebar":"docSidebar","previous":{"title":"Custom Functions and Symbols","permalink":"/compute-engine/guides/augmenting/"},"next":{"title":"Types","permalink":"/compute-engine/guides/types/"}}');var i=s(4848),r=s(8453);const l={title:"Parsing and Serializing LaTeX",sidebar_label:"LaTeX Syntax",slug:"/compute-engine/guides/latex-syntax/",date:"Last Modified"},d=void 0,c={},a=[{value:"The Compute Engine Natural Parser",id:"the-compute-engine-natural-parser",level:2},{value:"Serializing to LaTeX",id:"serializing-to-latex",level:2},{value:"Customizing Parsing",id:"customizing-parsing",level:2},{value:"Customizing Parsing of Numbers",id:"customizing-parsing-of-numbers",level:3},{value:"Other Parsing Options",id:"other-parsing-options",level:3},{value:"<code>getIdentifierType</code>",id:"getidentifiertype",level:4},{value:"<code>parseUnexpectedToken</code>",id:"parseunexpectedtoken",level:4},{value:"Customizing Serialization",id:"customizing-serialization",level:2},{value:"Number Formatting",id:"number-formatting",level:3},{value:"Customizing the Decimal Separator",id:"customizing-the-decimal-separator",level:3},{value:"Special Numbers and Symbols",id:"special-numbers-and-symbols",level:3},{value:"Customizing the Serialization Style",id:"customizing-the-serialization-style",level:3},{value:"Function Application",id:"function-application",level:4},{value:"Group",id:"group",level:4},{value:"Root",id:"root",level:4},{value:"Fraction",id:"fraction",level:4},{value:"Logic",id:"logic",level:4},{value:"Power",id:"power",level:4},{value:"Numeric Sets",id:"numeric-sets",level:4},{value:"Customizing the LaTeX Dictionary",id:"customizing-the-latex-dictionary",level:2},{value:"LaTeX Dictionary Entries",id:"latex-dictionary-entries",level:3},{value:"Expressions",id:"expressions",level:4},{value:"Functions",id:"functions",level:4},{value:"Operators: prefix, infix, postfix",id:"operators-prefix-infix-postfix",level:4},{value:"Environment",id:"environment",level:4},{value:"Matchfix",id:"matchfix",level:4},{value:"Parsing",id:"parsing",level:3},{value:"Serializing",id:"serializing",level:3},{value:"Using a New Function with a Mathfield",id:"using-a-new-function-with-a-mathfield",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code","code-playground":"code-playground",div:"div",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},s=n["code-playground"],{Icon:t,Intro:l,ReadMore:d}=n;return t||x("Icon",!0),l||x("Intro",!0),d||x("ReadMore",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l,{children:(0,i.jsxs)(n.p,{children:["The Compute Engine manipulates MathJSON expressions. It can also convert LaTeX strings to\nMathJSON expressions (",(0,i.jsx)(n.strong,{children:"parsing"}),") and output MathJSON expressions as LaTeX\nstring (",(0,i.jsx)(n.strong,{children:"serializing"}),")"]})}),"\n",(0,i.jsx)(n.admonition,{title:"Note",type:"info",children:(0,i.jsxs)(n.p,{children:["In this documentation, functions such as ",(0,i.jsx)(n.code,{children:"ce.box()"})," and ",(0,i.jsx)(n.code,{children:"ce.parse()"})," require a\n",(0,i.jsx)(n.code,{children:"ComputeEngine"})," instance which is denoted by a ",(0,i.jsx)(n.code,{children:"ce."})," prefix.",(0,i.jsx)("br",{}),"Functions that\napply to a boxed expression, such as ",(0,i.jsx)(n.code,{children:"expr.simplify()"})," are denoted with a\n",(0,i.jsx)(n.code,{children:"expr."})," prefix."]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To create a new instance of the Compute Engine"}),", use the\n",(0,i.jsx)(n.code,{children:"new ComputeEngine()"})," constructor."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const ce = new ComputeEngine();\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To input math using an interactive mathfield"}),", use the ",(0,i.jsx)(n.a,{href:"/mathfield/",children:"Mathfield"})," library."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"<math-field>"})," DOM element works like a ",(0,i.jsx)(n.code,{children:"<textarea>"})," in HTML, but for\nmath. It provides its content as a LaTeX string, ready to be used with the\nCompute Engine."]}),"\n",(0,i.jsx)(d,{path:"/mathfield/",children:(0,i.jsxs)(n.p,{children:["Read more about the ",(0,i.jsx)(n.strong,{children:"mathfield element"}),(0,i.jsx)(t,{name:"chevron-right-bold"})]})}),"\n",(0,i.jsxs)(n.p,{children:["All the mathfields on the page share a Compute Engine instance, which is\navailable as ",(0,i.jsx)(n.code,{children:"MathfieldElement.computeEngine"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const ce = MathfieldElement.computeEngine;\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can associate a customized compute engine with the mathfields in the\ndocument:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const ce = new ComputeEngine();\nMathfieldElement.computeEngine = ce;\nconsole.log(mfe.expression.json);\n"})}),"\n",(0,i.jsx)("hr",{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To parse a LaTeX string as a MathJSON expression"}),", call the ",(0,i.jsx)(n.code,{children:"ce.parse()"}),"\nfunction."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'console.log(ce.parse("5x + 1").json);\n// \u2794  ["Add", ["Multiply", 5, "x"], 1]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["By default, ",(0,i.jsx)(n.code,{children:"ce.parse()"})," return a\n",(0,i.jsx)(n.a,{href:"/compute-engine/guides/canonical-form/",children:"canonical expression"}),". To get a\nnon-canonical expression instead, use the ",(0,i.jsx)(n.code,{children:"{canonical: false}"})," option: The\nnon-canonical form is closer to the literal LaTeX input."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'ce.parse("\\\\frac{7}{-4}").json;\n// \u2794  ["Rational", -7, 4]\n\nce.parse("\\\\frac{7}{-4}", { canonical: false }).json;\n// \u2794  ["Divide", 7, -4]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"the-compute-engine-natural-parser",children:"The Compute Engine Natural Parser"}),"\n",(0,i.jsx)(n.p,{children:"Unlike a programming language, mathematical notation is surprisingly ambiguous\nand full of idiosyncrasies. Mathematicians frequently invent new notations, or\nhave their own preferences to represent even common concepts."}),"\n",(0,i.jsx)(n.p,{children:"The Compute Engine Natural Parser interprets expressions using the notation you\nare already familiar with. Write as you would on a blackboard, and get back a\nsemantic representation as an expression ready to be processed."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"LaTeX"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"MathJSON"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsxs)("big",{children:[(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\sin 3t + \\cos 2t"})," "]}),(0,i.jsx)("br",{}),(0,i.jsx)(n.code,{children:"\\sin 3t + \\cos 2t"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'["Add", ["Sin", ["Multiply", 3, "t"]], ["Cos", ["Multiply", 2, "t"]]]'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)("big",{children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\int \\frac{dx}{x}"})}),(0,i.jsx)("br",{}),(0,i.jsx)(n.code,{children:"\\int \\frac{dx}{x}"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'["Integrate", ["Divide", 1, "x"], "x"]'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsxs)("big",{children:[(0,i.jsx)(n.code,{className:"language-math math-inline",children:"123.4(567)"})," "]}),(0,i.jsx)("br",{}),(0,i.jsx)(n.code,{children:"123.4(567)"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"123.4(567)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsxs)("big",{children:[(0,i.jsx)(n.code,{className:"language-math math-inline",children:"123.4\\overline{567}"})," "]}),(0,i.jsx)("br",{}),(0,i.jsx)(n.code,{children:"123.4\\overline{567}"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"123.4(567)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsxs)("big",{children:[(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\vert a+\\vert b\\vert+c\\vert"})," "]}),(0,i.jsx)("br",{}),(0,i.jsx)(n.code,{children:"|a+|b|+c| "})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'["Abs", ["Add", "a", ["Abs", "b"], "c"]]'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsxs)("big",{children:[(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\vert\\vert a\\vert\\vert+\\vert b\\vert"})," "]}),(0,i.jsx)("br",{}),(0,i.jsx)(n.code,{children:"||a||+|b|"})]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'["Add", ["Norm", "a"], ["Abs", "b"]]'})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["The Compute Engine Natural Parser will apply maximum effort to parse the input\nstring as LaTeX, even if it includes errors. If errors are encountered, the\nresulting expression will have its ",(0,i.jsx)(n.code,{children:"expr.isValid"})," property set to ",(0,i.jsx)(n.code,{children:"false"}),". An\n",(0,i.jsx)(n.code,{children:'["Error"]'})," expression will be produced where a problem was encountered. To get\nthe list of all the errors in an expression, use ",(0,i.jsx)(n.code,{children:"expr.errors"})," which will return\nan array of ",(0,i.jsx)(n.code,{children:'["Error"]'})," expressions."]}),"\n",(0,i.jsx)(d,{path:"/compute-engine/guides/expressions/#errors",children:(0,i.jsxs)(n.p,{children:["Read more about the ",(0,i.jsx)(n.strong,{children:"errors"})," that can be returned. ",(0,i.jsx)(t,{name:"chevron-right-bold"})]})}),"\n",(0,i.jsx)(n.h2,{id:"serializing-to-latex",children:"Serializing to LaTeX"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To serialize an expression to a LaTeX string"}),", read the ",(0,i.jsx)(n.code,{children:"expr.latex"}),"\nproperty."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'console.log(ce.box(["Add", ["Power", "x", 3], 2]).latex);\n// \u2794  "x^3 + 2"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"customizing-parsing",children:"Customizing Parsing"}),"\n",(0,i.jsxs)(n.p,{children:["The LaTeX parsing can be customized by providing a ",(0,i.jsx)(n.code,{children:"ParseLatexOptions"})," object as\nthe second argument to the ",(0,i.jsx)(n.code,{children:"ce.parse()"})," function."]}),"\n",(0,i.jsx)(n.h3,{id:"customizing-parsing-of-numbers",children:"Customizing Parsing of Numbers"}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"#number-formatting",children:"Number Formatting"})," section for details on how to\ncustomize the parsing of numbers. Most of the same options are available for\nparsing as for serialization."]}),"\n",(0,i.jsx)(n.h3,{id:"other-parsing-options",children:"Other Parsing Options"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Key"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"skipSpace"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["If ",(0,i.jsx)(n.code,{children:"true"}),", ignore space characters in a math zone. Default is ",(0,i.jsx)(n.code,{children:"true"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"parseNumbers"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["When parsing a decimal number, e.g. ",(0,i.jsx)(n.code,{children:"3.1415"}),":",(0,i.jsx)("br",{}),"- ",(0,i.jsx)(n.code,{children:'"auto"'})," or ",(0,i.jsx)(n.code,{children:'"decimal"'}),": if a decimal number, parse it as an approximate   decimal number with a whole part and a fractional part",(0,i.jsx)("br",{})," - ",(0,i.jsx)(n.code,{children:'"rational"'}),": if a decimal number, parse it as an exact rational number with a numerator  and a denominator. If not a decimal number, parse it as a regular number.",(0,i.jsx)("br",{}),"- ",(0,i.jsx)(n.code,{children:'"never"'}),": do not parse numbers, instead return each token making up the number (minus sign, digits, decimal marker, etc...).",(0,i.jsx)("br",{}),(0,i.jsx)("br",{})," ",(0,i.jsx)(n.strong,{children:"Note"}),": if the number includes repeating digits (e.g. ",(0,i.jsx)(n.code,{children:"1.33(333)"}),"), it will be parsed as a decimal number even if this setting is ",(0,i.jsx)(n.code,{children:'"rational"'}),". ",(0,i.jsx)(n.strong,{children:"Default"}),": ",(0,i.jsx)(n.code,{children:'"auto"'})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"preserveLatex"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["If ",(0,i.jsx)(n.code,{children:"true"}),", the expression will be decorated with the LaTeX fragments corresponding to each element of the expression. The top-level expression, that is the one returned by ",(0,i.jsx)(n.code,{children:"parse()"}),", will include the verbatim LaTeX input that was parsed. The sub-expressions may contain a slightly different LaTeX, for example with consecutive spaces replaced by one, with comments removed, and with some low-level LaTeX commands replaced, for example ",(0,i.jsx)(n.code,{children:"\\egroup"})," and ",(0,i.jsx)(n.code,{children:"\\bgroup"}),". ",(0,i.jsx)(n.strong,{children:"Default:"})," ",(0,i.jsx)(n.code,{children:"false"})]})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"getidentifiertype",children:(0,i.jsx)(n.code,{children:"getIdentifierType"})}),"\n",(0,i.jsx)(n.p,{children:"This handler is invoked when the parser encounters an identifier\nthat has not yet been declared."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"identifier"})," argument is a ",(0,i.jsx)(n.a,{href:"/math-json/#identifiers",children:"valid identifier"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The handler can return:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"variable"'}),": the identifier is a variable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"function"'}),": the identifier is a function name. If an apply\nfunction operator (typically, parentheses) follow, they will be parsed\nas arguments to the function."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"unknown"'}),": the identifier is not recognized."]}),"\n"]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.info(ce.parse("f(x)", {\n',"  ","getIdentifierType: (identifier) => {\n","    ",'if (identifier === "f") {\n',"      ",'return "function";\n',"    ","}\n","    ",'return "unknown";\n',"  ","},\n","}).json);\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"parseunexpectedtoken",children:(0,i.jsx)(n.code,{children:"parseUnexpectedToken"})}),"\n",(0,i.jsx)(n.p,{children:"This handler is invoked when the parser encounters a token that it does not\nknow how to handle."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"lhs"})," argument is the previous token, if any."]}),"\n",(0,i.jsxs)(n.p,{children:["The handler can access the unexpected token with ",(0,i.jsx)(n.code,{children:"parser.peek"}),". If\nit is a token that should be recognized, the handler can consume it\nby calling ",(0,i.jsx)(n.code,{children:"parser.nextToken()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The handler should return an expression or ",(0,i.jsx)(n.code,{children:"null"})," if the token is not\nrecognized."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.info(ce.parse("3\\\\frac{1}{\\\\foo}", {\n',"  ","parseUnexpectedToken: (lhs, parser) => {\n","    ","if (parser.peek === '\\\\foo') {\n","      ","parser.nextToken();\n","      ",'return "foo";\n',"    ","}\n","    ","return null;\n","  ","},\n","}).json);\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"customizing-serialization",children:"Customizing Serialization"}),"\n",(0,i.jsxs)(n.p,{children:["While ",(0,i.jsx)(n.code,{children:"expr.latex"})," provides a simple, default serialization to LaTeX, it may not\nalways be the most suitable for your needs."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To customize the serialization to LaTeX"}),", use the ",(0,i.jsx)(n.code,{children:"expr.toLatex()"})," method."]}),"\n",(0,i.jsxs)(n.p,{children:["The argument of the ",(0,i.jsx)(n.code,{children:"expr.toLatex()"})," method is a ",(0,i.jsx)(n.code,{children:"SerializeLatexOptions"})," object\nthat can be used to customize the serialization. The keys are explained in the\nsections below."]}),"\n",(0,i.jsx)(n.h3,{id:"number-formatting",children:"Number Formatting"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Key"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"fractionalDigits"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The number of decimal places to use when formatting numbers. Use ",(0,i.jsx)(n.code,{children:'"max"'})," to include all available digits and ",(0,i.jsx)(n.code,{children:'"auto"'})," to use the same precision as for evaluation. Default is ",(0,i.jsx)(n.code,{children:'"auto"'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"notation"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The notation to use for numbers. Use ",(0,i.jsx)(n.code,{children:'"auto"'}),", ",(0,i.jsx)(n.code,{children:'"scientific"'}),", or ",(0,i.jsx)(n.code,{children:'"engineering"'}),". Default is ",(0,i.jsx)(n.code,{children:'"auto"'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"avoidExponentsInRange"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A tuple of two values representing a range of exponents. If the exponent for the number is within this range, a decimal notation is used. Otherwise, the number is displayed with an exponent. Default is ",(0,i.jsx)(n.code,{children:"[-6, 20]"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"digitGroupSeparator"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The LaTeX string used to separate group of digits, for example thousands. Default is ",(0,i.jsx)(n.code,{children:'"\\,"'}),". To turn off group separators, set to ",(0,i.jsx)(n.code,{children:'""'}),". If a string tuple is provide, the first string is used to group digits in the whole part and the second string to group digits in the fractional part."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"digitGroupSize"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The number of digits in a group. If set to ",(0,i.jsx)(n.code,{children:'"lakh"'})," the digits are in groups of 2, except for the last group which has 3 digits. If a tupe is provided, the first element is used for the whole part and the second element for the fractional part. Default is ",(0,i.jsx)(n.code,{children:"3"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"exponentProduct"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A LaTeX string inserted before an exponent, if necessary. Default is ",(0,i.jsx)(n.code,{children:'"\\cdot"'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"beginExponentMarker"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A LaTeX string used as template to format an exponent. Default value is ",(0,i.jsx)(n.code,{children:'"10^{"'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"endExponentMarker"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A LaTeX string used as template to format an exponent. Default value is ",(0,i.jsx)(n.code,{children:'"}"'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"truncationMarker"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A LaTeX string used to indicate that a number has more precision than what is displayed. Default is ",(0,i.jsx)(n.code,{children:'"\\ldots"'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"repeatingDecimal"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The decoration around repeating digits. Valid values are ",(0,i.jsx)(n.code,{children:'"auto"'}),", ",(0,i.jsx)(n.code,{children:'"vinculum"'}),", ",(0,i.jsx)(n.code,{children:'"dots"'}),", ",(0,i.jsx)(n.code,{children:'"parentheses"'}),",  ",(0,i.jsx)(n.code,{children:'"arc"'})," and ",(0,i.jsx)(n.code,{children:'"none"'}),". Default is ",(0,i.jsx)(n.code,{children:'"auto"'}),"."]})]})]})]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.log(ce.parse("\\\\pi").N().toLatex({\n',"    ","fractionalDigits: 6,\n","}));\n"]})}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:["console.log(ce.box(700).toLatex({\n","  ",'notation: "scientific",\n',"  ","avoidExponentsInRange: null,\n","  ",'exponentProduct: "\\\\times"\n',"}));\n",'// \u2794 "7\\times10^{2}"\n',"\n","console.log(ce.box(123456.789).toLatex({\n","  ",'notation: "scientific",\n',"  ","avoidExponentsInRange: null,\n","  ",'exponentProduct: "\\\\times",\n',"}));\n",'// \u2794 "1.234\\,567\\,89\\times10^{5}"\n']})}),"\n",(0,i.jsx)(n.h3,{id:"customizing-the-decimal-separator",children:"Customizing the Decimal Separator"}),"\n",(0,i.jsxs)(n.p,{children:["The world is\n",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Decimal_separator#/media/File:DecimalSeparator.svg",children:"about evenly split"}),"\nbetween using a dot or a comma as a decimal marker."]}),"\n",(0,i.jsxs)(n.p,{children:["By default, the ComputeEngine is configured to use a dot, i.e. ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"3.1415"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To use a comma as a decimal marker"}),", set the ",(0,i.jsx)(n.code,{children:"decimalSeparator"})," option:"]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:["console.log(ce.box(3.141).toLatex({\n","    ",'decimalSeparator: "{,}"\n',"}));\n"]})}),"\n",(0,i.jsx)(n.p,{children:"Note that in LaTeX, in order to get the correct spacing around the comma, it\nmust be surrounded by curly brackets."}),"\n",(0,i.jsx)(n.h3,{id:"special-numbers-and-symbols",children:"Special Numbers and Symbols"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Key"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"positiveInfinity"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The LaTeX string used to represent positive infinity. Default is ",(0,i.jsx)(n.code,{children:'"\\infty"'})," ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\infty"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"negativeInfinity"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The LaTeX string used to represent negative infinity. Default is ",(0,i.jsx)(n.code,{children:'"-\\infty"'})," ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"-\\infty"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"imaginaryUnit"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The LaTeX string used to represent the imaginary unit symbol. Default is ",(0,i.jsx)(n.code,{children:'"\\imaginaryI"'})," ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\imaginaryI"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"notANumber"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The LaTeX string to represent the number NaN. Default value is ",(0,i.jsx)(n.code,{children:'"\\operatorname{NaN}"'})," ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\operatorname{NaN}"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"prettify"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["If ",(0,i.jsx)(n.code,{children:"true"}),", the output will be formatted to be more human-readable. Default is ",(0,i.jsx)(n.code,{children:"false"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"invisibleMultiply"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A LaTeX string to use as an invisible multiply operator between expressions. Use ",(0,i.jsx)(n.code,{children:'"\\cdot"'})," to use a ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\cdot"}),". Default is ",(0,i.jsx)(n.code,{children:'""'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"invisiblePlus"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A LaTeX string to use as an invisible plus operator between expressions, for example with mixed numbers. Leave it empty to join the main number and the fraction. Use ",(0,i.jsx)(n.code,{children:'"+"'})," to insert an explicit ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"+"})," operator between them. Default is ",(0,i.jsx)(n.code,{children:'""'}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"multiply"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A LaTeX string to use as a multiply operator between expressions. Use ",(0,i.jsx)(n.code,{children:'"\\cdot"'})," to use a ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\cdot"}),". Default is ",(0,i.jsx)(n.code,{children:'"\\times"'})," ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\times"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"missingSymbol"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["A LaTeX string to use when a symbol is missing. Default is ",(0,i.jsx)(n.code,{children:'"\\placeholder{}"'})," ",(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\placeholder{}"}),"."]})]})]})]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.log(ce.parse("3\\\\frac{1}{4}").toLatex({\n',"    ",'invisiblePlus: "+"\n',"}));\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"customizing-the-serialization-style",children:"Customizing the Serialization Style"}),"\n",(0,i.jsxs)(n.p,{children:["In addition, the keys ",(0,i.jsx)(n.code,{children:"applyFunctionStyle"}),", ",(0,i.jsx)(n.code,{children:"groupStyle"}),", ",(0,i.jsx)(n.code,{children:"powerStyle"}),",\n",(0,i.jsx)(n.code,{children:"rootStyle"}),", ",(0,i.jsx)(n.code,{children:"fractionStyle"}),", ",(0,i.jsx)(n.code,{children:"logicStyle"})," and ",(0,i.jsx)(n.code,{children:"numericSetStyle"}),"\ncan be used to customize the serialization of specific types of expressions."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, a group can be indicated by simple parentheses, or by a\n",(0,i.jsx)(n.code,{children:"\\left...\\right"})," command. A fraction can be indicated by a\n",(0,i.jsx)(n.code,{children:"\\frac{}{}"})," command or by a ",(0,i.jsx)(n.code,{children:"{}{}^{-1}"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The Compute Engine includes some built-in defaults, but they can be customized\nas desired. These style options are functions that take an expression fragment\nand return a string indicating the desired style."}),"\n",(0,i.jsx)(n.p,{children:"For example to always represent fractions with a solidus (forward slash) use:"}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.log(ce.parse("\\\\frac{3}{5}").toLatex({\n',"  ",'fractionStyle: () => "quotient"\n',"}));\n","\n",'console.log(ce.parse("\\\\frac{3}{5}").toLatex({\n',"  ",'fractionStyle: () => "inline-solidus"\n',"}));\n","\n"]})}),"\n",(0,i.jsx)(n.p,{children:"The style option handler has two arguments:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the expression fragment being styled"}),"\n",(0,i.jsx)(n.li,{children:"the depth/level of the expression in the overall expression"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example, to serialize fractions deeper than level 0 as\nan inline solidus:"}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:["\n",'console.log(ce.parse("\\\\frac{a}{b}+\\\\sqrt{\\\\frac{c}{d}}").toLatex({\n',"  ","fractionStyle: (expr, level) =>\n","     ",'level > 0 ? "inline-solidus" : "quotient"\n',"}));\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"function-application",children:"Function Application"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To customize the serialization of function application"}),", use the\n",(0,i.jsx)(n.code,{children:"applyFunctionStyle"})," style option handler."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.log(ce.parse("\\\\sin x").toLatex({\n',"  ",'applyFunctionStyle: () => "big"\n',"}));\n"]})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"paren"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"\\sin(x)"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\sin(x)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"leftright"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"\\sin\\left(x\\right)"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\sin\\left(x\\right)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"big"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"\\sin\\bigl(x\\bigr)"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\sin\\bigl(x\\bigr)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"none"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"\\sin x"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"\\sin x"})})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"group",children:"Group"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To customize the serialization of groups"}),", use the ",(0,i.jsx)(n.code,{children:"groupStyle"})," style option\nhandler."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.log(ce.parse("(a+b)", {canonical: false}).toLatex({\n',"  ",'groupStyle: () => "big"\n',"}));\n"]})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"paren"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"x(a+b)"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"x(a+b)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"leftright"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"x\\left(a+b\\right)"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"x\\left(a+b\\right)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"big"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"x\\bigl(a+b\\bigr)"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"x\\bigl(a+b\\bigr)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"none"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"x a+b"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:" x a+b"})})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"root",children:"Root"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To customize how roots are serialized"}),", use the ",(0,i.jsx)(n.code,{children:"rootStyle"})," style option\nhandler."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.log(ce.parse("\\\\sqrt{2}").toLatex({\n',"  ",'rootStyle: () => "solidus"\n',"}));\n"]})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"radical"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"quotient"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"solidus"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"fraction",children:"Fraction"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To customize how fractions are serialized"}),", use the ",(0,i.jsx)(n.code,{children:"fractionStyle"})," style\noption handler."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.log(ce.parse("\\\\frac{3}{5}").toLatex({\n',"  ",'fractionStyle: () => "nice-solidus"\n',"}));\n"]})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"quotient"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"inline-solidus"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"nice-solidus"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"reciprocal"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"factor"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"logic",children:"Logic"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To customize how logic expressions are serialized"}),", use the ",(0,i.jsx)(n.code,{children:"logicStyle"})," style\noption handler."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.log(ce.parse("p\\\\land q").toLatex({\n',"  ",'logicStyle: () => "word"\n',"}));\n"]})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"word"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"a \\text{ and } b"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"a \\text{ and } b"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"boolean"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"uppercase-word"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"p \\text{ AND } q"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{className:"language-math math-inline",children:"p \\text{ AND } q"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"punctuation"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"power",children:"Power"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To customize how powers are serialized"}),", use the ",(0,i.jsx)(n.code,{children:"powerStyle"})," style option\nhandler."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.log(ce.parse("x^2").toLatex({\n',"  ",'powerStyle: () => "solidus"\n',"}));\n"]})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"root"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"solidus"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"quotient"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"numeric-sets",children:"Numeric Sets"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To customize how numeric sets are serialized"}),", use the ",(0,i.jsx)(n.code,{children:"numericSetStyle"})," style\noption handler."]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:['console.log(ce.parse("x \\\\in \\\\Z").toLatex({\n',"  ",'numericSetStyle: () => "interval"\n',"}));\n"]})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}}),(0,i.jsx)(n.th,{style:{textAlign:"left"}})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"compact"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"regular"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"interval"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"set-builder"'})}),(0,i.jsx)(n.td,{style:{textAlign:"left"}}),(0,i.jsx)(n.td,{style:{textAlign:"left"}})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"customizing-the-latex-dictionary",children:"Customizing the LaTeX Dictionary"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("a",{href:"/math-json/",children:"MathJSON format"})," is independent of any source or\ntarget language (LaTeX, MathASCII, Python, etc...) or of any specific\ninterpretation of the identifiers used in a MathJSON expression (",(0,i.jsx)(n.code,{children:'"Pi"'}),",\n",(0,i.jsx)(n.code,{children:'"Sin"'}),", etc...)."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"LaTeX dictionary"})," defines how a MathJSON expression can be expressed as a\nLaTeX string (",(0,i.jsx)(n.strong,{children:"serialization"}),") or constructed from a LaTeX string\n(",(0,i.jsx)(n.strong,{children:"parsing"}),")."]}),"\n",(0,i.jsx)(n.p,{children:"The Compute Engine includes a default LaTeX dictionary to parse and serialize\ncommon math expressions."}),"\n",(0,i.jsx)(n.p,{children:"It includes definitions such as:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['"',(0,i.jsxs)(n.em,{children:["The ",(0,i.jsx)(n.code,{children:"Power"}),' function is represented as "',(0,i.jsx)(n.code,{children:"x^{n}"}),'"']}),'"']}),"\n",(0,i.jsxs)(n.li,{children:['"',(0,i.jsxs)(n.em,{children:["The ",(0,i.jsx)(n.code,{children:"Divide"}),' function is represented as "',(0,i.jsx)(n.code,{children:"\\frac{x}{y}"}),'"']}),'".']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Note that the dictionary will include LaTeX commands as triggers. LaTeX commands\nare usually prefixed with a backslash, such as ",(0,i.jsx)(n.code,{children:"\\frac"})," or ",(0,i.jsx)(n.code,{children:"\\pm"}),". It will also\nreference MathJSON identifiers. MathJSON identifiers are usually capitalized,\nsuch as ",(0,i.jsx)(n.code,{children:"Divide"})," or ",(0,i.jsx)(n.code,{children:"PlusMinus"})," and are not prefixed with a backslash."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"To extend the LaTeX syntax"})," update the ",(0,i.jsx)(n.code,{children:"latexDictionary"})," property of the\nCompute Engine"]}),"\n",(0,i.jsx)(s,{children:(0,i.jsxs)(n.div,{slot:"javascript",children:["ce.latexDictionary = [\n","  ","// Include all the entries from the default dictionary...\n","  ","...ce.latexDictionary,\n","  ","// ...and add the `\\smoll{}{}` command\n","  ","{\n","    ","// The parse handler below will be invoked when this LaTeX command\n","    ","// is encountered\n","    ","latexTrigger: '\\\\smoll',\n","    ","parse: (parser) => {\n","      ","// We're expecting two arguments, so we're calling\n","      ","// `parseGroup()` twice. If `parseGroup()` returns `null`,\n","      ","// we assume that the argument is missing.\n","      ","return [\n","        ",'"Divide",\n',"        ",'parser.parseGroup() ?? ["Error", "\'missing\'"],\n',"        ",'parser.parseGroup() ?? ["Error", "\'missing\'"],\n',"      ","];\n","    ","},\n","  ","},\n","];\n","\n","console.log(ce.parse('\\\\smoll{1}{5}').json);\n",'// The "Divide" get represented as a "Rational" by default when\n',"// both arguments are integers.\n",'// \u2794 ["Rational", 1, 5]\n']})}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["Do not modify the ",(0,i.jsx)(n.code,{children:"ce.latexDictionary"})," array directly. Instead, create a new\narray that includes the entries from the default dictionary, and add your own\nentries. Later entries will override earlier ones, so you can replace or\nmodify existing entries by providing a new definition for them."]})}),"\n",(0,i.jsx)(n.h3,{id:"latex-dictionary-entries",children:"LaTeX Dictionary Entries"}),"\n",(0,i.jsx)(n.p,{children:"Each entry in the LaTeX dictionary is an object with the following properties:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"kind"})}),"\n",(0,i.jsx)(n.p,{children:"The kind of expression associated with this entry."}),"\n",(0,i.jsxs)(n.p,{children:["Valid values are ",(0,i.jsx)(n.code,{children:"prefix"}),", ",(0,i.jsx)(n.code,{children:"postfix"}),", ",(0,i.jsx)(n.code,{children:"infix"}),", ",(0,i.jsx)(n.code,{children:"expression"}),", ",(0,i.jsx)(n.code,{children:"function"}),", ",(0,i.jsx)(n.code,{children:"symbol"}),",\n",(0,i.jsx)(n.code,{children:"environment"})," and ",(0,i.jsx)(n.code,{children:"matchfix"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If not provided, the default is ",(0,i.jsx)(n.code,{children:"expression"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The meaning of the values and how to use them is explained below."}),"\n",(0,i.jsxs)(n.p,{children:["Note that it is possible to provide multiple entries with the same ",(0,i.jsx)(n.code,{children:"latexTrigger"}),"\nor ",(0,i.jsx)(n.code,{children:"identifierTrigger"})," but with different ",(0,i.jsx)(n.code,{children:"kind"})," properties. For example, the\n",(0,i.jsx)(n.code,{children:"+"})," operator is both an ",(0,i.jsx)(n.code,{children:"infix"})," (binary) and a ",(0,i.jsx)(n.code,{children:"prefix"})," (unary) operator."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"latexTrigger"})}),"\n",(0,i.jsxs)(n.p,{children:["A LaTeX fragment that will trigger the entry. For example, ",(0,i.jsx)(n.code,{children:"^{+}"})," or ",(0,i.jsx)(n.code,{children:"\\mathbb{D}"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"identifierTrigger"})}),"\n",(0,i.jsx)(n.p,{children:"A string, usually wrapped in a LaTeX command, that will trigger the entry."}),"\n",(0,i.jsxs)(n.p,{children:["For example, if ",(0,i.jsx)(n.code,{children:"identifierTrigger"})," is ",(0,i.jsx)(n.code,{children:"floor"}),", the LaTeX\ncommand ",(0,i.jsx)(n.code,{children:"\\mathrm{floor}"})," or ",(0,i.jsx)(n.code,{children:"\\operatorname{floor}"})," will trigger the entry."]}),"\n",(0,i.jsxs)(n.p,{children:["Only one of ",(0,i.jsx)(n.code,{children:"latexTrigger"})," or ",(0,i.jsx)(n.code,{children:"identifierTrigger"})," should be provided."]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"kind"}),"  is ",(0,i.jsx)(n.code,{children:'"environment"'}),", only ",(0,i.jsx)(n.code,{children:"identifierTrigger"})," is valid, and it\nrepresents the name of the environment."]}),"\n",(0,i.jsxs)(n.p,{children:["If kind is ",(0,i.jsx)(n.code,{children:"matchfix"}),", both ",(0,i.jsx)(n.code,{children:"openTrigger"})," and ",(0,i.jsx)(n.code,{children:"closeTrigger"})," must be provided instead."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"parse"})}),"\n",(0,i.jsx)(n.p,{children:"A handler that will be invoked when the trigger is encountered in the\nLaTeX input."}),"\n",(0,i.jsxs)(n.p,{children:["It will be passed a ",(0,i.jsx)(n.code,{children:"parser"})," object that can be used to parse the\ninput."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parse"})," handler is invoked when the preconditions for the entry are met.\nFor example, an ",(0,i.jsx)(n.code,{children:"infix"})," entry will only be invoked if the trigger is\nencountered in the LaTeX input and there is a left-hand side to the operator."]}),"\n",(0,i.jsxs)(n.p,{children:["The signature of the ",(0,i.jsx)(n.code,{children:"parse"})," handler will vary depending on the ",(0,i.jsx)(n.code,{children:"kind"}),".\nFor example, for an entry of kind ",(0,i.jsx)(n.code,{children:"infix"})," the left-hand side argument\nwill be passed to the ",(0,i.jsx)(n.code,{children:"parse"})," handler. See below for more info about parsing\nfor each ",(0,i.jsx)(n.code,{children:"kind"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parse"})," handler should return a MathJSON expression or ",(0,i.jsx)(n.code,{children:"null"})," if the\nexpression is not recognized. When ",(0,i.jsx)(n.code,{children:"null"})," is returned, the Compute Engine\nNatural Parser will backtrack and attempt to find another handler that matches\nthe current token. If there can be no ambiguity and the expression is not\nrecognized, the ",(0,i.jsx)(n.code,{children:"parse"})," handler should return an ",(0,i.jsx)(n.code,{children:'["Error"]'})," expression. In\ngeneral, it is better to return ",(0,i.jsx)(n.code,{children:"null"})," and let the Compute Engine Natural\nParser attempt to find another handler that matches the current token.\nIf none is found, an ",(0,i.jsx)(n.code,{children:'["Error"]'})," expression will be returned."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"serialize"})}),"\n",(0,i.jsxs)(n.p,{children:["A handler that will be invoked when the ",(0,i.jsx)(n.code,{children:"expr.latex"})," property is\nread. It will be passed a ",(0,i.jsx)(n.code,{children:"Serializer"})," object that can be used to serialize\nthe expression. The ",(0,i.jsx)(n.code,{children:"serialize"})," handler should return a LaTeX string. See\nbelow for more info about serialization."]}),"\n",(0,i.jsxs)(n.p,{children:["If a ",(0,i.jsx)(n.code,{children:"serialize"})," handler is provided, the ",(0,i.jsx)(n.code,{children:"name"})," property must be provided as\nwell."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"name"})}),"\n",(0,i.jsx)(n.p,{children:"The name of the MathJSON identifier associated with this entry."}),"\n",(0,i.jsxs)(n.p,{children:["If provided, a default ",(0,i.jsx)(n.code,{children:"parse"})," handler will be used that is equivalent to:\n",(0,i.jsx)(n.code,{children:"parse: name"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["It is possible to have multiple definitions with the same triggers, but the\n",(0,i.jsx)(n.code,{children:"name"})," property must be unique. The record with the ",(0,i.jsx)(n.code,{children:"name"})," property will be used\nto serialize the expression. A ",(0,i.jsx)(n.code,{children:"serialize"})," handler is invalid if the ",(0,i.jsx)(n.code,{children:"name"}),"\nproperty is not provided."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"name"})," property must be unique. However, multiple entries\ncan have different triggers that produce the same expression. This is useful\nfor synonyms, such as ",(0,i.jsx)(n.code,{children:"\\operatorname{floor}"})," and ",(0,i.jsx)(n.code,{children:"\\lfloor"}),"...",(0,i.jsx)(n.code,{children:"\\rfloor"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"expressions",children:"Expressions"}),"\n",(0,i.jsxs)(n.p,{children:["The most general type of entry is one of kind ",(0,i.jsx)(n.code,{children:"expression"}),". If no ",(0,i.jsx)(n.code,{children:"kind"}),"\nproperty is provided, the kind is assumed to be ",(0,i.jsx)(n.code,{children:"expression"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For entries of kind ",(0,i.jsx)(n.code,{children:"expression"})," the ",(0,i.jsx)(n.code,{children:"parse"})," handler is invoked when the trigger\nis encountered in the LaTeX input. The ",(0,i.jsx)(n.code,{children:"parse"})," handler is passed a ",(0,i.jsx)(n.code,{children:"parser"}),"\nobject that can be used to parse the input."]}),"\n",(0,i.jsxs)(n.p,{children:["The kind ",(0,i.jsx)(n.code,{children:"expression"})," is suitable for a simple symbol, for example a\nmathematical constant. It can also be used for more complex constructs, such as\nto parse a series of tokens representing an integral expression. In this case,\nthe ",(0,i.jsx)(n.code,{children:"parse"})," handler would be responsible for parsing the entire expression and\nwould use the ",(0,i.jsx)(n.code,{children:"parser"})," object to parse the tokens."]}),"\n",(0,i.jsxs)(n.p,{children:["If the tokens are not recognized, the ",(0,i.jsx)(n.code,{children:"parse"})," handler should return ",(0,i.jsx)(n.code,{children:"null"})," and\nthe parser will continue to look for another handler that matches the current\ntoken."]}),"\n",(0,i.jsx)(n.h4,{id:"functions",children:"Functions"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"function"})," kind is a special case of ",(0,i.jsx)(n.code,{children:"expression"})," where the expression is a\nfunction, possibly using multi-character identifiers, as in\n",(0,i.jsx)(n.code,{children:"\\operatorname{concat}"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Unlike an ",(0,i.jsx)(n.code,{children:"expression"})," entry, after the ",(0,i.jsx)(n.code,{children:"parse"})," handler is invoked, the\nparser will look for a pair of parentheses to parse the arguments of the\nfunction and apply them to the function."]}),"\n",(0,i.jsxs)(n.p,{children:["The parse handler should return the identifier corresponding to the function,\nsuch as ",(0,i.jsx)(n.code,{children:"Concatenate"}),". As a shortcut, the ",(0,i.jsx)(n.code,{children:"parse"})," handler can be provided as an\nExpression. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  kind: "function",\n  identifierTrigger: "concat",\n  parse: "Concatenate"\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"operators-prefix-infix-postfix",children:"Operators: prefix, infix, postfix"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"prefix"}),", ",(0,i.jsx)(n.code,{children:"infix"})," and ",(0,i.jsx)(n.code,{children:"postfix"})," kinds are used for operators."]}),"\n",(0,i.jsxs)(n.p,{children:["Entries for ",(0,i.jsx)(n.code,{children:"prefix"}),", ",(0,i.jsx)(n.code,{children:"infix"})," and ",(0,i.jsx)(n.code,{children:"postfix"})," operators must include a\n",(0,i.jsx)(n.code,{children:"precedence"})," property. The ",(0,i.jsx)(n.code,{children:"precedence"}),' property is a number that indicates the\nprecedence of the operator. The higher the number, the higher the precedence,\nthat is the more "binding" the operator is.']}),"\n",(0,i.jsxs)(n.p,{children:["For example, the ",(0,i.jsx)(n.code,{children:"precedence"})," of the ",(0,i.jsx)(n.code,{children:"Add"})," operator is 275\n(",(0,i.jsx)(n.code,{children:"ADDITION_PRECEDENCE"}),"), while the ",(0,i.jsx)(n.code,{children:"precedence"})," of the ",(0,i.jsx)(n.code,{children:"Multiply"})," operator is\n390 (",(0,i.jsx)(n.code,{children:"MULTIPLICATION_PRECEDENCE"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"1 + 2 * 3"}),", the ",(0,i.jsx)(n.code,{children:"Multiply"})," operator has a ",(0,i.jsx)(n.strong,{children:"higher"})," precedence than the\n",(0,i.jsx)(n.code,{children:"Add"})," operator, so it is applied first."]}),"\n",(0,i.jsx)(n.p,{children:"The precedence range is an integer from 0 to 1000."}),"\n",(0,i.jsx)(n.p,{children:"Here are some rough ranges for the precedence:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["800: prefix and postfix operators: ",(0,i.jsx)(n.code,{children:"\\lnot"})," etc...","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"POSTFIX_PRECEDENCE"})," = 810: ",(0,i.jsx)(n.code,{children:"!"}),", ",(0,i.jsx)(n.code,{children:"'"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["700: some arithmetic operators","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXPONENTIATION_PRECEDENCE"})," = 700: ",(0,i.jsx)(n.code,{children:"^"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["600: some binary operators","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DIVISION_PRECEDENCE"})," = 600: ",(0,i.jsx)(n.code,{children:"\\div"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["300: some logic and arithmetic operators: ",(0,i.jsx)(n.code,{children:"\\land"}),", ",(0,i.jsx)(n.code,{children:"\\lor"})," etc...","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MULTIPLICATION_PRECEDENCE"})," = 390: ",(0,i.jsx)(n.code,{children:"\\times"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["200: arithmetic operators, inequalities:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ADDITION_PRECEDENCE"})," = 275: ",(0,i.jsx)(n.code,{children:"+"})," ",(0,i.jsx)(n.code,{children:"-"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ARROW_PRECEDENCE"})," = 270: ",(0,i.jsx)(n.code,{children:"\\to"})," ",(0,i.jsx)(n.code,{children:"\\rightarrow"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ASSIGNMENT_PRECEDENCE"})," = 260: ",(0,i.jsx)(n.code,{children:":="})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"COMPARISON_PRECEDENCE"})," = 245: ",(0,i.jsx)(n.code,{children:"\\lt"})," ",(0,i.jsx)(n.code,{children:"\\gt"})]}),"\n",(0,i.jsxs)(n.li,{children:["241: ",(0,i.jsx)(n.code,{children:"\\leq"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["0: ",(0,i.jsx)(n.code,{children:","}),", ",(0,i.jsx)(n.code,{children:";"}),", etc..."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"infix"})," kind is used for binary operators (operators with a left-hand-side\nand right-hand-side)."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parse"})," handler will be passed a ",(0,i.jsx)(n.code,{children:"parser"})," object and\nthe left-hand side of the operator, for ",(0,i.jsx)(n.code,{children:"postfix"})," and ",(0,i.jsx)(n.code,{children:"infix"})," operators."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parser"})," object can be used to parse the right-hand side of the expression."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  kind: "infix",\n  latexTrigger: \'\\\\oplus\',\n  precedence: ADDITION_PRECEDENCE,\n  parse: (parser, lhs) => {\n    return ["Concatenate", lhs, parser.parseExpression()];\n  },\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"prefix"})," kind is used for unary operators."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parse"})," handler will be passed a ",(0,i.jsx)(n.code,{children:"parser"})," object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  kind: "prefix",\n  latexTrigger: \'\\\\neg\',\n  precedence: ADDITION_PRECEDENCE,\n  parse: (parser, lhs) => {\n    return ["Negate", lhs];\n  },\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"postfix"})," kind is used for postfix operators. The ",(0,i.jsx)(n.code,{children:"parse"})," handler will be\npassed a ",(0,i.jsx)(n.code,{children:"parser"})," object and the left-hand side of the operator."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  kind: "postfix",\n  latexTrigger: \'\\\\!\',\n  parse: (parser, lhs) => {\n    return ["Factorial", lhs];\n  },\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"environment",children:"Environment"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"environment"})," kind is used for LaTeX environments."]}),"\n",(0,i.jsx)(n.p,{children:"The `identifierTrigger property in that case is the name of the environment."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parse"})," handler wil be passed a ",(0,i.jsx)(n.code,{children:"parser"})," object. The ",(0,i.jsx)(n.code,{children:"parseTabular()"}),"\nmethod can be used to parse the rows and columns of the environment. It\nreturns a two dimensional array of expressions."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parse"})," handler should return a MathJSON expression."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  kind: "environment",\n  identifierTrigger: "matrix",\n  parse: (parser) => {\n    const content = parser.parseTabular();\n    return ["Matrix", ["List", content.map(row => ["List", row.map(cell => cell)])]];\n  },\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"matchfix",children:"Matchfix"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"matchfix"})," kind is used for LaTeX commands that are used to enclose an\nexpression."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"openTrigger"})," and ",(0,i.jsx)(n.code,{children:"closeTrigger"})," indicate the LaTeX commands\nthat enclose the expression. The ",(0,i.jsx)(n.code,{children:"parse"})," handler is passed a ",(0,i.jsx)(n.code,{children:"parser"}),' object and\nthe "body" (the expression between the open and close delimiters). The ',(0,i.jsx)(n.code,{children:"parse"}),"\nhandler should return a MathJSON expression."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"{\n  kind: \"matchfix\",\n  openTrigger: '\\\\lvert',\n  closeTrigger: '\\\\rvert',\n  parse: (parser, body) => {\n    return [\"Abs\", body];\n  },\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parsing",children:"Parsing"}),"\n",(0,i.jsxs)(n.p,{children:["When parsing a LaTeX string, the first step is to tokenize the string according\nto the LaTeX syntax. For example, the input string ",(0,i.jsx)(n.code,{children:"\\frac{ab}{10}"})," will result\nin the tokens ",(0,i.jsx)(n.code,{children:'["\\\\frac", "{", "a", "b", "}", "{", "1", "0", "}"]'}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Note that each LaTeX command is a single token, but that digits and ordinary\nletters are each separate tokens."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"parse"})," handler is invoked when the trigger is encountered in the LaTeX\ntoken strings."]}),"\n",(0,i.jsx)(n.p,{children:"A common case is to return from the parse handler a MathJSON identifier for a\nsymbol or function."}),"\n",(0,i.jsxs)(n.p,{children:["For example, let's say you wanted to map the LaTeX command ",(0,i.jsx)(n.code,{children:"\\div"})," to the\nMathJSON ",(0,i.jsx)(n.code,{children:"Divide"})," function. You would write:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"{\n  latexTrigger: '\\\\div',\n  parse: (parser) => {\n    return \"Divide\";\n  },\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"As a shortcut, you can also write:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"{\n  latexTrigger: '\\\\div',\n  parse: () => \"Divide\"\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or even more succintly:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"{\n  latexTrigger: '\\\\div',\n  parse: \"Divide\"\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The LaTeX ",(0,i.jsx)(n.code,{children:"\\div(1, 2)"})," would then produce the MathJSON expression\n",(0,i.jsx)(n.code,{children:'["Divide", 1, 2]'}),". Note that the arguments are provided as comma-separated,\nparenthesized expressions, not as LaTeX arguments in curly brackets."]}),"\n",(0,i.jsxs)(n.p,{children:["If you need to parse some more complex LaTeX syntax, you can use the ",(0,i.jsx)(n.code,{children:"parser"}),"\nargument of the ",(0,i.jsx)(n.code,{children:"parse"})," handler. The ",(0,i.jsx)(n.code,{children:"parser"})," object has numerous methods to\nhelp you parse the LaTeX string:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.peek"})," is the current token."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.index"})," is the index of the current token. If backtracking is\nnecessary, it is possible to set the index to a previous value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.nextToken()"})," returns the next token and advances the index."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.skipSpace()"}),' in LaTeX math mode, skip over "space" which includes\nspace tokens, and empty groups ',(0,i.jsx)(n.code,{children:"{}"}),". Whether space tokens are skipped or not\ndepends on the ",(0,i.jsx)(n.code,{children:"skipSpace"})," option."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.skipVisualSpace()"}),' skip over "visual space" which includes space\ntokens, empty groups ',(0,i.jsx)(n.code,{children:"{}"}),", and commands such as ",(0,i.jsx)(n.code,{children:"\\,"})," and ",(0,i.jsx)(n.code,{children:"\\!"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.match(token: LatexToken)"})," return true if the next token matches the\nargument, or ",(0,i.jsx)(n.code,{children:"null"})," otherwise."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.matchAll(tokens)"})," return true if the next tokens match the argument,\nan array of tokens, or ",(0,i.jsx)(n.code,{children:"null"})," otherwise."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.matchAny(tokens: LatexToken[])"})," return the next token if it matches\nany of the token in the argument or ",(0,i.jsx)(n.code,{children:"null"})," otherwise."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.matchChar()"})," return the next token if it is a plain character (e.g.\n\"a\", '+'...), or the character corresponding to a hex literal (^^ and ^^^^) or\nthe ",(0,i.jsx)(n.code,{children:"\\char"})," and ",(0,i.jsx)(n.code,{children:"\\unicode"})," commands"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.parseGroup()"})," return an expression if the next token is a group begin\ntoken ",(0,i.jsx)(n.code,{children:"{"})," followed by a sequence of LaTeX tokens until a group end token ",(0,i.jsx)(n.code,{children:"}"}),"\nis encountered, or ",(0,i.jsx)(n.code,{children:"null"})," otherwise."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.parseToken()"})," return an expression if the next token can be parsed as\na MathJSON expression, or ",(0,i.jsx)(n.code,{children:"null"})," otherwise. This is useful when the argument\nof a LaTeX command can be a single token, for example for ",(0,i.jsx)(n.code,{children:"\\sqrt5"}),". Some, but\nnot all, LaTeX commands accept a single token as an argument."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.parseOptionalGroup()"})," return an expression if the next token is an\noptional group begin token ",(0,i.jsx)(n.code,{children:"["})," followed by a sequence of LaTeX tokens until an\noptional group end token ",(0,i.jsx)(n.code,{children:"]"})," is encountered, or ",(0,i.jsx)(n.code,{children:"null"})," otherwise."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.parseExpression()"})," return an expression if the next tokens can be\nparsed as a MathJSON expression, or ",(0,i.jsx)(n.code,{children:"null"})," otherwise. After this call, there\nmay be some tokens left to parse."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parser.parseArguments()"})," return an array of expressions if the next tokens\ncan be parsed as a sequence of MathJSON expressions separated by a comma, or\n",(0,i.jsx)(n.code,{children:"null"})," otherwise. This is useful to parse the argument of a function. For\nexample with ",(0,i.jsx)(n.code,{children:"f(x, y, z)"}),", the arguments would be ",(0,i.jsx)(n.code,{children:"[x, y, z]"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If the ",(0,i.jsx)(n.code,{children:"parse()"})," handler returns ",(0,i.jsx)(n.code,{children:"null"}),", the parser will continue to look for\nanother handler that matches the current token."]}),"\n",(0,i.jsxs)(n.p,{children:["Note there is a pattern in the names of the methods of the parser. The ",(0,i.jsx)(n.code,{children:"match"}),"\nprefix means that the method will return the next token if it matches the\nargument, or ",(0,i.jsx)(n.code,{children:"null"})," otherwise. These methods are more primitive. The ",(0,i.jsx)(n.code,{children:"parse"}),"\nprefix indicates that the method will return a MathJSON expression or ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The most common usage is to call ",(0,i.jsx)(n.code,{children:"parser.parseGroup()"})," to parse a group of\ntokens as an argument to a LaTeX command."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"{\n  latexTrigger: '\\\\div',\n  parse: (parser) => {\n    return [\"Divide\", parser.parseGroup(), parser.parseGroup()];\n  },\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this case, the LaTeX input ",(0,i.jsx)(n.code,{children:"\\div{1}{2}"})," would produce the MathJSON expression\n",(0,i.jsx)(n.code,{children:'["Divide", 1, 2]'})," (note the use of the curly brackets, rather than the\nparentheses in the LaTeX input)."]}),"\n",(0,i.jsxs)(n.p,{children:["If we wanted instead to treat the ",(0,i.jsx)(n.code,{children:"\\div"})," command as a binary operator, we could\nwrite:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  latexTrigger: \'\\\\div\',\n  kind: "infix",\n  parse: (parser, lhs) => {\n    return ["Divide", lhs, parser.parseExpression()];\n  },\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["By using the ",(0,i.jsx)(n.code,{children:'kind: "infix"'})," option, the parser will automatically insert the\nleft-hand side of the operator as the first argument to the ",(0,i.jsx)(n.code,{children:"parse"})," handler."]}),"\n",(0,i.jsx)(n.h3,{id:"serializing",children:"Serializing"}),"\n",(0,i.jsxs)(n.p,{children:["When serializing a MathJSON expression to a LaTeX string, the ",(0,i.jsx)(n.code,{children:"serialize()"}),"\nhandler is invoked. You must specify a ",(0,i.jsx)(n.code,{children:"name"})," property to associate the\nserialization handler with a MathJSON identifier."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  name: "Concatenate",\n  latexTrigger: "\\\\oplus",\n  serialize: (serializer, expr) =>\n    "\\\\oplus" + serializer.wrapArguments(expr),\n  evaluate: (ce, args) => {\n    let result = \'\';\n    for (const arg of args) {\n      val = arg.numericValue;\n      if (val === null || ce.isComplex(val) || Array.isArray(val)) return null;\n      if (ce.isBignum(val)) {\n        if (!val.isInteger() || val.isNegative()) return null;\n        result += val.toString();\n      } else if (typeof val === "number") {\n        if (!Number.isInteger(val) || val < 0) return null;\n        result += val.toString();\n      }\n    }\n    return ce.parse(result);\n  },\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the example above, the LaTeX command ",(0,i.jsx)(n.code,{children:"\\oplus"})," is associated with the\n",(0,i.jsx)(n.code,{children:"Concatenate"})," function. The ",(0,i.jsx)(n.code,{children:"serialize()"})," handler will be invoked when the\n",(0,i.jsx)(n.code,{children:"expr.latex"})," property is read."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that we did not provide a ",(0,i.jsx)(n.code,{children:"parse()"})," handler: if a ",(0,i.jsx)(n.code,{children:"name"})," property is\nprovided, a default ",(0,i.jsx)(n.code,{children:"parse"})," handler will be used that is equivalent to:\n",(0,i.jsx)(n.code,{children:"parse: name"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["It is possible to have multiple definitions with the same triggers, but the\n",(0,i.jsx)(n.code,{children:"name"})," property must be unique. The record with the ",(0,i.jsx)(n.code,{children:"name"})," property will be used\nto serialize the expression. A ",(0,i.jsx)(n.code,{children:"serialize"})," handler is invalid if the ",(0,i.jsx)(n.code,{children:"name"}),"\nproperty is not provided."]}),"\n",(0,i.jsx)(n.h2,{id:"using-a-new-function-with-a-mathfield",children:"Using a New Function with a Mathfield"}),"\n",(0,i.jsx)(n.p,{children:"You may also want to use your new function with a mathfield."}),"\n",(0,i.jsxs)(n.p,{children:["First you need to define a LaTeX macro so that the mathfield knows how to render\nthis command. Let's define the ",(0,i.jsx)(n.code,{children:"\\smallfrac"})," macro."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const mfe = document.querySelector("math-field");\n\nmfe.macros = {\n  ...mfe.macros,\n  smallfrac: {\n    args: 2,\n    def: "{}^{#1}\\\\!\\\\!/\\\\!{}_{#2}",\n  },\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The content of the ",(0,i.jsx)(n.code,{children:"def"})," property is a LaTeX fragment that will be used to\nrender the ",(0,i.jsx)(n.code,{children:"\\\\smallfrac"})," command."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"#1"})," token in ",(0,i.jsx)(n.code,{children:"def"})," is a reference to the first argument and ",(0,i.jsx)(n.code,{children:"#2"})," to the\nsecond one."]}),"\n",(0,i.jsx)(n.p,{children:"You may also want to define an inline shortcut to make it easier to input the\ncommand."}),"\n",(0,i.jsx)(n.p,{children:'With the code below, we define a shortcut "smallfrac".'}),"\n",(0,i.jsx)(n.p,{children:"When typed, the shortcut is replaced with the associated LaTeX."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"#@"})," token represents the argument to the left of the shortcut, and the ",(0,i.jsx)(n.code,{children:"#?"}),"\ntoken represents a placeholder to be filled by the user."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'mfe.inlineShortcuts = {\n  ...mfe.inlineShortcuts,\n  smallfrac: "\\\\smallfrac{#@}{#?}",\n};\n'})}),"\n",(0,i.jsx)(d,{path:"/mathfield/guides/shortcuts/",children:(0,i.jsxs)(n.p,{children:["Learn more about ",(0,i.jsx)(n.strong,{children:"Key Bindings and Inline Shortcuts"}),(0,i.jsx)(t,{name:"chevron-right-bold"})]})}),"\n",(0,i.jsx)(n.p,{children:"You can now parse the input from a mathfield using:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"console.log(ce.parse(mfe.value).json);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Alternatively, the customized compute engine can be associated with the\nmathfields in the document:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'MathfieldElement.computeEngine = ce;\nconsole.log(mfe.getValue("math-json"));\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);